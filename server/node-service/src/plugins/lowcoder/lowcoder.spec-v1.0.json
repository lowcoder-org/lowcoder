{
  "openapi": "3.0.1",
  "info": {
    "title": "Lowcoder Open Rest API",
    "version": "1.1",
    "description": "The Lowcoder API is a RESTful web service designed to facilitate efficient interaction with the Lowcoder platform. This API allows developers to integrate and interact with various functionalities of the Lowcoder service programmatically.",
    "termsOfService": "https://lowcoder.cloud/terms",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "name": "Lowcoder Software LTD",
      "email": "service@lowcoder.org",
      "url": "https://lowcoder.cloud"
    }
  },
  "servers": [
    {
      "url": "{scheme}://{domain}:{port}{basePath}",
      "description": "Lowcoder Self-hosted Installation API Access",
      "variables": {
        "scheme": {
          "description": "HTTP scheme",
          "default": "http",
          "enum": [
            "http",
            "https"
          ]
        },
        "domain": {
          "description": "Lowcoder IP address or domain",
          "default": "localhost"
        },
        "port": {
          "description": "Port",
          "default": "3000"
        },
        "basePath": {
          "description": "Base path",
          "default": "/"
        }
      }
    },
    {
      "url": "https://api-service.lowcoder.cloud",
      "description": "Lowcoder Community Edition: Public Cloud API Access"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/applications/{applicationId}/public-to-marketplace": {
      "put": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Set Application as publicly available on marketplace but to only logged in users",
        "description": "Set a Lowcoder Application identified by its ID as publicly available on marketplace but to only logged in users.",
        "operationId": "setApplicationAsPublicToMarketplace",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationPublicToMarketplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/public-to-all": {
      "put": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Set Application as publicly available",
        "description": "Set a Lowcoder Application identified by its ID as generally publicly available. This is a preparation to published a Lowcoder Application in production mode.",
        "operationId": "setApplicationAsPublic",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationPublicToAllRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/permissions/{permissionId}": {
      "put": {
        "tags": [
          "Application Permissions APIs"
        ],
        "summary": "Update Application permissions",
        "description": "Update the permissions of a specific Lowcoder Application identified by its ID.",
        "operationId": "updateApplicationPermissions",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application Permissions APIs"
        ],
        "summary": "Revoke permissions from Application",
        "description": "Revoke permissions of a specific Lowcoder Application identified by its ID.",
        "operationId": "revokeApplicationPermissions",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/permissions": {
      "get": {
        "tags": [
          "Application Permissions APIs"
        ],
        "summary": "Get Application permissions",
        "description": "Retrieve the permissions of a specific Lowcoder Application identified by its ID.",
        "operationId": "listApplicationPermissions",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationPermissionView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Application Permissions APIs"
        ],
        "summary": "Grant permissions to Application",
        "description": "Grant new permissions to a specific Lowcoder Application identified by its ID.",
        "operationId": "grantApplicationPermissions",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAddPermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/agency-profile": {
      "put": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Set Application as agency profile",
        "description": "Set a Lowcoder Application identified by its ID as as agency profile but to only logged in users.",
        "operationId": "setApplicationAsAgencyProfile",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationAsAgencyProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Get Application data in edit mode",
        "description": "Retrieve the DSL data of a Lowcoder Application in edit-mode by its ID.",
        "operationId": "getApplicationDataInEditMode",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Update Application by ID",
        "description": "Update a Lowcoder Application identified by its ID.",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Delete Application by ID",
        "description": "Permanently delete a Lowcoder Application identified by its ID.",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/restore/{applicationId}": {
      "put": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Restore recycled Application",
        "description": "Restore a previously recycled Lowcoder Application identified by its ID",
        "operationId": "restoreRecycledApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/recycle/{applicationId}": {
      "put": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Move Application to bin (do not delete)",
        "description": "Move a Lowcoder Application identified by its ID to the recycle bin without permanent deletion.",
        "operationId": "recycleApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/publish": {
      "post": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Publish Application for users",
        "description": "Set a Lowcoder Application identified by its ID as available to all selected Users or User-Groups. This is similar to the classic deployment. The Lowcoder Apps gets published in production mode.",
        "operationId": "publicApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/createFromTemplate": {
      "post": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Create an Application from a predefined Template",
        "description": "Use an Application-Template to create a new Application in an Organization where the authenticated or impersonated user has access.",
        "operationId": "createApplicationFromTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications": {
      "post": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Create a new Application",
        "description": "Create a new Lowcoder Application based on the Organization-ID where the authenticated or impersonated user has access.",
        "operationId": "createApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/view_marketplace": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Get Marketplace Application data in view mode",
        "description": "Retrieve the DSL data of a Lowcoder Application in view-mode by its ID for the Marketplace.",
        "operationId": "getMarketplaceApplicationDataInViewMode",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/view_agency": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Get Agency profile Application data in view mode",
        "description": "Retrieve the DSL data of a Lowcoder Application in view-mode by its ID marked as Agency Profile.",
        "operationId": "getAgencyProfileApplicationDataInViewMode",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/{applicationId}/view": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Get Application data in view mode",
        "description": "Retrieve the DSL data of a Lowcoder Application in view-mode by its ID.",
        "operationId": "getApplicatioDataInViewMode",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/recycle/list": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "List recycled Applications in bin",
        "description": "List all the recycled Lowcoder Applications in the recycle bin where the authenticated or impersonated user has access.",
        "operationId": "listRecycledApplications",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListApplicationInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/marketplace-apps": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "List Marketplace Applications",
        "description": "Retrieve a list of Lowcoder Applications that are published to the Marketplace",
        "operationId": "listMarketplaceApplications",
        "parameters": [
          {
            "name": "applicationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListMarketplaceApplicationInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/list": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "List Applications of current User",
        "description": "Retrieve a list of Lowcoder Applications accessible by the authenticated or impersonated user.",
        "operationId": "listApplications",
        "parameters": [
          {
            "name": "applicationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationStatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "NORMAL",
                "RECYCLED",
                "DELETED"
              ]
            }
          },
          {
            "name": "withContainerSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListApplicationInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/home": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "Get the homepage Application of current User",
        "description": "Retrieve the first displayed Lowcoder Application for an authenticated or impersonated user.",
        "operationId": "getUserHomepageApplication",
        "parameters": [
          {
            "name": "applicationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewUserHomepageView"
                }
              }
            }
          }
        }
      }
    },
    "/api/applications/agency-profiles": {
      "get": {
        "tags": [
          "Application APIs"
        ],
        "summary": "List agency profile Applications",
        "description": "Retrieve a list of Lowcoder Applications that are set as agency profiles",
        "operationId": "listAgencyProfileApplications",
        "parameters": [
          {
            "name": "applicationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListMarketplaceApplicationInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/application/history-snapshots": {
      "post": {
        "tags": [
          "Application History APIs"
        ],
        "summary": "Create Application Snapshot",
        "description": "Create a snapshot of an Application DSL within Lowcoder, capturing its current state for future reference.",
        "operationId": "createApplicationSnapshot",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationHistorySnapshotRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/application/history-snapshots/{applicationId}": {
      "get": {
        "tags": [
          "Application History APIs"
        ],
        "summary": "List Application Snapshots",
        "description": "Retrieve a list of Snapshots associated with a specific Application within Lowcoder.",
        "operationId": "listApplicationSnapshots",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewMapStringObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/application/history-snapshots/{applicationId}/{snapshotId}": {
      "get": {
        "tags": [
          "Application History APIs"
        ],
        "summary": "Retrieve Application Snapshot",
        "description": "Retrieve a specific Application Snapshot within Lowcoder using the Application and Snapshot IDs.",
        "operationId": "getApplicationSnapshot",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewHistorySnapshotDslView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Update Bundle",
        "description": "Modify the properties and settings of an existing Bundle Bundle within Lowcoder.",
        "operationId": "updateBundle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Bundle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundleInfoView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Create new Bundle",
        "description": "Create a new Application Bundle within the Lowcoder to organize Applications effectively.",
        "operationId": "createBundle",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBundleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{id}": {
      "delete": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Delete Bundle",
        "description": "Permanently remove an Application Bundle from Lowcoder using its unique ID.",
        "operationId": "deleteBundle",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/reorder": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Reorder Bundle",
        "description": "Reorder bundle.",
        "operationId": "reorderBundle",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elementIds",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/public-to-marketplace": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Set Bundle as publicly available on marketplace but to only logged in users",
        "description": "Set a Lowcoder Bundle identified by its ID as publicly available on marketplace but to only logged in users.",
        "operationId": "setBundleAsPublicToMarketplace",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundlePublicToMarketplaceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/public-to-all": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Set Bundle as publicly available",
        "description": "Set a Lowcoder Bundle identified by its ID as generally publicly available. This is a preparation to published a Lowcoder Bundle in production mode.",
        "operationId": "setBundleAsPublic",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundlePublicToAllRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/permissions/{permissionId}": {
      "put": {
        "tags": [
          "Bundle Permissions APIs"
        ],
        "summary": "Update Bundle permissions",
        "description": "Modify permissions associated with a specific Bundle Bundle within Lowcoder.",
        "operationId": "updateBundlePermissions",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bundle Permissions APIs"
        ],
        "summary": "Revoke permissions from Bundle",
        "description": "Remove specific permissions from an Bundle Bundle within Lowcoder, ensuring that selected Users or User-Groups no longer have access.",
        "operationId": "revokeBundlePermissions",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/agency-profile": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Set Bundle as agency profile",
        "description": "Set a Lowcoder Bundle identified by its ID as as agency profile but to only logged in users.",
        "operationId": "setBundleAsAgencyProfile",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BundleAsAgencyProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/restore/{bundleId}": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Restore recycled Bundle",
        "description": "Restore a previously recycled Lowcoder Bundle identified by its ID",
        "operationId": "restoreRecycledBundle",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/recycle/{bundleId}": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Move Bundle to bin (do not delete)",
        "description": "Move a Lowcoder Bundle identified by its ID to the recycle bin without permanent deletion.",
        "operationId": "recycleBundle",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/moveApp/{id}": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Move App to Bundle",
        "description": "Relocate an application to a different bundle in Lowcoder using its unique ID.",
        "operationId": "moveApp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromBundleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toBundleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/addApp/{id}": {
      "put": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Add App to Bundle",
        "description": "Add an application to a bundle in Lowcoder using its unique ID.",
        "operationId": "addApp",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toBundleId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/publish": {
      "post": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Publish Bundle for users",
        "description": "Set a Lowcoder Bundle identified by its ID as available to all selected Users or User-Groups. This is similar to the classic deployment. The Lowcoder Bundle gets published in production mode.",
        "operationId": "publicBundle",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/permissions": {
      "get": {
        "tags": [
          "Bundle Permissions APIs"
        ],
        "summary": "Get Bundle permissions",
        "description": "Retrieve detailed information about permissions associated with a specific Bundle Bundle within Lowcoder.",
        "operationId": "listBundlePermissions",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundlePermissionView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bundle Permissions APIs"
        ],
        "summary": "Grant permissions to Bundle",
        "description": "Assign new permissions to a specific Bundle Bundle within Lowcoder, allowing authorized users to access it.",
        "operationId": "grantBundlePermissions",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAddPermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/view": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Get Bundle data in view mode",
        "description": "Retrieve the data of a Lowcoder Bundle in view-mode by its ID.",
        "operationId": "getBundleDataInViewMode",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/view_marketplace": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Get Marketplace Bundle data in view mode",
        "description": "Retrieve the DSL data of a Lowcoder Bundle in view-mode by its ID for the Marketplace.",
        "operationId": "getMarketplaceBundleDataInViewMode",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/view_agency": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Get Agency profile Bundle data in view mode",
        "description": "Retrieve the DSL data of a Lowcoder Bundle in view-mode by its ID marked as Agency Profile.",
        "operationId": "getAgencyProfileBundleDataInViewMode",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/{bundleId}/elements": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "Get Bundle contents",
        "description": "Retrieve the contents of an Bundle Bundle within Lowcoder, including Bundles.",
        "operationId": "listBundleContents",
        "parameters": [
          {
            "name": "bundleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "APPLICATION",
                "MODULE",
                "COMPOUND_APPLICATION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/recycle/list": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "List recycled Bundles in bin",
        "description": "List all the recycled Lowcoder Bundles in the recycle bin where the authenticated or impersonated user has access.",
        "operationId": "listRecycledBundles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/marketplace-bundles": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "List Marketplace Bundles",
        "description": "Retrieve a list of Lowcoder Bundles that are published to the Marketplace",
        "operationId": "listMarketplaceBundles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListMarketplaceBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/list": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "List Bundles of current User",
        "description": "Retrieve a list of Lowcoder Bundles accessible by the authenticated or impersonated user.",
        "operationId": "listBundles",
        "parameters": [
          {
            "name": "bundleStatus",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "NORMAL",
                "RECYCLED",
                "DELETED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/bundles/agency-profiles": {
      "get": {
        "tags": [
          "Bundle APIs"
        ],
        "summary": "List agency profile Bundles",
        "description": "Retrieve a list of Lowcoder Bundles that are set as agency profiles",
        "operationId": "listAgencyProfileBundles",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListMarketplaceBundleInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders": {
      "put": {
        "tags": [
          "Folder APIs"
        ],
        "summary": "Update Folder",
        "description": "Modify the properties and settings of an existing Application Folder within Lowcoder.",
        "operationId": "updateFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewFolderInfoView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folder APIs"
        ],
        "summary": "Create new Folder",
        "description": "Create a new Application Folder within the Lowcoder to organize Applications effectively.",
        "operationId": "createFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Folder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewFolderInfoView"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{folderId}/permissions/{permissionId}": {
      "put": {
        "tags": [
          "Folder Permissions APIs"
        ],
        "summary": "Update Folder permissions",
        "description": "Modify permissions associated with a specific Application Folder within Lowcoder.",
        "operationId": "updateFolderPermissions",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Folder Permissions APIs"
        ],
        "summary": "Revoke permissions from Folder",
        "description": "Remove specific permissions from an Application Folder within Lowcoder, ensuring that selected Users or User-Groups no longer have access.",
        "operationId": "revokeFolderPermissions",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/move/{id}": {
      "put": {
        "tags": [
          "Folder APIs"
        ],
        "summary": "Move Folder",
        "description": "Relocate an Application Folder to a different location in the Folder hierarchy in Lowcoder using its unique ID.",
        "operationId": "moveFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetFolderId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{folderId}/permissions": {
      "get": {
        "tags": [
          "Folder Permissions APIs"
        ],
        "summary": "Get Folder permissions",
        "description": "Retrieve detailed information about permissions associated with a specific Application Folder within Lowcoder.",
        "operationId": "listFolderPermissions",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewApplicationPermissionView"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Folder Permissions APIs"
        ],
        "summary": "Grant permissions to Folder",
        "description": "Assign new permissions to a specific Application Folder within Lowcoder, allowing authorized users to access it.",
        "operationId": "grantFolderPermissions",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAddPermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/elements": {
      "get": {
        "tags": [
          "Folder APIs"
        ],
        "summary": "Get Folder contents",
        "description": "Retrieve the contents of an Application Folder within Lowcoder, including Applications and Subfolders.",
        "operationId": "listFolderContents",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "APPLICATION",
                "MODULE",
                "COMPOUND_APPLICATION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/folders/{id}": {
      "delete": {
        "tags": [
          "Folder APIs"
        ],
        "summary": "Delete Folder",
        "description": "Permanently remove an Application Folder from Lowcoder using its unique ID.",
        "operationId": "deleteFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources": {
      "post": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Create new data source",
        "description": "Create a new data source in Lowcoder for data retrieval or storage.",
        "operationId": "createDatasource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertDatasourceRequest_Public"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewDatasource_Public"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/{id}": {
      "get": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get data source by ID",
        "description": "Retrieve a specific data source within Lowcoder by its ID.",
        "operationId": "getDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewDatasource_Public"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Update data source by ID",
        "description": "Modify the properties and settings of a data source within Lowcoder using its ID.",
        "operationId": "updateDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertDatasourceRequest_Public"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewDatasource_Public"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Delete data source by ID",
        "description": "Permanently remove a data source within Lowcoder using its ID.",
        "operationId": "deleteDatasource",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/{datasourceId}/permissions": {
      "get": {
        "tags": [
          "Data Source Permissions APIs"
        ],
        "summary": "Get data source permissions",
        "description": "Retrieve permissions associated with a specific data source within Lowcoder, identified by its ID.",
        "operationId": "listDatasourcePermissions",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewCommonPermissionView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Data Source Permissions APIs"
        ],
        "summary": "Update data source permission",
        "description": "Modify a specific data source permission within Lowcoder, identified by its ID.",
        "operationId": "updateDatasourcePermission",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAddPermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/permissions/{permissionId}": {
      "put": {
        "tags": [
          "Data Source Permissions APIs"
        ],
        "summary": "Grant permissions to data source",
        "description": "Assign permissions for selected users or user-groups to a specific data source within Lowcoder, identified by its ID.",
        "operationId": "grantDatasourcePermissions",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePermissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Data Source Permissions APIs"
        ],
        "summary": "Revoke permission from data source",
        "description": "Revoke a specific permission from a data source within Lowcoder, identified by its ID.",
        "operationId": "revokeDatasourcePermission",
        "parameters": [
          {
            "name": "permissionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/{datasourceId}/structure": {
      "get": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get data source structure",
        "description": "Retrieve the structure and schema of a data source within Lowcoder, identified by its ID.",
        "operationId": "getDatasourceStructure",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ignoreCache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewDatasourceStructure"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/listByOrg": {
      "get": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get data sources by Organization ID",
        "description": "List data sources associated with a specific Organization-ID within Lowcoder.",
        "operationId": "listDatasourcesByOrg",
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListDatasourceView_Public"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/listByApp": {
      "get": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get data sources by Application ID",
        "description": "List data sources associated with a specific Application-ID within Lowcoder.",
        "operationId": "listDatasourcesByApp",
        "parameters": [
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListDatasourceView_Public"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/jsDatasourcePlugins": {
      "get": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get Node service plugins",
        "description": "Retrieve a list of node service plugins available within Lowcoder.",
        "operationId": "listNodeServicePlugins",
        "parameters": [
          {
            "name": "appId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListDatasource"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/info": {
      "get": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get data source information",
        "description": "Obtain information related to a data source within Lowcoder.",
        "operationId": "getDatasourceInfo",
        "parameters": [
          {
            "name": "datasourceId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/test": {
      "post": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Test data source",
        "description": "Verify the functionality and connectivity of a data source within the Lowcoder platform, identified by its ID.",
        "operationId": "testDatasource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertDatasourceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/datasources/getPluginDynamicConfig": {
      "post": {
        "tags": [
          "Data Source APIs"
        ],
        "summary": "Get data source dynamic config",
        "description": "Get additional dynamic configuration parameter information of data source within Lowcoder.",
        "operationId": "getDatasourceDynamicConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GetPluginDynamicConfigRequestDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/query/execute-from-node": {
      "post": {
        "tags": [
          "Query Execution APIs"
        ],
        "summary": "Execute query from node service",
        "description": "Execute a data Query from a Node service within Lowcoder, facilitating data retrieval and processing. Node Service is used for extended Data Source Plugins.",
        "operationId": "executeQueryFromNodeService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryQueryRequestFromJs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResultView"
                }
              }
            }
          }
        }
      }
    },
    "/api/query/execute": {
      "post": {
        "tags": [
          "Query Execution APIs"
        ],
        "summary": "Execute query from API service",
        "description": "Execute a data Query from an API service within Lowcoder, facilitating data retrieval and processing. API Service is used for standard Data Sources like Databases.",
        "operationId": "executeQueryFromApiService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryExecutionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResultView"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-query-records": {
      "get": {
        "tags": [
          "Library Queries Record APIs"
        ],
        "summary": "Get Library Query Records",
        "description": "Retrieve a list of Library Query Records, which store information related to executed queries within Lowcoder and the current Organization / Workspace by the impersonated User",
        "operationId": "listLibraryQueryRecords",
        "parameters": [
          {
            "name": "libraryQueryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryQueryRecordId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewMapStringObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-query-records/listByLibraryQueryId": {
      "get": {
        "tags": [
          "Library Queries Record APIs"
        ],
        "summary": "Get Library Query Record",
        "description": "Retrieve a specific Library Query Record within Lowcoder using the associated library query ID.",
        "operationId": "getLibraryQueryRecord",
        "parameters": [
          {
            "name": "libraryQueryId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListLibraryQueryRecordMetaView"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-queries/listByOrg": {
      "get": {
        "tags": [
          "Query Library APIs"
        ],
        "summary": "Get Data Query Libraries for organization",
        "description": "Retrieve a list of Library Queries for a specific Organization within Lowcoder.",
        "operationId": "listLibrartQueriesByOrg",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListLibraryQueryView"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-queries/dropDownList": {
      "get": {
        "tags": [
          "Query Library APIs"
        ],
        "summary": "Get Data Query Libraries in dropdown format",
        "description": "Retrieve Library Queries in a dropdown format within Lowcoder, suitable for selection in user interfaces.",
        "operationId": "listLibraryQueriesForDropDown",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListLibraryQueryAggregateView"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-query-records/{libraryQueryRecordId}": {
      "delete": {
        "tags": [
          "Library Queries Record APIs"
        ],
        "summary": "Delete Library Query Record",
        "description": "Permanently remove a specific Library Query Record from Lowcoder using its unique record ID.",
        "operationId": "deleteLibrartQueryRecord",
        "parameters": [
          {
            "name": "libraryQueryRecordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/library-queries/{libraryQueryId}/publish": {
      "post": {
        "tags": [
          "Query Library APIs"
        ],
        "summary": "Publish a Data Query Library for usage",
        "description": "Publish a Library Query for usage within Lowcoder, making it available for other users to utilize.",
        "operationId": "publishLibraryQuery",
        "parameters": [
          {
            "name": "libraryQueryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryQueryPublishRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewLibraryQueryRecordMetaView"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-queries": {
      "post": {
        "tags": [
          "Query Library APIs"
        ],
        "summary": "Create a Library for Data Queries",
        "description": "Create a new Library Query within Lowcoder for storing and managing reusable Data Queries.",
        "operationId": "createLibraryQuery",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewLibraryQueryView"
                }
              }
            }
          }
        }
      }
    },
    "/api/library-queries/{libraryQueryId}": {
      "put": {
        "tags": [
          "Query Library APIs"
        ],
        "summary": "Update a Data Query Library",
        "description": "Modify the properties and settings of an existing Library Query within Lowcoder identified by its unique ID.",
        "operationId": "updateLibraryQuery",
        "parameters": [
          {
            "name": "libraryQueryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertLibraryQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Query Library APIs"
        ],
        "summary": "Delete a Data Query Library",
        "description": "Permanently remove a Library Query from Lowcoder using its unique ID.",
        "operationId": "deleteLibraryQuery",
        "parameters": [
          {
            "name": "libraryQueryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations": {
      "post": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Create a new Organization",
        "description": "Create a new Organization (Workspace) within the Lowcoder platform as a encapsulated space for Applications, Users and Resources.",
        "operationId": "createOrganization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewOrgView"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/logo": {
      "post": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Upload Organization Logo",
        "description": "Upload an Organization logo for branding and identification for a Lowcoder Organization / Workspace.",
        "operationId": "uploadOrganizationLogo",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/Part"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Delete Organization Logo",
        "description": "Remove the logo associated with an Organization within Lowcoder.",
        "operationId": "deleteOrganizationLogo",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/members": {
      "get": {
        "tags": [
          "Organization Member APIs"
        ],
        "summary": "List Organization Members",
        "description": "Retrieve a list of members belonging to an Organization within Lowcoder.",
        "operationId": "listOrganizationMembers",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewOrgMemberListView"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/datasourceTypes": {
      "get": {
        "tags": [
          "Organization Member APIs"
        ],
        "summary": "Get supported data source types for Organization",
        "description": "Retrieve a list of supported datasource types for an Organization within Lowcoder.",
        "operationId": "getOrganizationDatasourceTypes",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListDatasourceMetaInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/api-usage": {
      "get": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Get the api usage count for the org",
        "description": "Calculate the used api calls for this organization and return the count",
        "operationId": "getOrgApiUsageCount",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lastMonthOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewLong"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/remove": {
      "delete": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Delete Organization by ID",
        "description": "Permanently remove an User from an Organization in Lowcoder using its unique IDs.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/leave": {
      "delete": {
        "tags": [
          "Organization Member APIs"
        ],
        "summary": "Remove current user from Organization",
        "description": "Allow the current user to voluntarily leave an Organization in Lowcoder, removing themselves from the organization's membership.",
        "operationId": "leaveOrganization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}": {
      "delete": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Delete Organization by ID",
        "description": "Permanently remove an Organization from Lowcoder using its unique ID.",
        "operationId": "deleteOrganization_1",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/update": {
      "put": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Update Organization by ID",
        "description": "Modify the properties and settings of an existing Organization within Lowcoder identified by its unique ID.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/role": {
      "put": {
        "tags": [
          "Organization Member APIs"
        ],
        "summary": "Update role of Member in Organization",
        "description": "Change the Role of a specific Member (User) within an Organization in Lowcoder using the unique ID of a user and the name of the existing Role.",
        "operationId": "updateOrganizationMemberRole",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/{orgId}/common-settings": {
      "get": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Get Organization common Settings",
        "description": "Retrieve common settings (such as Themes and Auth Sources) and configurations for an Organization within Lowcoder using its unique ID.",
        "operationId": "getOrganizationSettings",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewOrganizationCommonSettings"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Organization APIs"
        ],
        "summary": "Update Organization common Settings",
        "description": "Modify common settings (such as Themes) and configurations for a Lowcoder Organization / Workspace.",
        "operationId": "updateOrganizationSettings",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgCommonSettingsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/organizations/switchOrganization/{orgId}": {
      "put": {
        "tags": [
          "Organization Member APIs"
        ],
        "summary": "Switch current users Organization",
        "description": "Trigger a switch of the active Organization for the current User within Lowcoder in regards to the Session. After this switch, the impersonated user will see all resources from the new / selected Organization.",
        "operationId": "switchOrganization",
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation": {
      "post": {
        "tags": [
          "User invitation APIs"
        ],
        "summary": "Create user Invitation",
        "description": "Create a generic User-Invitation within Lowcoder to invite new users to join the platform. Internally an invite Link based on inviting User and it's current Organization / Workspace is built.",
        "operationId": "createUserInvitation",
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewInvitationVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation/{invitationId}/invite": {
      "get": {
        "tags": [
          "User invitation APIs"
        ],
        "summary": "Get Invitation",
        "description": "Retrieve information about a specific Invitation within Lowcoder, including details about the Invitee and the connected Organization / Workspace.",
        "operationId": "getInvitation",
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/invitation/{invitationId}": {
      "get": {
        "tags": [
          "User invitation APIs"
        ],
        "summary": "Invite User",
        "description": "Proceed the actual Invite for User to an Lowcoder Organization / Workspace using an existing Invitation identified by its ID.",
        "operationId": "inviteUser",
        "parameters": [
          {
            "name": "invitationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewInvitationVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/users": {
      "put": {
        "tags": [
          "User APIs"
        ],
        "summary": "Update current User",
        "description": "Enable the current User to update their Profile information within Lowcoder, ensuring accuracy and relevance.",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewUserProfileView"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/password": {
      "put": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Update User Password",
        "description": "Allow the User to update their Password within Lowcoder, enhancing security and account management.",
        "operationId": "updatePassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Set User Password",
        "description": "Set a new Password for the User within Lowcoder, ensuring secure access to their account.",
        "operationId": "setPassword",
        "parameters": [
          {
            "name": "password",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/newUserGuidanceShown": {
      "put": {
        "tags": [
          "User APIs"
        ],
        "summary": "Mark current user with help shown status",
        "description": "Indicate that the current user has been shown help or guidance within Lowcoder, helping track user assistance efforts.",
        "operationId": "newUserGuidanceShown",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/mark-status": {
      "put": {
        "tags": [
          "User APIs"
        ],
        "summary": "Mark current User with Status",
        "description": "Mark the current User with a specific Status within Lowcoder, allowing for status tracking or updates.",
        "operationId": "markUserStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkUserStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/userDetail/{id}": {
      "get": {
        "tags": [
          "User APIs"
        ],
        "summary": "Get User Details by ID",
        "description": "Retrieve specific User Details within Lowcoder using their unique user ID.",
        "operationId": "getUserDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/photo/{userId}": {
      "get": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Upload users profile photo by ID",
        "description": "Upload or change the profile photo of a specific User within Lowcoder using their user ID for identification.",
        "operationId": "uploadUserProfilePhotoById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/me": {
      "get": {
        "tags": [
          "User APIs"
        ],
        "summary": "Get current User Profile",
        "description": "Retrieve the profile information of the current user within Lowcoder, including their identity, name, avatar, email, IP address, group memberships, and details of the current Organization / Workspace.",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewObject"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/currentUser": {
      "get": {
        "tags": [
          "User APIs"
        ],
        "summary": "Get current User Information",
        "description": "Retrieve comprehensive information about the current user within Lowcoder, including their ID, name, avatar URL, email, IP address and group memberships.",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewUserDetail"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/reset-password": {
      "post": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Reset User Password",
        "description": "Initiate a Password Reset process for the user within Lowcoder, allowing them to regain access to their account.",
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewString"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/reset-lost-password": {
      "post": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Reset Lost User Password",
        "description": "Resets lost password based on the token from lost password email.",
        "operationId": "resetLostPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetLostPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/photo": {
      "get": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Get current User profile photo",
        "description": "Retrieve the profile photo of the current User within Lowcoder, if available.",
        "operationId": "getUserProfilePhoto",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Upload current Users profile photo",
        "description": "Allow the current User to upload or change their profile photo within Lowcoder for personalization.",
        "operationId": "uploadUserProfilePhoto",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "$ref": "#/components/schemas/Part"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Delete current users profile photo",
        "description": "Remove the profile Photo associated with the current User within Lowcoder.",
        "operationId": "deleteUserProfilePhoto",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/lost-password": {
      "post": {
        "tags": [
          "User Profile Photo APIs"
        ],
        "summary": "Lost User Password",
        "description": "Initiate a Lost Password recovery process.",
        "operationId": "lostPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LostPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups": {
      "post": {
        "tags": [
          "Group APIs"
        ],
        "summary": "Create User Group",
        "description": "Create a new User Group within the current Lowcoder Organization / Workspace for organizing and managing your Application users.",
        "operationId": "createGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewGroupView"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/update": {
      "put": {
        "tags": [
          "Group APIs"
        ],
        "summary": "Update User Group",
        "description": "Modify the properties and settings of an existing User Group within Lowcoder, identified by the unique ID of a User Group.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/role": {
      "put": {
        "tags": [
          "Group Members APIs"
        ],
        "summary": "Update User Group member role",
        "description": "Modify the Role of a specific Member within a User Group in Lowcoder, ensuring proper access control.",
        "operationId": "updateRoleForGroupMember",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/addMember": {
      "post": {
        "tags": [
          "Group Members APIs"
        ],
        "summary": "Add User to User Group",
        "description": "Include a User as a member of a specified User Group in Lowcoder, granting them access to group resources.",
        "operationId": "addUserToGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddMemberRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/members": {
      "get": {
        "tags": [
          "Group Members APIs"
        ],
        "summary": "List User Group Members",
        "description": "Retrieve a list of Users / Members within a specific User Group in Lowcoder, showing the group's composition.",
        "operationId": "listGroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewGroupMemberAggregateView"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/list": {
      "get": {
        "tags": [
          "Group APIs"
        ],
        "summary": "List User Groups",
        "description": "Retrieve a list of User Groups within Lowcoder, providing an overview of available groups, based on the access rights of the currently impersonated User.",
        "operationId": "listGroups",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListGroupView"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/remove": {
      "delete": {
        "tags": [
          "Group Members APIs"
        ],
        "summary": "Remove a User from User Group",
        "description": "Remove a specific User from a User Group within Lowcoder, revoking their access to the Group resources.",
        "operationId": "removeUserFromGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/leave": {
      "delete": {
        "tags": [
          "Group Members APIs"
        ],
        "summary": "Remove current User from User Group",
        "description": "Allow the current user to voluntarily leave a User Group in Lowcoder, removing themselves from the group's membership.",
        "operationId": "leaveGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}": {
      "delete": {
        "tags": [
          "Group APIs"
        ],
        "summary": "Delete User Group",
        "description": "Permanently remove a User Group from Lowcoder using its unique ID.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/config/{id}": {
      "delete": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Delete authentication configuration",
        "description": "Delete a specific Lowcoder authentication configuration.",
        "operationId": "deleteAuthConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delete",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/api-key/{id}": {
      "delete": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Delete API key",
        "description": "Delete a specific API key associated with the current impersonated user.",
        "operationId": "deleteApiKey",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/tp/login": {
      "post": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Login with third party",
        "description": "Authenticate a Lowcoder User using third-party login credentials.",
        "operationId": "loginWithThirdParty",
        "parameters": [
          {
            "name": "authId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invitationId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/tp/link": {
      "post": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Link current account with third party auth provider",
        "description": "Authenticate a Lowcoder User using third-party login credentials and link to the existing session/account",
        "operationId": "linkAccountWithTP",
        "parameters": [
          {
            "name": "authId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirectUrl",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Logout from Lowcoder",
        "description": "End a logged in Session of a Lowcoder User on the Lowcoder platform.",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/form/login": {
      "post": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Login with user and password (Form based Login)",
        "description": "Authenticate a Lowcoder User using traditional username and password credentials (Form Login).",
        "operationId": "loginWithUserPassword",
        "parameters": [
          {
            "name": "invitationId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orgId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FormLoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/config": {
      "post": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Create authentication configuration",
        "description": "Configure a new authentication method to enable Lowcoder Users to log in, for instance, through OAuth or other similar mechanisms, for the current selected Organization, based on the impersonated User",
        "operationId": "createAuthConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthConfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/api-key": {
      "post": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Create API key for current user",
        "description": "Generate an Lowcoder API key. The API key will inherit all rights of the current impersonated user.",
        "operationId": "createApiKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/APIKeyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewAPIKeyVO"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/configs": {
      "get": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Get available authentication configurations",
        "description": "Retrieve a list of all available authentication configurations for the current selected Organization, based on the impersonated User",
        "operationId": "listAuthConfigs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListAbstractAuthConfig_Internal"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/api-keys": {
      "get": {
        "tags": [
          "Authentication APIs"
        ],
        "summary": "Get API keys of the current User",
        "description": "Retrieve a list of LOwcoder API keys associated with the current impersonated user.",
        "operationId": "listApiKeys",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListAPIKey"
                }
              }
            }
          }
        }
      }
    },
    "/api/assets/{id}": {
      "get": {
        "tags": [
          "Image Assets APIs"
        ],
        "summary": "Retrieve Image Asset",
        "description": "Retrieve an image asset within Lowcoder using its unique ID, which can be used for various purposes such as displaying images in applications.",
        "operationId": "getAsset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/misc/js-library/recommendations": {
      "get": {
        "tags": [
          "Javascript Library APIs"
        ],
        "summary": "Get Javascript Library recommendations",
        "description": "Retrieve the standard list of JavaScript libraries within Lowcoder, as recommendation.",
        "operationId": "getJsLibraryRecommendations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListJsLibraryMeta"
                }
              }
            }
          }
        }
      }
    },
    "/api/misc/js-library/metas": {
      "get": {
        "tags": [
          "Javascript Library APIs"
        ],
        "summary": "Get Javascript Library metadata",
        "description": "Retrieve metadata information for JavaScript libraries within Lowcoder based on an Array as \"name\" parameter to name the desired libraries, providing details about available libraries.",
        "operationId": "getJsLibraryMetadata",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewListJsLibraryMeta"
                }
              }
            }
          }
        }
      }
    },
    "/api/state/healthCheck": {
      "head": {
        "tags": [
          "Status checks APIs"
        ],
        "summary": "Run health check",
        "description": "Perform a health check within Lowcoder to ensure the system's overall operational health and availability.",
        "operationId": "healthCheck",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewBoolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/serverSettings": {
      "get": {
        "tags": [
          "Server Setting APIs"
        ],
        "summary": "Get Lowcoder server settings",
        "description": "Retrieve the list of server settings for Lowcoder.",
        "operationId": "serverSettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "default"
        ],
        "operationId": "index",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseViewVoid"
                }
              }
            }
          }
        },
        "description": "The Health / Root Endpoint"
      }
    }
  },
  "components": {
    "schemas": {
      "UpdatePasswordRequest": {
        "type": "object",
        "properties": {
          "oldPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "ResponseViewBoolean": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "boolean"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "MarkUserStatusRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "uiLanguage": {
            "type": "string"
          }
        }
      },
      "AbstractAuthConfig": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceName": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "enableRegister": {
            "type": "boolean"
          },
          "authType": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "authType"
        }
      },
      "Connection": {
        "required": [
          "rawId",
          "source"
        ],
        "type": "object",
        "properties": {
          "authId": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "rawId": {
            "type": "string",
            "writeOnly": true
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "authConnectionAuthToken": {
            "$ref": "#/components/schemas/ConnectionAuthToken"
          },
          "rawUserInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "tokens": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConnectionAuthToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expireAt": {
            "type": "integer",
            "format": "int64"
          },
          "refreshToken": {
            "type": "string"
          },
          "refreshTokenExpireAt": {
            "type": "integer",
            "format": "int64"
          },
          "source": {
            "type": "string",
            "deprecated": true
          },
          "accessTokenExpired": {
            "type": "boolean"
          },
          "refreshTokenExpired": {
            "type": "boolean"
          }
        }
      },
      "OrgAndVisitorRoleView": {
        "type": "object",
        "properties": {
          "org": {
            "$ref": "#/components/schemas/Organization"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "isAutoGeneratedOrganization": {
            "type": "boolean"
          },
          "contactName": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "thirdPartyCompanyId": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "DELETED"
            ]
          },
          "organizationDomain": {
            "type": "object"
          },
          "commonSettings": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "logoUrl": {
            "type": "string"
          },
          "authConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractAuthConfig"
            }
          }
        }
      },
      "OrganizationDomain": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "configs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractAuthConfig"
            }
          }
        }
      },
      "ResponseViewUserProfileView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UserProfileView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "UserProfileView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orgAndRoles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgAndVisitorRoleView"
            }
          },
          "currentOrgId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "connections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            }
          },
          "uiLanguage": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "hasPassword": {
            "type": "boolean"
          },
          "hasSetNickname": {
            "type": "boolean"
          },
          "hasShownNewUserGuidance": {
            "type": "boolean"
          },
          "userStatus": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "createdTimeMs": {
            "type": "integer",
            "format": "int64"
          },
          "ip": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "anonymous": {
            "type": "boolean"
          },
          "orgDev": {
            "type": "boolean"
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "isEnabled": {
            "type": "boolean"
          }
        }
      },
      "UpdateOrgRequest": {
        "type": "object",
        "properties": {
          "orgName": {
            "type": "string"
          },
          "contactName": {
            "type": "string"
          },
          "contactEmail": {
            "type": "string"
          },
          "contactPhoneNumber": {
            "type": "string"
          }
        }
      },
      "UpdateRoleRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "UpdateOrgCommonSettingsRequest": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "ResponseViewObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "UpdateGroupRequest": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string"
          },
          "dynamicRule": {
            "type": "string"
          }
        }
      },
      "UpsertDatasourceRequest_Public": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "datasourceConfig": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "DatasourceConnectionConfig_Public": {
        "type": "object"
      },
      "Datasource_Public": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "creationSource": {
            "type": "integer",
            "format": "int32"
          },
          "datasourceStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "DELETED"
            ]
          },
          "pluginDefinition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "queryConfigDynamic": {
                "type": "boolean"
              },
              "datasourceConfigExtraDynamic": {
                "type": "boolean"
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "datasourceConfig": {
            "type": "object"
          }
        }
      },
      "ResponseViewDatasource_Public": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/Datasource_Public"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "BatchAddPermissionRequest": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "userIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "groupIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdatePermissionRequest": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "resourceRole": {
            "type": "string",
            "enum": [
              "VIEWER",
              "EDITOR",
              "OWNER"
            ]
          }
        }
      },
      "ApplicationPublicToMarketplaceRequest": {
        "type": "object",
        "properties": {
          "publicToMarketplace": {
            "type": "boolean"
          }
        }
      },
      "ApplicationPublicToAllRequest": {
        "type": "object",
        "properties": {
          "publicToAll": {
            "type": "boolean"
          }
        }
      },
      "ApplicationAsAgencyProfileRequest": {
        "type": "object",
        "properties": {
          "agencyProfile": {
            "type": "boolean"
          }
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "orgId": {
            "type": "string",
            "writeOnly": true
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "applicationType": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "RECYCLED",
              "DELETED"
            ]
          },
          "publishedApplicationDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "editingApplicationDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "publicToAll": {
            "type": "boolean"
          },
          "publicToMarketplace": {
            "type": "boolean"
          },
          "agencyProfile": {
            "type": "boolean",
            "writeOnly": true
          },
          "createdBy": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "editingQueries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationQuery"
            }
          },
          "liveQueries": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationQuery"
            }
          },
          "editingModules": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "liveModules": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "liveContainerSize": {
            "type": "object"
          }
        }
      },
      "ApplicationQuery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "datasourceId": {
            "type": "string",
            "writeOnly": true
          },
          "comp": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "writeOnly": true
          },
          "triggerType": {
            "type": "string"
          },
          "timeout": {
            "type": "string",
            "writeOnly": true
          },
          "compType": {
            "type": "string",
            "writeOnly": true
          },
          "baseQuery": {
            "$ref": "#/components/schemas/BaseQuery"
          },
          "timeoutStr": {
            "type": "string"
          },
          "usingLibraryQuery": {
            "type": "boolean"
          },
          "libraryRecordQueryId": {
            "$ref": "#/components/schemas/LibraryQueryCombineId"
          }
        }
      },
      "BaseQuery": {
        "type": "object",
        "properties": {
          "datasourceId": {
            "type": "string"
          },
          "compType": {
            "type": "string"
          },
          "comp": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "timeout": {
            "type": "string"
          }
        }
      },
      "LibraryQueryCombineId": {
        "type": "object",
        "properties": {
          "libraryQueryId": {
            "type": "string"
          },
          "libraryQueryRecordId": {
            "type": "string"
          },
          "usingEditingRecord": {
            "type": "boolean"
          },
          "usingLiveRecord": {
            "type": "boolean"
          }
        }
      },
      "ApplicationInfoView": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "applicationGid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createAt": {
            "type": "integer",
            "format": "int64"
          },
          "createBy": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "applicationType": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "RECYCLED",
              "DELETED"
            ]
          },
          "containerSize": {
            "type": "object"
          },
          "folderId": {
            "type": "string"
          },
          "lastViewTime": {
            "type": "integer",
            "format": "int64"
          },
          "lastModifyTime": {
            "type": "integer",
            "format": "int64"
          },
          "publicToAll": {
            "type": "boolean"
          },
          "publicToMarketplace": {
            "type": "boolean"
          },
          "agencyProfile": {
            "type": "boolean"
          },
          "folder": {
            "type": "boolean"
          }
        }
      },
      "ApplicationView": {
        "type": "object",
        "properties": {
          "applicationInfoView": {
            "$ref": "#/components/schemas/ApplicationInfoView"
          },
          "applicationDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "moduleDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          },
          "orgCommonSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "templateId": {
            "type": "string"
          }
        }
      },
      "ResponseViewApplicationView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ApplicationView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "UpsertLibraryQueryRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "libraryQueryDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Folder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "parentFolderId": {
            "type": "string"
          },
          "parentFolderGid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "image": {
            "type": "string"
          }
        }
      },
      "FolderInfoView": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "folderGid": {
            "type": "string"
          },
          "parentFolderId": {
            "type": "string"
          },
          "parentFolderGid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "createAt": {
            "type": "integer",
            "format": "int64"
          },
          "createBy": {
            "type": "string"
          },
          "subFolders": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "subApplications": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "lastViewTime": {
            "type": "integer",
            "format": "int64"
          },
          "visible": {
            "type": "boolean"
          },
          "manageable": {
            "type": "boolean"
          },
          "folder": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewFolderInfoView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/FolderInfoView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewVoid": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "Bundle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "bundleStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "RECYCLED",
              "DELETED"
            ]
          },
          "publicToAll": {
            "type": "boolean"
          },
          "publicToMarketplace": {
            "type": "boolean"
          },
          "agencyProfile": {
            "type": "boolean"
          },
          "editingBundleDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "publishedBundleDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "BundleInfoView": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "bundleId": {
            "type": "string"
          },
          "bundleGid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "createAt": {
            "type": "integer",
            "format": "int64"
          },
          "createBy": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          },
          "publicToAll": {
            "type": "boolean"
          },
          "publicToMarketplace": {
            "type": "boolean"
          },
          "agencyProfile": {
            "type": "boolean"
          },
          "editingBundleDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "publishedBundleDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "visible": {
            "type": "boolean"
          },
          "manageable": {
            "type": "boolean"
          },
          "bundle": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewBundleInfoView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BundleInfoView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "BundlePublicToMarketplaceRequest": {
        "type": "object",
        "properties": {
          "publicToMarketplace": {
            "type": "boolean"
          }
        }
      },
      "BundlePublicToAllRequest": {
        "type": "object",
        "properties": {
          "publicToAll": {
            "type": "boolean"
          }
        }
      },
      "BundleAsAgencyProfileRequest": {
        "type": "object",
        "properties": {
          "agencyProfile": {
            "type": "boolean"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        }
      },
      "ResponseViewString": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResetLostPasswordRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string"
          },
          "userEmail": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "Part": {
        "type": "object"
      },
      "LostPasswordRequest": {
        "type": "object",
        "properties": {
          "userEmail": {
            "type": "string"
          }
        }
      },
      "LibraryQueryRequestFromJs": {
        "type": "object",
        "properties": {
          "libraryQueryName": {
            "type": "string"
          },
          "libraryQueryRecordId": {
            "type": "string"
          },
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Param"
            }
          }
        }
      },
      "Param": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "JsonNode": {
        "type": "object"
      },
      "QueryResultView": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          },
          "headers": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "success": {
            "type": "boolean"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "queryCode": {
            "type": "string"
          },
          "hintMessages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "QueryExecutionRequest": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string"
          },
          "queryId": {
            "type": "string"
          },
          "libraryQueryId": {
            "type": "string",
            "writeOnly": true
          },
          "libraryQueryRecordId": {
            "type": "string",
            "writeOnly": true
          },
          "params": {
            "type": "array",
            "writeOnly": true,
            "items": {
              "$ref": "#/components/schemas/Param"
            }
          },
          "viewMode": {
            "type": "boolean"
          },
          "path": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "libraryQueryCombineId": {
            "$ref": "#/components/schemas/LibraryQueryCombineId"
          },
          "applicationQueryRequest": {
            "type": "boolean"
          }
        }
      },
      "OrgView": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          }
        }
      },
      "ResponseViewOrgView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/OrgView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "InvitationVO": {
        "type": "object",
        "properties": {
          "inviteCode": {
            "type": "string"
          },
          "createUserName": {
            "type": "string"
          },
          "invitedOrganizationName": {
            "type": "string"
          },
          "invitedOrganizationId": {
            "type": "string"
          }
        }
      },
      "ResponseViewInvitationVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/InvitationVO"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "AddMemberRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "CreateGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "dynamicRule": {
            "type": "string"
          }
        }
      },
      "GroupView": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "groupGid": {
            "type": "string"
          },
          "groupName": {
            "type": "string"
          },
          "allUsersGroup": {
            "type": "boolean"
          },
          "visitorRole": {
            "type": "string"
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "dynamicRule": {
            "type": "string"
          },
          "syncDelete": {
            "type": "boolean"
          },
          "devGroup": {
            "type": "boolean"
          },
          "syncGroup": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewGroupView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/GroupView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "UpsertDatasourceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "datasourceConfig": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "GetPluginDynamicConfigRequestDTO": {
        "type": "object",
        "properties": {
          "dataSourceId": {
            "type": "string"
          },
          "pluginName": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "dataSourceConfig": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ResponseViewListObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "CreateApplicationRequest": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "applicationType": {
            "type": "integer",
            "format": "int32"
          },
          "publishedApplicationDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "editingApplicationDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "folderId": {
            "type": "string"
          }
        }
      },
      "LibraryQuery": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "libraryQueryDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "baseQuerySupplier": {
            "type": "object"
          },
          "query": {
            "$ref": "#/components/schemas/BaseQuery"
          }
        }
      },
      "LibraryQueryView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "libraryQueryDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "creatorName": {
            "type": "string"
          }
        }
      },
      "ResponseViewLibraryQueryView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/LibraryQueryView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LibraryQueryPublishRequest": {
        "type": "object",
        "properties": {
          "commitMessage": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          }
        }
      },
      "LibraryQueryRecordMetaView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "libraryQueryId": {
            "type": "string"
          },
          "datasourceType": {
            "type": "string"
          },
          "tag": {
            "type": "string"
          },
          "commitMessage": {
            "type": "string"
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "creatorName": {
            "type": "string"
          }
        }
      },
      "ResponseViewLibraryQueryRecordMetaView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/LibraryQueryRecordMetaView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "CreateBundleRequest": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "folderId": {
            "type": "string"
          }
        }
      },
      "FormLoginRequest": {
        "type": "object",
        "properties": {
          "loginId": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "register": {
            "type": "boolean"
          },
          "source": {
            "type": "string"
          },
          "authId": {
            "type": "string"
          }
        }
      },
      "AuthConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "authType": {
            "type": "string"
          },
          "enableRegister": {
            "type": "boolean"
          },
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          },
          "sourceDescription": {
            "type": "string"
          },
          "sourceIcon": {
            "type": "string"
          },
          "sourceCategory": {
            "type": "string"
          },
          "sourceMappings": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "issuerUri": {
            "type": "string"
          },
          "authorizationEndpoint": {
            "type": "string"
          },
          "tokenEndpoint": {
            "type": "string"
          },
          "userInfoEndpoint": {
            "type": "string"
          },
          "instanceId": {
            "type": "string"
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "APIKeyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "empty": {
            "type": "boolean"
          }
        },
        "additionalProperties": {
          "type": "object"
        }
      },
      "APIKeyVO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ResponseViewAPIKeyVO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/APIKeyVO"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApplicationHistorySnapshotRequest": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string"
          },
          "dsl": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "context": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ResponseViewUserDetail": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UserDetail"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "UserDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "uiLanguage": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "ip": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "OrgMemberListView": {
        "type": "object",
        "properties": {
          "visitorRole": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMemberView"
            }
          }
        }
      },
      "OrgMemberView": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "joinTime": {
            "type": "integer",
            "format": "int64"
          },
          "rawUserInfos": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "ResponseViewOrgMemberListView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/OrgMemberListView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "DatasourceMetaInfo": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "hasStructureInfo": {
            "type": "boolean"
          },
          "definition": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "ResponseViewListDatasourceMetaInfo": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasourceMetaInfo"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewOrganizationCommonSettings": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewLong": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "integer",
            "format": "int64"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "GroupMemberAggregateView": {
        "type": "object",
        "properties": {
          "visitorRole": {
            "type": "string"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMemberView"
            }
          }
        }
      },
      "GroupMemberView": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "orgId": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "joinTime": {
            "type": "integer",
            "format": "int64"
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "ResponseViewGroupMemberAggregateView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/GroupMemberAggregateView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewListGroupView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "Column": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "defaultValue": {
            "type": "string"
          },
          "isAutogenerated": {
            "type": "boolean"
          }
        }
      },
      "DatasourceStructure": {
        "type": "object",
        "properties": {
          "tables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Table"
            }
          }
        }
      },
      "Key": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        }
      },
      "ResponseViewDatasourceStructure": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/DatasourceStructure"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "TABLE",
              "VIEW",
              "ALIAS",
              "COLLECTION"
            ]
          },
          "schema": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          },
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            }
          }
        }
      },
      "CommonPermissionView": {
        "type": "object",
        "properties": {
          "orgName": {
            "type": "string"
          },
          "groupPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          },
          "userPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          },
          "creatorId": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          }
        }
      },
      "PermissionItemView": {
        "type": "object",
        "properties": {
          "permissionId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "USER",
              "GROUP"
            ]
          },
          "id": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "ResponseViewCommonPermissionView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/CommonPermissionView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "DatasourceView_Public": {
        "type": "object",
        "properties": {
          "datasource": {
            "$ref": "#/components/schemas/Datasource_Public"
          },
          "edit": {
            "type": "boolean"
          },
          "creatorName": {
            "type": "string"
          }
        }
      },
      "ResponseViewListDatasourceView_Public": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasourceView_Public"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "Datasource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "gid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "creationSource": {
            "type": "integer",
            "format": "int32"
          },
          "datasourceStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "DELETED"
            ]
          },
          "pluginDefinition": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "queryConfigDynamic": {
                "type": "boolean"
              },
              "datasourceConfigExtraDynamic": {
                "type": "boolean"
              },
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "type": "object"
            }
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "datasourceConfig": {
            "$ref": "#/components/schemas/DatasourceConnectionConfig"
          }
        }
      },
      "DatasourceConnectionConfig": {
        "type": "object"
      },
      "ResponseViewListDatasource": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Datasource"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "AbstractAuthConfig_Public": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceName": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "enableRegister": {
            "type": "boolean"
          },
          "authType": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "authType"
        }
      },
      "ConfigView_Public": {
        "type": "object",
        "properties": {
          "authConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractAuthConfig_Public"
            }
          },
          "workspaceMode": {
            "type": "string",
            "enum": [
              "SAAS",
              "ENTERPRISE"
            ]
          },
          "selfDomain": {
            "type": "boolean"
          },
          "cookieName": {
            "type": "string"
          },
          "cloudHosting": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewConfigView_Public": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ConfigView_Public"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ApplicationPermissionView": {
        "type": "object",
        "properties": {
          "orgName": {
            "type": "string"
          },
          "groupPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          },
          "userPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          },
          "creatorId": {
            "type": "string"
          },
          "publicToAll": {
            "type": "boolean"
          },
          "publicToMarketplace": {
            "type": "boolean"
          },
          "agencyProfile": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          }
        }
      },
      "ResponseViewApplicationPermissionView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/ApplicationPermissionView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewListApplicationInfoView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationInfoView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "MarketplaceApplicationInfoView": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "orgId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "creatorEmail": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createAt": {
            "type": "integer",
            "format": "int64"
          },
          "createBy": {
            "type": "string"
          },
          "applicationType": {
            "type": "integer",
            "format": "int32"
          },
          "applicationStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "RECYCLED",
              "DELETED"
            ]
          }
        }
      },
      "ResponseViewListMarketplaceApplicationInfoView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceApplicationInfoView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "APIKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        }
      },
      "ResponseViewUserHomepageView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/UserHomepageView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "TransformedUserInfo": {
        "type": "object",
        "properties": {
          "updateTime": {
            "type": "integer",
            "format": "int64"
          },
          "extra": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "uiLanguage": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "tpAvatarLink": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "NEW",
              "INVITED",
              "ACTIVATED",
              "DELETED"
            ]
          },
          "isEnabled": {
            "type": "boolean"
          },
          "activeAuthId": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "writeOnly": true
          },
          "passwordResetToken": {
            "type": "string"
          },
          "passwordResetTokenExpiry": {
            "type": "string",
            "format": "date-time"
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "connections": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            }
          },
          "apiKeysList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIKey"
            }
          },
          "apiKeys": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "hasSetNickname": {
            "type": "boolean"
          },
          "orgTransformedUserInfo": {
            "type": "object",
            "properties": {
              "empty": {
                "type": "boolean"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/TransformedUserInfo"
            }
          }
        }
      },
      "UserHomepageView": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "folderInfoViews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolderInfoView"
            }
          },
          "homeApplicationViews": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationInfoView"
            }
          }
        }
      },
      "JsLibraryMeta": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "latestVersion": {
            "type": "string"
          },
          "homepage": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "downloadUrl": {
            "type": "string"
          }
        }
      },
      "ResponseViewListJsLibraryMeta": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsLibraryMeta"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewMapStringObject": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewListLibraryQueryRecordMetaView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryQueryRecordMetaView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewListLibraryQueryView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryQueryView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "LibraryQueryAggregateView": {
        "type": "object",
        "properties": {
          "libraryQueryMetaView": {
            "$ref": "#/components/schemas/LibraryQueryMetaView"
          },
          "recordMetaViewList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryQueryRecordMetaView"
            }
          }
        }
      },
      "LibraryQueryMetaView": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "datasourceType": {
            "type": "string"
          },
          "organizationId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createTime": {
            "type": "integer",
            "format": "int64"
          },
          "creatorName": {
            "type": "string"
          }
        }
      },
      "ResponseViewListLibraryQueryAggregateView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryQueryAggregateView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "BundlePermissionView": {
        "type": "object",
        "properties": {
          "orgName": {
            "type": "string"
          },
          "groupPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          },
          "userPermissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          },
          "creatorId": {
            "type": "string"
          },
          "publicToAll": {
            "type": "boolean"
          },
          "publicToMarketplace": {
            "type": "boolean"
          },
          "agencyProfile": {
            "type": "boolean"
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionItemView"
            }
          }
        }
      },
      "ResponseViewBundlePermissionView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/BundlePermissionView"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewListBundleInfoView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleInfoView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "MarketplaceBundleInfoView": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "orgId": {
            "type": "string"
          },
          "orgName": {
            "type": "string"
          },
          "creatorEmail": {
            "type": "string"
          },
          "bundleId": {
            "type": "string"
          },
          "bundleGid": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createAt": {
            "type": "integer",
            "format": "int64"
          },
          "createBy": {
            "type": "string"
          },
          "bundleStatus": {
            "type": "string",
            "enum": [
              "NORMAL",
              "RECYCLED",
              "DELETED"
            ]
          }
        }
      },
      "ResponseViewListMarketplaceBundleInfoView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarketplaceBundleInfoView"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "AbstractAuthConfig_Internal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sourceName": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "enableRegister": {
            "type": "boolean"
          },
          "authType": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "authType"
        }
      },
      "ResponseViewListAbstractAuthConfig_Internal": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractAuthConfig_Internal"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "ResponseViewListAPIKey": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIKey"
            }
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "HistorySnapshotDslView": {
        "type": "object",
        "properties": {
          "applicationsDsl": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "moduleDSL": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            }
          }
        }
      },
      "ResponseViewHistorySnapshotDslView": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/HistorySnapshotDslView"
          },
          "success": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "API Key Authentication with a Bearer token. Copy your API Key and prefix it here with 'Bearer ' (e.g. 'Bearer eyJhbGciO...'"
      }
    }
  },
  "externalDocs": {
    "url": "https://docs.lowcoder.cloud/lowcoder-documentation/lowcoder-extension/lowcoder-open-rest-api",
    "description": "Lowcoder Documentation"
  },
  "tags": [
    {
      "name": "Application APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Application History APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Application Permissions APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Bundle APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Bundle Permissions APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Folder APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Folder Permissions APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Data Source APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Data Source Permissions APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Query Execution APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Library Queries Record APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Organization APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Query Library APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Organization Member APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "User invitation APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "User APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "User Profile Photo APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Group APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Group Members APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Authentication APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Image Assets APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Javascript Library APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Status checks APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "Server Setting APIs",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    },
    {
      "name": "default",
      "description": "",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    }
  ]
}