{
    "openapi": "3.0.1",
    "info": {
      "title": "UiPath.WebApi 17.0",
      "description": "Orchestrator API",
      "version": "17.0"
    },
    "servers": [
      {
        "url": "https://cloud.uipath.com/{organizationName}/{tenantName}/orchestrator_/odata"
      }
    ],
    "paths": {
      "/api/Account/Authenticate": {
        "post": {
          "tags": [
            "Account"
          ],
          "summary": "Authenticates the user based on user name and password",
          "description": "Authenticates the user based on user name and password.",
          "operationId": "Account_Authenticate",
          "requestBody": {
            "description": "The login parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginModel"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Successful authentication",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AjaxResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/DirectoryService/GetDirectoryPermissions": {
        "get": {
          "tags": [
            "DirectoryService"
          ],
          "summary": "Gets directory permissions",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Users.View.",
          "operationId": "DirectoryService_GetDirectoryPermissions",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "domain",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DirectoryPermissionDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/DirectoryService/GetDomains": {
        "get": {
          "tags": [
            "DirectoryService"
          ],
          "summary": "Gets domains",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: (Users.View or Units.Edit or SubFolders.Edit).",
          "operationId": "DirectoryService_GetDomains",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DomainDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/DirectoryService/SearchForUsersAndGroups": {
        "get": {
          "tags": [
            "DirectoryService"
          ],
          "summary": "Search users and groups",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: (Users.View or Units.Edit or SubFolders.Edit).",
          "operationId": "DirectoryService_SearchForUsersAndGroups",
          "parameters": [
            {
              "name": "searchContext",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": [
                  "All",
                  "Users",
                  "Groups",
                  "Robots",
                  "ExternalApplications"
                ],
                "x-ms-enum": {
                  "name": "SearchContext",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "SearchContext",
                "modelAsString": false
              }
            },
            {
              "name": "domain",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "prefix",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DirectoryObjectDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/FoldersNavigation/GetAllFoldersForCurrentUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns the folders the current user has access to.\r\nThe response will be a list of folders; the hierarchy can be reconstructed\r\nusing the ParentId properties. From the root to the folders the user has\r\nactually been assigned to, the folders will be marked as non-selectable\r\nand only the paths to the assigned-to folders will be included.\r\nFrom the assigned-to folders down to the leaves, the nodes will be marked as\r\nselectable and their children lists fully populated.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequires authentication.",
          "operationId": "FoldersNavigation_GetAllFoldersForCurrentUser",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ExtendedFolderDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/FoldersNavigation/GetAllRolesForUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns a page of the user-folder assignments for the input user, including the roles for each folder.\r\nThe response also includes the folders assigned to the directory groups of the user.\r\nThe distinction between the folders assigned directly to the user and the ones assigned to one of his groups\r\ncan be made via the User field of the response.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequired permissions: (Units.View - Gets roles from all folders) and (SubFolders.View - Gets roles only from folders where caller has SubFolders.View permission).",
          "operationId": "FoldersNavigation_GetAllRolesForUser",
          "parameters": [
            {
              "name": "username",
              "in": "query",
              "description": "User name",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "type",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": [
                  "User",
                  "Group",
                  "Machine",
                  "Robot",
                  "ExternalApplication"
                ],
                "x-ms-enum": {
                  "name": "DirectoryObjectType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "DirectoryObjectType",
                "modelAsString": false
              }
            },
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "take",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserRoleAssignmentsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/FoldersNavigation/GetFolderNavigationContextForCurrentUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns a subset (paginated) of direct children for a given folder, which are accessible to the current user.\r\nTo ease a folder tree structure navigation design, the list of ancestors for the given folder is also returned.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequires authentication.",
          "operationId": "FoldersNavigation_GetFolderNavigationContextForCurrentUser",
          "parameters": [
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "take",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "folderId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FolderNavigationContextDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/FoldersNavigation/GetFoldersForCurrentUser": {
        "get": {
          "tags": [
            "FoldersNavigation"
          ],
          "summary": "Returns a filtered subset (paginated) of the folders the current user has access to.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequires authentication.",
          "operationId": "FoldersNavigation_GetFoldersForCurrentUser",
          "parameters": [
            {
              "name": "skip",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "take",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "searchText",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "folderTypes",
              "in": "query",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "Standard",
                    "Personal",
                    "Virtual",
                    "Solution"
                  ],
                  "x-ms-enum": {
                    "name": "FolderType",
                    "modelAsString": false
                  }
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PageResultDtoOfFolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Licensing/Acquire": {
        "post": {
          "tags": [
            "Licensing"
          ],
          "summary": "Acquire license units",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequires authentication.",
          "operationId": "Licensing_Acquire",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumptionLicenseDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicenseResultDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            },
            "503": {
              "description": "Server Error",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/Licensing/Release": {
        "put": {
          "tags": [
            "Licensing"
          ],
          "summary": "Release acquired license units",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequires authentication.",
          "operationId": "Licensing_Release",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumptionLicenseDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicenseResultDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            },
            "503": {
              "description": "Server Error",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/Logs": {
        "post": {
          "tags": [
            "Logs"
          ],
          "summary": "Inserts a log entry with a specified message in JSON format.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: (Logs.Create).\r\n\r\nExample of jMessage parameter.\r\n            \r\n     {\r\n         \"message\": \"TTT execution started\",\r\n         \"level\": \"Information\",\r\n         \"timeStamp\": \"2017-01-18T14:46:07.4152893+02:00\",\r\n         \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\r\n         \"agentSessionId\": \"00000000-0000-0000-0000-000000000000\",\r\n         \"processName\": \"TTT\",\r\n         \"fileName\": \"Main\",\r\n         \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\r\n     }\r\nDEPRECATED: \r\nUse SubmitLogs instead",
          "operationId": "Logs_Post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Successfully inserts a log message. Although it's a post, there's no need for an object to be returned",
              "content": {}
            },
            "400": {
              "description": "jMessage is null or an Exception is thrown during insert",
              "content": {}
            },
            "408": {
              "description": "Too many pending logging requests or timeout",
              "content": {}
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/Logs/SubmitLogs": {
        "post": {
          "tags": [
            "Logs"
          ],
          "summary": "Inserts a collection of log entries, each in a specific JSON format.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: (Logs.Create).\r\n\r\nExample of log entry:\r\n     {\r\n         \"message\": \"TTT execution started\",\r\n         \"level\": \"Information\",\r\n         \"timeStamp\": \"2017-01-18T14:46:07.4152893+02:00\",\r\n         \"windowsIdentity\": \"DESKTOP-1L50L0P\\\\WindowsUser\",\r\n         \"agentSessionId\": \"00000000-0000-0000-0000-000000000000\",\r\n         \"processName\": \"TTT\",\r\n         \"fileName\": \"Main\",\r\n         \"jobId\": \"8066c309-cef8-4b47-9163-b273fc14cc43\"\r\n     }",
          "operationId": "Logs_SubmitLogs",
          "requestBody": {
            "description": "Collection of string representations of JSON objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Collection of string representations of JSON objects",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Successfully inserts the log entries",
              "content": {}
            },
            "400": {
              "description": "logs is null or an Exception is thrown during insert",
              "content": {}
            },
            "408": {
              "description": "Too many pending logging requests or timeout",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/Maintenance/End": {
        "post": {
          "tags": [
            "Maintenance"
          ],
          "summary": "Ends a maintenance window",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Maintenance_End",
          "parameters": [
            {
              "name": "tenantId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Maintenance/Get": {
        "get": {
          "tags": [
            "Maintenance"
          ],
          "summary": "Gets the host admin logs.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nHost only. Required permissions: Audit.View.",
          "operationId": "Maintenance_Get",
          "parameters": [
            {
              "name": "tenantId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MaintenanceSetting"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Maintenance/Start": {
        "post": {
          "tags": [
            "Maintenance"
          ],
          "summary": "Starts a maintenance window",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Maintenance_Start",
          "parameters": [
            {
              "name": "phase",
              "in": "query",
              "description": "Phase - UiPath.Orchestrator.DataContracts.MaintenanceState.Draining or UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended",
              "schema": {
                "type": "string",
                "enum": [
                  "None",
                  "Draining",
                  "Suspended"
                ],
                "x-ms-enum": {
                  "name": "MaintenanceState",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "MaintenanceState",
                "modelAsString": false
              }
            },
            {
              "name": "force",
              "in": "query",
              "description": "Whether to ignore errors during transition",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "killJobs",
              "in": "query",
              "description": "Whether to force-kill running jobs when transitioning to UiPath.Orchestrator.DataContracts.MaintenanceState.Suspended",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "tenantId",
              "in": "query",
              "description": "If tenant id is set, maintenance will start only for this tenant",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/PackageFeeds/GetFolderFeed": {
        "get": {
          "tags": [
            "PackageFeeds"
          ],
          "summary": "Returns the feed id for a user assigned folder having specific feed",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequires authentication.",
          "operationId": "PackageFeeds_GetFolderFeed",
          "parameters": [
            {
              "name": "folderId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Stats/GetConsumptionLicenseStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the consumption licensing usage statistics",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: License.View.",
          "operationId": "Stats_GetConsumptionLicenseStats",
          "parameters": [
            {
              "name": "tenantId",
              "in": "query",
              "description": "The Tenant's Id - can be used when authenticated as Host",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "days",
              "in": "query",
              "description": "Number of reported license usage days",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ConsumptionLicenseStatsModel"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Stats/GetCountStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the total number of various entities registered in Orchestrator",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequires authentication.\r\n\r\nReturns the name and the total number of entities registered in Orchestrator for a set of entities.\r\nAll the counted entity types can be seen in the result below.\r\n     [\r\n           {\r\n             \"title\": \"Processes\",\r\n             \"count\": 1\r\n           },\r\n           {\r\n             \"title\": \"Assets\",\r\n             \"count\": 0\r\n           },\r\n           {\r\n             \"title\": \"Queues\",\r\n             \"count\": 0\r\n           },\r\n           {\r\n             \"title\": \"Schedules\",\r\n             \"count\": 0\r\n           }\r\n     ]",
          "operationId": "Stats_GetCountStats",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CountStats"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Stats/GetJobsStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the total number of jobs aggregated by Job State",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Jobs.View.\r\n\r\nReturns the total number of Successful, Faulted and Canceled jobs respectively.\r\nExample of returned result:\r\n    [\r\n          {\r\n            \"title\": \"Successful\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Faulted\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Canceled\",\r\n            \"count\": 0\r\n          }\r\n    ]",
          "operationId": "Stats_GetJobsStats",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CountStats"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Stats/GetLicenseStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the licensing usage statistics",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: License.View.",
          "operationId": "Stats_GetLicenseStats",
          "parameters": [
            {
              "name": "tenantId",
              "in": "query",
              "description": "The Tenant's Id - can be used when authenticated as Host",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "days",
              "in": "query",
              "description": "Number of reported license usage days",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LicenseStatsModel"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Stats/GetSessionsStats": {
        "get": {
          "tags": [
            "Stats"
          ],
          "summary": "Gets the total number of robots aggregated by Robot State",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Robots.View.\r\n\r\nReturns the total number of Available, Busy, Disconnected and Unresponsive robots respectively.\r\nExample of returned result:\r\n    [\r\n          {\r\n            \"title\": \"Available\",\r\n            \"count\": 1\r\n          },\r\n          {\r\n            \"title\": \"Busy\",\r\n            \"count\": 0\r\n          },\r\n          {\r\n            \"title\": \"Disconnected\",\r\n            \"count\": 1\r\n          },\r\n          {\r\n            \"title\": \"Unresponsive\",\r\n            \"count\": 0\r\n          }\r\n    ]",
          "operationId": "Stats_GetSessionsStats",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CountStats"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/Status/Get": {
        "get": {
          "tags": [
            "Status"
          ],
          "summary": "Returns whether the current endpoint should be serving traffic",
          "operationId": "Status_Get",
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          }
        }
      },
      "/api/Status/VerifyHostAvailibility": {
        "get": {
          "tags": [
            "Status"
          ],
          "description": "Required permissions: Webhooks.Create or Webhooks.Edit.",
          "operationId": "Status_VerifyHostAvailibility",
          "parameters": [
            {
              "name": "url",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uri"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HostAvailabilityDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/CancelTestCaseExecution": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Cancels the specified test case execution.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Edit.\r\n\r\nResponses:\r\n202 Accepted\r\n403 If the caller doesn't have permissions to cancel a test set execution",
          "operationId": "TestAutomation_CancelTestCaseExecution",
          "parameters": [
            {
              "name": "testCaseExecutionId",
              "in": "query",
              "description": "Id for the test case execution to be canceled",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "The test case execution was scheduled for cancellation or is not in a cancelable state",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/CancelTestSetExecution": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Cancels the specified test set execution.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Edit.\r\n\r\nResponses:\r\n202 Accepted\r\n403 If the caller doesn't have permissions to cancel a test set execution",
          "operationId": "TestAutomation_CancelTestSetExecution",
          "parameters": [
            {
              "name": "testSetExecutionId",
              "in": "query",
              "description": "Id for the test set execution to be canceled",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "The test set execution was scheduled for cancellation or is not in a cancelable state",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/CreateTestSetForReleaseVersion": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "This will create a test set with source type API.This endpoint it is supposed to be used by API integration.",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Write.\r\n\r\nRequired permissions: TestSets.Create.\r\n\r\nResponses:\r\n201 Created returns test set Id\r\n403 If the caller doesn't have permissions to create a test set",
          "operationId": "TestAutomation_CreateTestSetForReleaseVersion",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildTestSetRequestMessage"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Successful created test set.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestAutomation/GetAssertionScreenshot": {
        "get": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Get the screenshot for the specified test case assertion.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 OK\r\n404 If the test case assertion is not found or the screenshot storage location is not found",
          "operationId": "TestAutomation_GetAssertionScreenshot",
          "parameters": [
            {
              "name": "testCaseAssertionId",
              "in": "query",
              "description": "Id of the test case assertion",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/GetPackageInfoByTestCaseUniqueId": {
        "get": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Get the package identifier and the latest version for the specified test case.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequires authentication.\r\n\r\nResponses:\r\n200 OK\r\n403 If the caller doesn't have permissions to retrieve packages\r\n404 If there is no test case with the specified UniqueId",
          "operationId": "TestAutomation_GetPackageInfoByTestCaseUniqueId",
          "parameters": [
            {
              "name": "testCaseUniqueId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "packageIdentifier",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Package info for the specified test case",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestPackageInfoDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/GetReleasesForPackageVersion": {
        "get": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "This will list all the processes filtered by package identifier and version cross-folder when no current folder is sent by header.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Processes.View.\r\n\r\nResponses:\r\n200 OK\r\n404 If there is no release for the specified package identifier",
          "operationId": "TestAutomation_GetReleasesForPackageVersion",
          "parameters": [
            {
              "name": "packageIdentifier",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "version",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; at least one permission in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of process versions",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TestReleaseVersionDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/GetTestCaseExecutionAttachment": {
        "get": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Get the attachment for the specified test case execution attachment.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 OK\r\n404 If the test case execution attachment is not found or the storage location is not found",
          "operationId": "TestAutomation_GetTestCaseExecutionAttachment",
          "parameters": [
            {
              "name": "testCaseExecutionAttachmentId",
              "in": "query",
              "description": "Id of the test case execution attachment",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/GetTestCaseExecutionAttachments": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "This will list all test case execution attachments filtered by identifier and tags",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 OK\r\n404 If there is no test case execution for the specified identifier",
          "operationId": "TestAutomation_GetTestCaseExecutionAttachments",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestCaseExecutionAttachmentFilterDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "List of attachments",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TestCaseExecutionAttachmentDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestAutomation/GetTestSetExecutionAttachment": {
        "get": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Get the attachment for the specified test set execution attachment.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 OK\r\n404 If the test set execution attachment is not found or the storage location is not found",
          "operationId": "TestAutomation_GetTestSetExecutionAttachment",
          "parameters": [
            {
              "name": "testSetExecutionAttachmentId",
              "in": "query",
              "description": "Id of the test set execution attachment",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/GetTestSetExecutionAttachments": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "This will list all test set execution attachments filtered by identifier and tags",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 OK\r\n404 If there is no test set execution for the specified identifier",
          "operationId": "TestAutomation_GetTestSetExecutionAttachments",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetExecutionAttachmentFilterDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "List of attachments",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TestSetExecutionAttachmentDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestAutomation/ReexecuteTestCases": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Re-execute the specified test case executions within the same test set execution.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Create.\r\n\r\nResponses:\r\n200 OK\r\n403 If the caller doesn't have permissions to execute test sets\r\n404 If one or more test cases were not found",
          "operationId": "TestAutomation_ReexecuteTestCases",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "A list of test case executions with corresponding input arguments and optional RobotId and MachineSessionId fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReexecuteTestCasesOptionsDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Successful re-execution of the test case executions",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/TestCaseExecutionDto"
                    }
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestAutomation/StartTestSetExecution": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Start a test set execution.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Create.\r\n\r\nResponses:\r\n200 OK returns test set execution Id\r\n403 If the caller doesn't have permissions to execute a test set\r\n404 If the test set was not found",
          "operationId": "TestAutomation_StartTestSetExecution",
          "parameters": [
            {
              "name": "testSetId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "testSetKey",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "triggerType",
              "in": "query",
              "description": "Specifies how was the execution triggered",
              "schema": {
                "type": "string",
                "default": "Manual",
                "enum": [
                  "Manual",
                  "Scheduled",
                  "ExternalTool"
                ],
                "x-ms-enum": {
                  "name": "ExecutionTriggerType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "ExecutionTriggerType",
                "modelAsString": false
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful start of test set execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestAutomation/StartTestSetExecutionWithOptions": {
        "post": {
          "tags": [
            "TestAutomation"
          ],
          "summary": "Start a test set execution with additional options.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Write.\r\n\r\nRequired permissions: TestSetExecutions.Create.\r\n\r\nResponses:\r\n200 OK returns test set execution Id\r\n403 If the caller doesn't have permissions to execute a test set\r\n404 If the test set was not found",
          "operationId": "TestAutomation_StartTestSetExecutionWithOptions",
          "parameters": [
            {
              "name": "testSetId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "testSetKey",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Provides options to set the BatchExecutionKey and TriggerType and override the input parameters for specific test cases",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetExecutionOptionsDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Successful start of test set execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestDataQueueActions/AddItem": {
        "post": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Add a new test data queue item",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.Create.\r\n\r\nResponses:\r\n201 Returns the added test data queue item\r\n403 If the caller doesn't have permissions to create test data queue items\r\n409 If the test data queue item content violates the content JSON schema set on the queue",
          "operationId": "TestDataQueueActions_AddItem",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "QueueName: the test data queue name; Content: the item content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueAddItemDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Returns the added test data queue item",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestDataQueueItemDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestDataQueueActions/BulkAddItems": {
        "post": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Bulk adds an array of data queue items",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.Create.\r\n\r\nResponses:\r\n200 Returns the number of items added\r\n403 If the caller doesn't have permissions to create test data queue items\r\n409 If the test data queue items violates the content JSON schema set on the queue",
          "operationId": "TestDataQueueActions_BulkAddItems",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "QueueName: the test data queue name; Items: an array of item content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueBulkAddItemsDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Returns the number of items added",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestDataQueueActions/DeleteAllItems": {
        "delete": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Delete all items from a test data queue",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.Delete.\r\n\r\nResponses:\r\n202 All items from the test data queue were scheduled for deletion\r\n403 If the caller doesn't have permissions to delete test data queue items",
          "operationId": "TestDataQueueActions_DeleteAllItems",
          "parameters": [
            {
              "name": "queueName",
              "in": "query",
              "description": "The name of the test data queue",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "All items from the test data queue were scheduled for deletion",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/api/TestDataQueueActions/DeleteItems": {
        "delete": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Delete specific test data queue items",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.Delete.\r\n\r\nResponses:\r\n204 Deleted the test data queue items\r\n403 If the caller doesn't have permissions to delete test data queue items",
          "operationId": "TestDataQueueActions_DeleteItems",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The Ids of the test data queue items",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "The Ids of the test data queue items",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "Deleted the test data queue items",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestDataQueueActions/GetNextItem": {
        "post": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Get the next unconsumed test data queue item",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.View.\r\n\r\nResponses:\r\n200 Returns the next unconsumed test data queue item\r\n204 If there are no unconsumed test data queue items in the queue\r\n403 If the caller doesn't have permissions to view test data queue items\r\n404 If the test data queue does not exist",
          "operationId": "TestDataQueueActions_GetNextItem",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "QueueName:the test data queue name; SetConsumed: Whether to set the item's IsConsumed flag as true or false",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueGetNextItemDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Returns the next unconsumed test data queue item",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestDataQueueItemDto"
                  }
                }
              }
            },
            "204": {
              "description": "If there are no unconsumed test data queue items in the queue",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestDataQueueActions/SetAllItemsConsumed": {
        "post": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Set the IsConsumed flag for all items from a test data queue",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.Edit.\r\n\r\nResponses:\r\n202 All items from the test data queue were scheduled for setting the IsConsumed flag\r\n403 If the caller doesn't have permissions to edit test data queue items",
          "operationId": "TestDataQueueActions_SetAllItemsConsumed",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "QueueName: the name of the test data queue; IsConsumed: the value to be set on the items IsConsumed flag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueSetAllItemsConsumedDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "202": {
              "description": "All items from the test data queue were scheduled for setting the IsConsumed flag",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/TestDataQueueActions/SetItemsConsumed": {
        "post": {
          "tags": [
            "TestDataQueueActions"
          ],
          "summary": "Set the IsConsumed flag for specific test data queue items",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueueItems.Edit.\r\n\r\nResponses:\r\n200 If the operation succeeded\r\n403 If the caller doesn't have permissions to edit test data queue items",
          "operationId": "TestDataQueueActions_SetItemsConsumed",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "ItemIds: the list of item ids for which to set the IsConsumed flag; IsConsumed: the value to be set on the items IsConsumed flag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueSetItemsConsumedDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "If the operation succeeded",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/api/Translations/GetTranslations": {
        "get": {
          "tags": [
            "Translations"
          ],
          "summary": "Returns a json with translation resources",
          "operationId": "Translations_GetTranslations",
          "parameters": [
            {
              "name": "lang",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/forms/TaskForms/BulkCompleteTasks": {
        "post": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Bulk Complete the task by merging form data and action taken",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "TaskForms_BulkCompleteTasks",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "BulkTasksCompletionRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTasksCompletionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BulkOperationErrorResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/forms/TaskForms/BulkUpdateTasks": {
        "put": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Bulk Update Task data by merging data.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "TaskForms_BulkUpdateTasks",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "BulkTasksDataUpdateRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkTasksDataUpdateRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/BulkOperationErrorResponse"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/forms/TaskForms/CompleteTask": {
        "post": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Complete the task by saving form data and action taken",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "TaskForms_CompleteTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskCompletionRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCompletionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/forms/TaskForms/CreateFormTask": {
        "post": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Creates a new Form Task.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Create.",
          "operationId": "TaskForms_CreateFormTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The form task to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FormTaskCreateRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDataDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/forms/TaskForms/GetTaskDataById": {
        "get": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Returns task data dto",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
          "operationId": "TaskForms_GetTaskDataById",
          "parameters": [
            {
              "name": "taskId",
              "in": "query",
              "description": "Task id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDataDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/forms/TaskForms/GetTaskFormById": {
        "get": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Returns form dto to render task form",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
          "operationId": "TaskForms_GetTaskFormById",
          "parameters": [
            {
              "name": "taskId",
              "in": "query",
              "description": "Task id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "expandOnFormLayout",
              "in": "query",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskFormDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/forms/TaskForms/SaveAndReassignTask": {
        "post": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Save changes done by the current user and Reassign Task to another user",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "TaskForms_SaveAndReassignTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskSaveAndReassignmentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSaveAndReassignmentRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/forms/TaskForms/SaveTaskData": {
        "put": {
          "tags": [
            "TaskForms"
          ],
          "summary": "Save task data",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "TaskForms_SaveTaskData",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskDataSaveRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDataSaveRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Alerts": {
        "get": {
          "tags": [
            "Alerts"
          ],
          "summary": "Gets alerts.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Alerts.View.",
          "operationId": "Alerts_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfAlertDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Alerts/UiPath.Server.Configuration.OData.ExpandCurrentUserGroupAlerts": {
        "post": {
          "tags": [
            "Alerts"
          ],
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: Alerts.View.",
          "operationId": "Alerts_ExpandCurrentUserGroupAlerts",
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Alerts/UiPath.Server.Configuration.OData.GetUnreadCount": {
        "get": {
          "tags": [
            "Alerts"
          ],
          "summary": "Returns the total number of alerts, per tenant, that haven't been read by the current user.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Alerts.View.",
          "operationId": "Alerts_GetUnreadCount",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Alerts/UiPath.Server.Configuration.OData.MarkAsRead": {
        "post": {
          "tags": [
            "Alerts"
          ],
          "summary": "Marks alerts as read and returns the remaining number of unread notifications.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: Alerts.View.",
          "operationId": "Alerts_MarkAsRead",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Collection containing the unique identifiers of the notifications that will be marked as read",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertsMarkAsReadRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Alerts/UiPath.Server.Configuration.OData.RaiseProcessAlert": {
        "post": {
          "tags": [
            "Alerts"
          ],
          "summary": "Creates a Process Alert",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: Alerts.Create.",
          "operationId": "Alerts_RaiseProcessAlert",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RaiseProcessAlertRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Assets": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Get Assets",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequired permissions: Assets.View.\r\nDEPRECATED: \r\nReplaced by GetFiltered.",
          "operationId": "Assets_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfAssetDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Assets"
          ],
          "summary": "Creates an asset",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Write.\r\n\r\nRequired permissions: Assets.Create.",
          "operationId": "Assets_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Successfully created the asset",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AssetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Assets({key})": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Gets a single asset based on its id",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequired permissions: Assets.View.",
          "operationId": "Assets_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AssetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Assets"
          ],
          "summary": "Edit an asset",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Write.\r\n\r\nRequired permissions: Assets.Edit.",
          "operationId": "Assets_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Successfully updated",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Assets"
          ],
          "summary": "Delete an asset",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Write.\r\n\r\nRequired permissions: Assets.Delete.",
          "operationId": "Assets_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted the asset",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.GetAssetsAcrossFolders": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Get the assets from all the folders in which the current user has the Assets.View permission, except the one specified.",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequires authentication.",
          "operationId": "Assets_GetAssetsAcrossFolders",
          "parameters": [
            {
              "name": "excludeFolderId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfAssetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.GetFiltered": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Get Filtered Assets",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequired permissions: Assets.View.",
          "operationId": "Assets_GetFiltered",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfAssetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.GetFoldersForAsset(id={id})": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Get all accesible folders where the asset is shared, and the total count of folders where it is shared (including unaccessible folders).",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequires authentication.",
          "operationId": "Assets_GetFoldersForAssetById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessibleFoldersDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAsset(robotId='{robotId}',assetName='{assetName}')": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Returns the named asset associated to the given robot key.",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequired permissions: Assets.View.\r\nDEPRECATED: \r\nUse the GetRobotAssetByNameForRobotKey endpoint. Kept for backwards compatibility.",
          "operationId": "Assets_GetRobotAssetByRobotidAndAssetname",
          "parameters": [
            {
              "name": "robotId",
              "in": "path",
              "description": "The key of the robot for which the asset is being fetched.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "assetName",
              "in": "path",
              "description": "The name of the asset being fetched.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RobotAssetDto"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            },
            "404": {
              "description": "Asset or Robot do not exist or the Asset is not available for the specified robot.",
              "content": {}
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByNameForRobotKey": {
        "post": {
          "tags": [
            "Assets"
          ],
          "summary": "Returns the named asset associated to the given robot key.",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Write.\r\n\r\nRequired permissions: Assets.View.",
          "operationId": "Assets_GetRobotAssetByNameForRobotKey",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsGetRobotByNameAndKeyRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RobotAssetDto"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            },
            "404": {
              "description": "Asset or Robot do not exist or the Asset is not available for the specified robot.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.GetRobotAssetByRobotId(robotId={robotId},assetName='{assetName}')": {
        "get": {
          "tags": [
            "Assets"
          ],
          "summary": "Returns the named asset associated to the given robot Id.",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Read.\r\n\r\nRequired permissions: Assets.View.",
          "operationId": "Assets_GetRobotAssetByRobotId",
          "parameters": [
            {
              "name": "robotId",
              "in": "path",
              "description": "The Id of the robot for which the asset is being fetched.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "assetName",
              "in": "path",
              "description": "The name of the asset being fetched.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RobotAssetDto"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            },
            "404": {
              "description": "Asset or Robot do not exist or the Asset is not available for the specified robot.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.SetRobotAssetByRobotKey": {
        "post": {
          "tags": [
            "Assets"
          ],
          "summary": "Set the asset value associated to the given robot key.",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Write.\r\n\r\nRequired permissions: Assets.Edit.",
          "operationId": "Assets_SetRobotAssetByRobotKey",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetsSetRobotAssetsByKeyRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "Successfully updated the asset",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            },
            "404": {
              "description": "Asset or Robot do not exist or the Asset is not available for the specified robot.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Assets/UiPath.Server.Configuration.OData.ShareToFolders": {
        "post": {
          "tags": [
            "Assets"
          ],
          "summary": "Adds the assets to the folders specified in 'ToAddFolderIds'. Removes the assets from the folders specified in 'ToRemoveFolderIds'.",
          "description": "OAuth required scopes: OR.Assets or OR.Assets.Write.\r\n\r\nRequires authentication.",
          "operationId": "Assets_ShareToFolders",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Object containing the ids of the assets, the ids of the folders where they should be shared and the ids of the folders from which they should be removed.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetFoldersShareDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "404": {
              "description": "Asset or one of the folders specified does not exist.",
              "content": {}
            },
            "409": {
              "description": "Attempt to share between classic or modern or ambigous folders list.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/AuditLogs": {
        "get": {
          "tags": [
            "AuditLogs"
          ],
          "summary": "Gets Audit logs.",
          "description": "OAuth required scopes: OR.Audit or OR.Audit.Read.\r\n\r\nRequired permissions: Audit.View.",
          "operationId": "AuditLogs_Get",
          "parameters": [
            {
              "name": "x-UIPATH-AuditedService",
              "in": "header",
              "schema": {
                "type": "string",
                "default": "Orchestrator",
                "enum": [
                  "Orchestrator",
                  "TestAutomation"
                ],
                "x-ms-enum": {
                  "name": "AuditedService",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "AuditedService",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfAuditLogDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/AuditLogs/UiPath.Server.Configuration.OData.Export": {
        "post": {
          "tags": [
            "AuditLogs"
          ],
          "summary": "Requests a CSV export of filtered items.",
          "description": "OAuth required scopes: OR.Audit or OR.Audit.Write.\r\n\r\nRequired permissions: Audit.View.",
          "operationId": "AuditLogs_Export",
          "parameters": [
            {
              "name": "auditedService",
              "in": "query",
              "schema": {
                "type": "string",
                "default": "Orchestrator",
                "enum": [
                  "Orchestrator",
                  "TestAutomation"
                ],
                "x-ms-enum": {
                  "name": "AuditedService",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "AuditedService",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExportModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/AuditLogs/UiPath.Server.Configuration.OData.GetAuditLogDetails(auditLogId={auditLogId})": {
        "get": {
          "tags": [
            "AuditLogs"
          ],
          "summary": "Returns audit log details by audit log id",
          "description": "OAuth required scopes: OR.Audit or OR.Audit.Read.\r\n\r\nRequired permissions: Audit.View.",
          "operationId": "AuditLogs_GetAuditLogDetailsByAuditlogid",
          "parameters": [
            {
              "name": "auditLogId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "x-UIPATH-AuditedService",
              "in": "header",
              "schema": {
                "type": "string",
                "default": "Orchestrator",
                "enum": [
                  "Orchestrator",
                  "TestAutomation"
                ],
                "x-ms-enum": {
                  "name": "AuditedService",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "AuditedService",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfAuditLogEntityDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/AuditLogs/UiPath.Server.Configuration.OData.Reports": {
        "get": {
          "tags": [
            "AuditLogs"
          ],
          "summary": "Returns a CSV containing the filtered audit.",
          "description": "OAuth required scopes: OR.Audit or OR.Audit.Read.\r\n\r\nRequired permissions: Audit.View.\r\nDEPRECATED: \r\nPlease user other means to retrieve such reports: https://docs.uipath.com/orchestrator/automation-cloud/latest/release-notes/release-notes-june-2023#deprecation-of-reports-endpoints. This endpoint will be removed in future releases.",
          "operationId": "AuditLogs_Reports",
          "parameters": [
            {
              "name": "x-UIPATH-AuditedService",
              "in": "header",
              "schema": {
                "type": "string",
                "default": "Orchestrator",
                "enum": [
                  "Orchestrator",
                  "TestAutomation"
                ],
                "x-ms-enum": {
                  "name": "AuditedService",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "AuditedService",
                "modelAsString": false
              }
            },
            {
              "name": "x-UIPATH-AuditedService",
              "in": "query",
              "schema": {
                "type": "string",
                "default": "Orchestrator",
                "enum": [
                  "Orchestrator",
                  "TestAutomation"
                ],
                "x-ms-enum": {
                  "name": "AuditedService",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "AuditedService",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets Buckets.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View.",
          "operationId": "Buckets_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBucketDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Buckets"
          ],
          "summary": "Creates an Bucket",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequired permissions: Buckets.Create.",
          "operationId": "Buckets_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Successfully created the bucket",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BucketDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Buckets({key})": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets a single Bucket.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View.",
          "operationId": "Buckets_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BucketDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Buckets"
          ],
          "summary": "Updates a bucket.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequired permissions: Buckets.Edit.",
          "operationId": "Buckets_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BucketDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Buckets"
          ],
          "summary": "Delete a bucket",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequired permissions: Buckets.Delete.",
          "operationId": "Buckets_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted the bucket",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets({key})/UiPath.Server.Configuration.OData.DeleteFile": {
        "delete": {
          "tags": [
            "Buckets"
          ],
          "summary": "Deletes a file.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.Delete.",
          "operationId": "Buckets_DeleteFileByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Bucket Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "The BlobFile full path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetDirectories": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets the child directories in a directory.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
          "operationId": "Buckets_GetDirectoriesByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Bucket Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "directory",
              "in": "query",
              "description": "The directory path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "fileNameGlob",
              "in": "query",
              "description": "Directory listing filter",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Number of directories to return",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Number of directories to skip",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBlobFileDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetFile": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets a file metadata.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
          "operationId": "Buckets_GetFileByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Bucket Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "The BlobFile full path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BlobFileDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetFiles": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets the files in a directory.\r\nOptionally returns all files in all child directories (recursive).",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
          "operationId": "Buckets_GetFilesByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Bucket Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "directory",
              "in": "query",
              "description": "The directory path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "recursive",
              "in": "query",
              "description": "Recurse subdirectories (flat view)",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "fileNameGlob",
              "in": "query",
              "description": "Files listing filter",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Number of files to return",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Number of files to skip",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBlobFileDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetReadUri": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets a direct download URL for BlobFile.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.View.",
          "operationId": "Buckets_GetReadUriByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Bucket Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "The BlobFile full path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "expiryInMinutes",
              "in": "query",
              "description": "URL expiration time",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BlobFileAccessDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets({key})/UiPath.Server.Configuration.OData.GetWriteUri": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Gets a direct upload URL for BlobFile.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequired permissions: Buckets.View and BlobFiles.Create.",
          "operationId": "Buckets_GetWriteUriByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Bucket Id",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "The BlobFile full path",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "expiryInMinutes",
              "in": "query",
              "description": "URL Expiration time",
              "schema": {
                "type": "integer",
                "format": "int32",
                "default": 0
              }
            },
            {
              "name": "contentType",
              "in": "query",
              "description": "ContentType for S3 access policy",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BlobFileAccessDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets/UiPath.Server.Configuration.OData.GetBucketsAcrossFolders": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Get the buckets from all the folders in which the current user has the Buckets.View permission, except the one specified.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequires authentication.",
          "operationId": "Buckets_GetBucketsAcrossFolders",
          "parameters": [
            {
              "name": "excludeFolderId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBucketDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets/UiPath.Server.Configuration.OData.GetFoldersForBucket(id={id})": {
        "get": {
          "tags": [
            "Buckets"
          ],
          "summary": "Get all accessible folders where the bucket is shared, and the total count of folders where it is shared (including unaccessible folders).",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nRequires authentication.",
          "operationId": "Buckets_GetFoldersForBucketById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessibleFoldersDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Buckets/UiPath.Server.Configuration.OData.ShareToFolders": {
        "post": {
          "tags": [
            "Buckets"
          ],
          "summary": "Adds the buckets to the folders specified in 'ToAddFolderIds'. Removes the buckets from the folders specified in 'ToRemoveFolderIds'.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nRequires authentication.",
          "operationId": "Buckets_ShareToFolders",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Object containing the ids of the buckets and the ids of the folders where they should be shared.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/BucketFoldersShareDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "404": {
              "description": "One of the specified entities does not exist.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Calendars": {
        "get": {
          "tags": [
            "Calendars"
          ],
          "summary": "Gets calendars for current tenant.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequires authentication.",
          "operationId": "Calendars_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5. The allowed properties are: Name, Id.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfExtendedCalendarDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Calendars"
          ],
          "summary": "Creates a new calendar.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: (Settings.Create).",
          "operationId": "Calendars_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedCalendarDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Calendars({key})": {
        "get": {
          "tags": [
            "Calendars"
          ],
          "summary": "Gets calendar based on its id.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequires authentication.",
          "operationId": "Calendars_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedCalendarDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Calendars"
          ],
          "summary": "Edits a calendar.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: (Settings.Edit).",
          "operationId": "Calendars_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendedCalendarDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExtendedCalendarDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Calendars"
          ],
          "summary": "Deletes a calendar.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: (Settings.Delete).",
          "operationId": "Calendars_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Calendars/UiPath.Server.Configuration.OData.CalendarExists": {
        "post": {
          "tags": [
            "Calendars"
          ],
          "summary": "Validate calendar name, and check if it already exists.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: (Settings.Edit).",
          "operationId": "Calendars_CalendarExists",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarExistsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfBoolean"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/CredentialStores": {
        "get": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Gets all Credential Stores.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View or Assets.Create or Assets.Edit or Assets.View or Robots.Create or Robots.Edit or Robots.View or Buckets.Create or Buckets.Edit.",
          "operationId": "CredentialStores_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfCredentialStoreDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Creates a new Credential Store.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Create.",
          "operationId": "CredentialStores_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CredentialStoreDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/CredentialStores({key})": {
        "get": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Gets a single Credential Store by its key.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "CredentialStores_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CredentialStoreDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Updates a Credential Store.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
          "operationId": "CredentialStores_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialStoreDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Deletes a Credential Store.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Delete.",
          "operationId": "CredentialStores_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "forceDelete",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/CredentialStores({key})/UiPath.Server.Configuration.OData.SetDefaultStoreForResourceType": {
        "post": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Sets a credential store as the default for the given credential type.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
          "operationId": "CredentialStores_SetDefaultStoreForResourceTypeById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Provides the ID of the credential store to set as default.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Provides the resourceType that indicates\r\n                   the resource type for which the stores becomes default.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialSetDefaultStoreForResourceTypeRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetAvailableCredentialStoreTypes": {
        "get": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Gets available Credential Store types.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "CredentialStores_GetAvailableCredentialStoreTypes",
          "parameters": [
            {
              "name": "proxyId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetDefaultStoreForResourceType(resourceType='{resourceType}')": {
        "get": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Get the default credential store for the given resource type.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View or Assets.Create or Assets.Edit or Assets.View or Robots.Create or Robots.Edit or Robots.View or Buckets.Create or Buckets.Edit.",
          "operationId": "CredentialStores_GetDefaultStoreForResourceTypeByResourcetype",
          "parameters": [
            {
              "name": "resourceType",
              "in": "path",
              "description": "Provides the resource type for which to retrieve the default.",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "AssetCredential",
                  "RobotCredential",
                  "BucketCredential",
                  "Secrets"
                ],
                "x-ms-enum": {
                  "name": "CredentialStoreResourceType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "CredentialStoreResourceType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetResourcesForCredentialsProxyResourceTypes(key={key},resourceType='{resourceType}')": {
        "get": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Gets available resources robots (and later assets) for a credential store.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "CredentialStores_GetResourcesForCredentialsProxyResourceTypes",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Provides the ID of the credential store for which to retrieve resources.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "resourceType",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "AssetCredential",
                  "RobotCredential",
                  "BucketCredential",
                  "Secrets",
                  "CredentialStore"
                ],
                "x-ms-enum": {
                  "name": "CredentialsProxyResourceType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "CredentialsProxyResourceType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfCredentialsProxyResourceDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/CredentialStores/UiPath.Server.Configuration.OData.GetResourcesForCredentialStoreTypes(key={key},resourceType='{resourceType}')": {
        "get": {
          "tags": [
            "CredentialStores"
          ],
          "summary": "Gets available resources robots (and later assets) for a credential store.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "CredentialStores_GetResourcesForCredentialStoreTypesByKeyAndResourcetype",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Provides the ID of the credential store for which to retrieve resources.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "resourceType",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "AssetCredential",
                  "RobotCredential",
                  "BucketCredential",
                  "Secrets"
                ],
                "x-ms-enum": {
                  "name": "CredentialStoreResourceType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "CredentialStoreResourceType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfCredentialStoreResourceDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Environments": {
        "get": {
          "tags": [
            "Environments"
          ],
          "summary": "Gets Environments.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Environments.View.",
          "operationId": "Environments_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfEnvironmentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Environments"
          ],
          "summary": "Post new environment",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Environments.Create.",
          "operationId": "Environments_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EnvironmentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Environments({key})": {
        "get": {
          "tags": [
            "Environments"
          ],
          "summary": "Gets a single environment.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Environments.View.",
          "operationId": "Environments_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EnvironmentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Environments"
          ],
          "summary": "Updates an environment.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
          "operationId": "Environments_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Environments"
          ],
          "summary": "Deletes an environment.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Environments.Delete.",
          "operationId": "Environments_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Environments({key})/UiPath.Server.Configuration.OData.AddRobot": {
        "post": {
          "tags": [
            "Environments"
          ],
          "summary": "Associates a robot with the given environment.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
          "operationId": "Environments_AddRobotById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The associated Environment Id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "RobotId - The associated robot Id.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Environments({key})/UiPath.Server.Configuration.OData.RemoveRobot": {
        "post": {
          "tags": [
            "Environments"
          ],
          "summary": "Dissociates a robot from the given environment.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
          "operationId": "Environments_RemoveRobotById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Given environment's Id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "RobotId - The dissociated robot Id.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentRobotRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Environments({key})/UiPath.Server.Configuration.OData.SetRobots": {
        "post": {
          "tags": [
            "Environments"
          ],
          "summary": "Associates a group of robots with and dissociates another group of robots from the given environment.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Environments.Edit.",
          "operationId": "Environments_SetRobotsById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The environment id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />addedRobotIds - The id of the robots to be associated with the environment.\r\n            <para />removedRobotIds - The id of the robots to be dissociated from the environment.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsSetRobotsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotIdsForEnvironment(key={key})": {
        "get": {
          "tags": [
            "Environments"
          ],
          "summary": "Returns a collection of all the ids of the robots associated to an environment based on environment Id.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Environments.View and Robots.View.",
          "operationId": "Environments_GetRobotIdsForEnvironmentByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the environment for which the robot ids are fetched.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Environments/UiPath.Server.Configuration.OData.GetRobotsForEnvironment(key={key})": {
        "get": {
          "tags": [
            "Environments"
          ],
          "summary": "Returns a collection of all robots and, if no other sorting is provided, will place first those belonging to the environment. Allows odata query options.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Environments.View and Robots.View.",
          "operationId": "Environments_GetRobotsForEnvironmentByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the environment for which the associated robots are placed first.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfRobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ExecutionMedia": {
        "get": {
          "tags": [
            "ExecutionMedia"
          ],
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: ExecutionMedia.View.",
          "operationId": "ExecutionMedia_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfExecutionMediaDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ExecutionMedia({key})": {
        "get": {
          "tags": [
            "ExecutionMedia"
          ],
          "summary": "Get by id",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: ExecutionMedia.View.",
          "operationId": "ExecutionMedia_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExecutionMediaDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ExecutionMedia/UiPath.Server.Configuration.OData.DeleteMediaByJobId": {
        "post": {
          "tags": [
            "ExecutionMedia"
          ],
          "summary": "Deletes the execution media for the given job key.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: ExecutionMedia.Delete.",
          "operationId": "ExecutionMedia_DeleteMediaByJobId",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecutionMediaDeleteMediaByJobIdRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/ExecutionMedia/UiPath.Server.Configuration.OData.DownloadMediaByJobId(jobId={jobId})": {
        "get": {
          "tags": [
            "ExecutionMedia"
          ],
          "summary": "Downloads execution media by job id",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: ExecutionMedia.View.",
          "operationId": "ExecutionMedia_DownloadMediaByJobId",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Exports({key})": {
        "get": {
          "tags": [
            "Exports"
          ],
          "description": "Requires authentication.",
          "operationId": "Exports_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExportModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Exports({key})/UiPath.Server.Configuration.OData.GetDownloadLink": {
        "get": {
          "tags": [
            "Exports"
          ],
          "description": "Requires authentication.",
          "operationId": "Exports_GetDownloadLinkById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BlobFileAccessDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Gets folders.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View - Gets all folders or only the folders where user has SubFolders.View permission).",
          "operationId": "Folders_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfFolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Creates a new folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Create or SubFolders.Create - Creates root or subfolder or only subfolder if user has SubFolders.Create permission on parent).",
          "operationId": "Folders_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders({folderId})/UiPath.Server.Configuration.OData.MoveFolder": {
        "put": {
          "tags": [
            "Folders"
          ],
          "summary": "Move a folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Delete or SubFolders.Delete - Move any folder or to folder only if user has SubFolders.Delete permission on it) and (Units.Create or SubFolders.Create - Move to any target folder or to folder if user has SubFolders.Create permission on target) and (Units.Edit or SubFolders.Edit - Move to any target folder or to folder if user has SubFolders.Edit permission on target).",
          "operationId": "Folders_MoveFolderByFolderid",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "description": "Id of the folder to be moved",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "targetParentId",
              "in": "query",
              "description": "Id of the target parent",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders({key})": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Gets a single folder, based on its Id.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View - Gets any folder or only the folder if user has SubFolders.View permission on it or the user is assigned to the folder.).",
          "operationId": "Folders_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Folders"
          ],
          "summary": "Edits a folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Edits any folder or edits only if user has SubFolders.Edit permission on the provided folder).",
          "operationId": "Folders_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Folders"
          ],
          "summary": "Deletes a folder. Succeeds only if no entities or user associations\r\nexist in this folder or any of its descendants.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Delete or SubFolders.Delete - Deletes any folder or only if user has SubFolders.Delete permission on the provided folder).",
          "operationId": "Folders_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders({key})/UiPath.Server.Configuration.OData.RemoveMachinesFromFolder": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Remove user assignment from a folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Removes machines from any folder or only if caller has SubFolders.Edit permission the folder provided).",
          "operationId": "Folders_RemoveMachinesFromFolderById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The Ids of the machines to remove from the folder",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveMachinesFromFolderRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders({key})/UiPath.Server.Configuration.OData.RemoveUserFromFolder": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Remove user assignment from a folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Remove user from any folder or only if caller has SubFolders.Edit permission on provided folder).",
          "operationId": "Folders_RemoveUserFromFolderById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "userId - The Id of the user to remove from the folder",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RemoveUserFromFolderRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.AssignDomainUser": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Assigns a directory user or group to a set of folders with an optional set of roles per folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Assigns domain user to any folder or only if user has SubFolders.Edit permission on all folders provided).",
          "operationId": "Folders_AssignDomainUser",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignDomainUserRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.AssignMachines": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Assigns one or more machines to a set of folders.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Assigns machines to any folder or only if user has SubFolders.Edit permission on all folders provided).",
          "operationId": "Folders_AssignMachines",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignMachinesRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.AssignUsers": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Assigns one or more users to a set of folders with an optional set of roles per folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Assigns users to any folder or if the user has SubFolders.Edit permission on all folders provided).",
          "operationId": "Folders_AssignUsers",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderAssignUsersRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.GetAllRolesForUser(username='{username}',skip={skip},take={take})": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Returns a page of the user-folder assignments for the input user, including the roles for each folder.\r\nThe response also includes the folders assigned to the directory groups of the user.\r\nThe distinction between the folders assigned directly to the user and the ones assigned to one of his groups\r\ncan be made via the User field of the response.\r\nLIMITATION: If URI parameters contain special characters (eg. \\, /), use instead api/FoldersNavigation/GetAllRolesForUser endpoint.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View - Gets roles from all folders or only from folders where user has SubFolders.View permission).",
          "operationId": "Folders_GetAllRolesForUserByUsernameAndSkipAndTake",
          "parameters": [
            {
              "name": "username",
              "in": "path",
              "description": "User name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "skip",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "take",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "type",
              "in": "query",
              "schema": {
                "type": "string",
                "default": "User",
                "enum": [
                  "User",
                  "Group",
                  "Machine",
                  "Robot",
                  "ExternalApplication"
                ],
                "x-ms-enum": {
                  "name": "DirectoryObjectType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "DirectoryObjectType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserRoleAssignmentsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.GetByKey(identifier={identifier})": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Gets a single folder, based on its Key.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View - Gets any folder or only the folder if user has SubFolders.View permission on it or the user is assigned to the folder.).",
          "operationId": "Folders_GetByKeyByIdentifier",
          "parameters": [
            {
              "name": "identifier",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.GetMachinesForFolder(key={key})": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Returns the machines assigned to a folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View - Gets machines for any folder or only if user has SubFolders.View permission on folder).",
          "operationId": "Folders_GetMachinesForFolderByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMachineFolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.GetMoveFolderMachinesChanges": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Gets the machine changes when moving a folder",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (SubFolders.Delete - Deletes folder only if user has SubFolders.Delete permission on it) and (Units.Create or SubFolders.Create - Creates root or subfolder or only subfolder if user has SubFolders.Create permission on parent) and (Units.Edit or SubFolders.Edit - Edits any folder or only if user has SubFolders.Edit permission on it).",
          "operationId": "Folders_GetMoveFolderMachinesChanges",
          "parameters": [
            {
              "name": "folderId",
              "in": "query",
              "description": "Id of the folder to be moved",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "targetParentId",
              "in": "query",
              "description": "Id of the target parent",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMoveFolderMachineChange"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.GetSubfoldersWithAssignedMachine": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Gets direct machine assignments for all subfolders of the specific folder",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View - Gets the subfolders in which the machines is directly assigned for any folder or for subfolders only).",
          "operationId": "Folders_GetSubfoldersWithAssignedMachine",
          "parameters": [
            {
              "name": "rootFolderId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "machineId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfFolderDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.GetUsersForFolder(key={key},includeInherited={includeInherited})": {
        "get": {
          "tags": [
            "Folders"
          ],
          "summary": "Returns the users who have access to a folder and optionally the fine-grained roles each one\r\nhas on that folder.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: (Units.View or SubFolders.View or Assets.Create or Assets.Edit - Gets users for any folder or if the user has SubFolders.View/Assets.Create/Assets.Edit permission on the provided folder).",
          "operationId": "Folders_GetUsersForFolderByKeyAndIncludeinherited",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "includeInherited",
              "in": "path",
              "description": "If true, the response will include users inherited from ancestors",
              "required": true,
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "includeAlertsEnabled",
              "in": "query",
              "description": "If true, the response will include alert preferences for each user",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfUserRolesDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.ToggleFolderMachineInherit": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Toggle machine propagation for a folder to all subfolders.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Propagate machine to subfolders only if Units.Edit permission is provided or only if SubFolders.Edit permission on all folders provided).",
          "operationId": "Folders_ToggleFolderMachineInherit",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderMachineInheritDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Folders/UiPath.Server.Configuration.OData.UpdateMachinesToFolderAssociations": {
        "post": {
          "tags": [
            "Folders"
          ],
          "summary": "Add and remove machine associations to a folder",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: (Units.Edit or SubFolders.Edit - Update machines to any folder associations or only if user has SubFolders.Edit permission on all folders provided).",
          "operationId": "Folders_UpdateMachinesToFolderAssociations",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateMachinesToFolderAssociationsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses": {
        "get": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Gets host licenses.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfHostLicenseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/HostLicenses({key})": {
        "get": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Gets a single host license based on its key.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HostLicenseDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Deletes a host license based on its key.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.ActivateLicenseOffline": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Uploads a new offline license activation.\r\nThe content of the license is sent as a file embedded in the HTTP request.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_ActivateLicenseOffline",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.ActivateLicenseOnline": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Activate the license for the host",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_ActivateLicenseOnline",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.DeactivateLicenseOnline": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Deactivate the license for the host",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_DeactivateLicenseOnline",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.DeleteTenantLicense": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Deletes a tenant license based on its key.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_DeleteTenantLicense",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/HostDeleteTenantLicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.GetDeactivateLicenseOffline": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Deactivate the license offline for the host",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_GetDeactivateLicenseOffline",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeactivateLicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfString"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.GetLicenseOffline": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Create the offline activation request for the host",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_GetLicenseOffline",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfString"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.GetTenantLicense(tenantId={tenantId})": {
        "get": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Gets a single tenant license based on its id.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_GetTenantLicenseByTenantid",
          "parameters": [
            {
              "name": "tenantId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicenseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.SetTenantLicense": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Sets the license for a specific tenant",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_SetTenantLicense",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/HostSetTenantLicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.UpdateLicenseOnline": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Update the license for the host",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_UpdateLicenseOnline",
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/HostLicenses/UiPath.Server.Configuration.OData.UploadLicense": {
        "post": {
          "tags": [
            "HostLicenses"
          ],
          "summary": "Uploads a new host license file that was previously generated with Regutil.\r\nThe content of the license is sent as a file embedded in the HTTP request.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "HostLicenses_UploadLicense",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HostLicenseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Jobs": {
        "get": {
          "tags": [
            "Jobs"
          ],
          "summary": "Gets Jobs.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: Jobs.View.",
          "operationId": "Jobs_Get",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; at least one permission in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfJobDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Jobs({key})": {
        "get": {
          "tags": [
            "Jobs"
          ],
          "summary": "Gets a single job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: (Jobs.View).",
          "operationId": "Jobs_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Jobs({key})/UiPath.Server.Configuration.OData.StopJob": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Cancels or terminates the specified job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.Edit.",
          "operationId": "Jobs_StopJobById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The specified job's Id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Strategy - States whether a job should be soft stopped or killed immediately.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Jobs({key})/UiPath.Server.Configuration.OData.ValidateExistingJob": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Validates an existing job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: (Jobs.View).",
          "operationId": "Jobs_ValidateExistingJobById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResultDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Jobs/UiPath.Server.Configuration.OData.Export": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Requests a CSV export of filtered items.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.View.",
          "operationId": "Jobs_Export",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExportModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Jobs/UiPath.Server.Configuration.OData.RestartJob": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Restarts the specified job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.Create.",
          "operationId": "Jobs_RestartJob",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The specified job id.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RestartJobRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Jobs/UiPath.Server.Configuration.OData.ResumeJob": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Resumes the specified job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.Edit.",
          "operationId": "Jobs_ResumeJob",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The specified job key.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ResumeJobRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Jobs/UiPath.Server.Configuration.OData.StartJobs": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Adds a new job and sets it in Pending state for each robot based on the input parameters and notifies the respective robots about the pending job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.Create.",
          "operationId": "Jobs_StartJobs",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "StartInfo - The information required to register the new jobs.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfJobDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Jobs/UiPath.Server.Configuration.OData.StopJobs": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Cancels or terminates the specified jobs.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.Edit.",
          "operationId": "Jobs_StopJobs",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "JobIds - The ids for the jobs to be canceled or terminated;\r\n            Strategy - States whether a job should be soft stopped or killed immediately.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/StopJobsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Jobs/UiPath.Server.Configuration.OData.ValidateDynamicJob": {
        "post": {
          "tags": [
            "Jobs"
          ],
          "summary": "Validates the input which would start a job.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Jobs.Create.",
          "operationId": "Jobs_ValidateDynamicJob",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "StartInfo - The same input which would be used to start a new job.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/StartJobsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResultDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/JobTriggers": {
        "get": {
          "tags": [
            "JobTriggers"
          ],
          "summary": "Gets JobTriggers.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: Jobs.View.",
          "operationId": "JobTriggers_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfJobTriggerDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/JobTriggers/UiPath.Server.Configuration.OData.GetWithWaitEvents(jobId={jobId})": {
        "get": {
          "tags": [
            "JobTriggers"
          ],
          "summary": "Gets Trigger option for a job instance along with wait event details    .",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: Jobs.View.",
          "operationId": "JobTriggers_GetWithWaitEventsByJobid",
          "parameters": [
            {
              "name": "jobId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfJobTriggerWithWaitEventsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Libraries": {
        "get": {
          "tags": [
            "Libraries"
          ],
          "summary": "Gets the library packages.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Libraries.View.",
          "operationId": "Libraries_Get",
          "parameters": [
            {
              "name": "searchTerm",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfLibraryDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Libraries('{key}')": {
        "delete": {
          "tags": [
            "Libraries"
          ],
          "summary": "Deletes a package.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Libraries.Delete.",
          "operationId": "Libraries_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Package deleted",
              "content": {}
            },
            "204": {
              "description": "Deleted",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Libraries/UiPath.Server.Configuration.OData.DownloadPackage(key='{key}')": {
        "get": {
          "tags": [
            "Libraries"
          ],
          "summary": "Downloads the .nupkg file of a Package.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Libraries.View.",
          "operationId": "Libraries_DownloadPackageByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Libraries/UiPath.Server.Configuration.OData.GetVersions(packageId='{packageId}')": {
        "get": {
          "tags": [
            "Libraries"
          ],
          "summary": "Returns a collection of all available versions of a given package. Allows odata query options.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Libraries.View.",
          "operationId": "Libraries_GetVersionsByPackageid",
          "parameters": [
            {
              "name": "packageId",
              "in": "path",
              "description": "The Id of the package for which the versions are fetched.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfLibraryDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Libraries/UiPath.Server.Configuration.OData.UploadPackage": {
        "post": {
          "tags": [
            "Libraries"
          ],
          "summary": "Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Libraries.Create.",
          "operationId": "Libraries_UploadPackage",
          "parameters": [
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file1": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file2": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file3": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file4": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file5": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file6": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file7": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file8": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file9": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "207": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBulkItemDtoOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/LicensesNamedUser/UiPath.Server.Configuration.OData.GetLicensesNamedUser(robotType='{robotType}')": {
        "get": {
          "tags": [
            "LicensesNamedUser"
          ],
          "summary": "Gets named-user licenses.",
          "description": "OAuth required scopes: OR.License or OR.License.Read.\r\n\r\nRequired permissions: License.View.",
          "operationId": "LicensesNamedUser_GetLicensesNamedUserByRobottype",
          "parameters": [
            {
              "name": "robotType",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "NonProduction",
                  "Attended",
                  "Unattended",
                  "Development",
                  "Studio",
                  "RpaDeveloper",
                  "StudioX",
                  "CitizenDeveloper",
                  "Headless",
                  "StudioPro",
                  "RpaDeveloperPro",
                  "TestAutomation",
                  "AutomationCloud",
                  "Serverless",
                  "AutomationKit",
                  "ServerlessTestAutomation",
                  "AutomationCloudTestAutomation",
                  "AttendedStudioWeb"
                ],
                "x-ms-enum": {
                  "name": "RobotType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "RobotType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfLicenseNamedUserDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/LicensesRuntime('{key}')/UiPath.Server.Configuration.OData.ToggleEnabled": {
        "post": {
          "tags": [
            "LicensesRuntime"
          ],
          "summary": "Toggles machine licensing on/off.",
          "description": "OAuth required scopes: OR.License or OR.License.Write.\r\n\r\nRequired permissions: Machines.Edit.",
          "operationId": "LicensesRuntime_ToggleEnabledByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicensesToggleEnabledRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/LicensesRuntime/UiPath.Server.Configuration.OData.GetLicensesRuntime(robotType='{robotType}')": {
        "get": {
          "tags": [
            "LicensesRuntime"
          ],
          "summary": "Gets runtime licenses.",
          "description": "OAuth required scopes: OR.License or OR.License.Read.\r\n\r\nRequired permissions: License.View.",
          "operationId": "LicensesRuntime_GetLicensesRuntimeByRobottype",
          "parameters": [
            {
              "name": "robotType",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "enum": [
                  "NonProduction",
                  "Attended",
                  "Unattended",
                  "Development",
                  "Studio",
                  "RpaDeveloper",
                  "StudioX",
                  "CitizenDeveloper",
                  "Headless",
                  "StudioPro",
                  "RpaDeveloperPro",
                  "TestAutomation",
                  "AutomationCloud",
                  "Serverless",
                  "AutomationKit",
                  "ServerlessTestAutomation",
                  "AutomationCloudTestAutomation",
                  "AttendedStudioWeb"
                ],
                "x-ms-enum": {
                  "name": "RobotType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "RobotType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfLicenseRuntimeDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Machines": {
        "get": {
          "tags": [
            "Machines"
          ],
          "summary": "Gets machines.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Read.\r\n\r\nRequired permissions: Machines.View.",
          "operationId": "Machines_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfExtendedMachineDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Machines"
          ],
          "summary": "Creates a new machine.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Write.\r\n\r\nRequired permissions: Machines.Create.",
          "operationId": "Machines_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MachineDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Machines({key})": {
        "get": {
          "tags": [
            "Machines"
          ],
          "summary": "Gets a single machine based on its id.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Read.\r\n\r\nRequired permissions: Machines.View.",
          "operationId": "Machines_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MachineDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Machines"
          ],
          "summary": "Edits a machine based on its key.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Write.\r\n\r\nRequired permissions: Machines.Edit.",
          "operationId": "Machines_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MachineDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Machines"
          ],
          "summary": "Deletes a machine based on its key.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Write.\r\n\r\nRequired permissions: Machines.Delete.",
          "operationId": "Machines_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Machines"
          ],
          "summary": "Partially updates a machine.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Write.\r\n\r\nRequired permissions: Machines.Edit.",
          "operationId": "Machines_PatchById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Machines/UiPath.Server.Configuration.OData.DeleteBulk": {
        "post": {
          "tags": [
            "Machines"
          ],
          "summary": "Deletes multiple machines based on their keys.",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Write.\r\n\r\nRequired permissions: Machines.Delete.",
          "operationId": "Machines_DeleteBulk",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineDeleteBulkRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Empty machineIds collection in payload",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Machines/UiPath.Server.Configuration.OData.GetAssignedMachines(folderId={folderId})": {
        "get": {
          "tags": [
            "Machines"
          ],
          "summary": "Gets machines assigned to folder and robot",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Read.\r\n\r\nRequired permissions: (Machines.View or Jobs.Create).",
          "operationId": "Machines_GetAssignedMachinesByFolderid",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "robotId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMachineDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Machines/UiPath.Server.Configuration.OData.GetRuntimesForFolder(folderId={folderId})": {
        "get": {
          "tags": [
            "Machines"
          ],
          "summary": "Gets runtimes for the specified folder",
          "description": "OAuth required scopes: OR.Machines or OR.Machines.Read.\r\n\r\nRequired permissions: (Machines.View or Jobs.Create).",
          "operationId": "Machines_GetRuntimesForFolderByFolderid",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMachineRuntimeDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/OrganizationUnits": {
        "get": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Gets the organization units.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: Units.View.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use Get from FoldersController  instead",
          "operationId": "OrganizationUnits_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfOrganizationUnitDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Creates an organization unit.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: Units.Create.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use Post from FoldersController  instead",
          "operationId": "OrganizationUnits_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationUnitDto"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationUnitDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/OrganizationUnits({key})": {
        "get": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Gets an organization unit.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: Units.View.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use Get from FoldersController  instead",
          "operationId": "OrganizationUnits_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationUnitDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Edits an organization unit.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: Units.Edit.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use Put from FoldersController  instead",
          "operationId": "OrganizationUnits_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUnitDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/OrganizationUnitDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Deletes an organization unit.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: Units.Delete.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use Delete from FoldersController  instead",
          "operationId": "OrganizationUnits_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/OrganizationUnits({key})/UiPath.Server.Configuration.OData.SetUsers": {
        "post": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Associates a group of users with and dissociates another group of users from the given unit.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Write.\r\n\r\nRequired permissions: Users.Edit.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use AssignUsers from FoldersController  instead",
          "operationId": "OrganizationUnits_SetUsersById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The unit id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "description": "<para />addedUserIds - The id of the users to be associated with the unit.\r\n            <para />removedUserIds - The id of the users to be dissociated from the unit.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "204": {
              "description": "Nothing returned",
              "content": {}
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/OrganizationUnits/UiPath.Server.Configuration.OData.GetUserIdsForUnit(key={key})": {
        "get": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Returns a collection of all the ids of the users associated to an unit based on unit Id.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: Units.View and Users.View.\r\nDEPRECATED: \r\nKept for backwards compatibility.",
          "operationId": "OrganizationUnits_GetUserIdsForUnitByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the unit for which the robot ids are fetched.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfInt64"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/OrganizationUnits/UiPath.Server.Configuration.OData.GetUsersForUnit(key={key})": {
        "get": {
          "tags": [
            "OrganizationUnits"
          ],
          "summary": "Returns a collection of all non robot users and, if no other sorting is provided, will place first those associated to an unit. Allows odata query options.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: Units.View and Users.View.\r\nDEPRECATED: \r\nKept for backwards compatibility. Use GetUsersForFolder from FoldersController  instead",
          "operationId": "OrganizationUnits_GetUsersForUnitByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the unit for which the associated users are placed first.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfUserDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Permissions": {
        "get": {
          "tags": [
            "Permissions"
          ],
          "summary": "Gets permissions.",
          "operationId": "Permissions_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfPermissionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/PersonalWorkspaces": {
        "get": {
          "tags": [
            "PersonalWorkspaces"
          ],
          "summary": "Gets Personal Workspaces.",
          "description": "OAuth required scopes: OR.Folders or OR.Folders.Read.\r\n\r\nRequired permissions: Units.View.",
          "operationId": "PersonalWorkspaces_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfPersonalWorkspaceDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/PersonalWorkspaces({key})/UiPath.Server.Configuration.OData.ConvertToFolder": {
        "post": {
          "tags": [
            "PersonalWorkspaces"
          ],
          "summary": "Converts a Personal Workspace to a standard Folder.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequired permissions: Units.Edit.",
          "operationId": "PersonalWorkspaces_ConvertToFolderById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalWorkspacesConvertToFolderRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/PersonalWorkspaces({key})/UiPath.Server.Configuration.OData.StartExploring": {
        "post": {
          "tags": [
            "PersonalWorkspaces"
          ],
          "summary": "Assigns the current User to explore a Personal Workspace.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequired permissions: Units.Edit and Users.View and Roles.View.",
          "operationId": "PersonalWorkspaces_StartExploringById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/PersonalWorkspaces({key})/UiPath.Server.Configuration.OData.StopExploring": {
        "post": {
          "tags": [
            "PersonalWorkspaces"
          ],
          "summary": "Unassigns the current User from exploring a Personal Workspace.",
          "description": "OAuth authentication is not supported.\r\n\r\nRequired permissions: Units.Edit and Users.View and Roles.View.",
          "operationId": "PersonalWorkspaces_StopExploringById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/PersonalWorkspaces/UiPath.Server.Configuration.OData.GetPersonalWorkspace": {
        "get": {
          "tags": [
            "PersonalWorkspaces"
          ],
          "summary": "Gets Personal Workspace for current User",
          "description": "OAuth authentication is not supported.\r\n\r\nRequires authentication.",
          "operationId": "PersonalWorkspaces_GetPersonalWorkspace",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PersonalWorkspaceDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Processes": {
        "get": {
          "tags": [
            "Processes"
          ],
          "summary": "Gets the processes.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: (Packages.View - Lists packages in a Tenant Feed) and (FolderPackages.View - Lists packages in a Folder Feed).",
          "operationId": "Processes_Get",
          "parameters": [
            {
              "name": "searchTerm",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfProcessDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Processes('{key}')": {
        "delete": {
          "tags": [
            "Processes"
          ],
          "summary": "Deletes a package.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: (Packages.Delete - Deletes a package in a Tenant Feed) and (FolderPackages.Delete - Deletes a package in a Folder Feed).",
          "operationId": "Processes_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Package deleted",
              "content": {}
            },
            "204": {
              "description": "Deleted",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Processes/UiPath.Server.Configuration.OData.DownloadPackage(key='{key}')": {
        "get": {
          "tags": [
            "Processes"
          ],
          "summary": "Downloads the .nupkg file of a Package.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: (Packages.View - Downloads a package from a Tenant Feed) and (FolderPackages.View - Downloads a package from a Folder Feed).",
          "operationId": "Processes_DownloadPackageByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Processes/UiPath.Server.Configuration.OData.GetArguments(key='{key}')": {
        "get": {
          "tags": [
            "Processes"
          ],
          "summary": "Get process parameters",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Packages.View.",
          "operationId": "Processes_GetArgumentsByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ArgumentMetadata"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Processes/UiPath.Server.Configuration.OData.GetProcessVersions(processId='{processId}')": {
        "get": {
          "tags": [
            "Processes"
          ],
          "summary": "Returns a collection of all available versions of a given process. Allows odata query options.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: (Packages.View - Lists versions of a package in a Tenant Feed) and (FolderPackages.View - Lists versions of a package in a Folder Feed).",
          "operationId": "Processes_GetProcessVersionsByProcessid",
          "parameters": [
            {
              "name": "processId",
              "in": "path",
              "description": "The Id of the process for which the versions are fetched.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfProcessDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Processes/UiPath.Server.Configuration.OData.SetArguments": {
        "post": {
          "tags": [
            "Processes"
          ],
          "summary": "Saves process arguments",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Packages.Edit.",
          "operationId": "Processes_SetArguments",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessesSetArgumentsRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Processes/UiPath.Server.Configuration.OData.UploadPackage": {
        "post": {
          "tags": [
            "Processes"
          ],
          "summary": "Uploads a new package or a new version of an existing package. The content of the package is sent as a .nupkg file embedded in the HTTP request.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: (Packages.Create - Uploads a package in a Tenant Feed) and (FolderPackages.Create - Uploads a package in a Folder Feed).",
          "operationId": "Processes_UploadPackage",
          "parameters": [
            {
              "name": "feedId",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file1": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file2": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file3": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file4": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file5": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file6": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file7": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file8": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file9": {
                      "type": "string",
                      "format": "binary"
                    },
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBulkItemDtoOfString"
                  }
                }
              }
            },
            "207": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfBulkItemDtoOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ProcessSchedules": {
        "get": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Gets the process schedules.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: Schedules.View.",
          "operationId": "ProcessSchedules_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfProcessScheduleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Creates a new process schedule.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Schedules.Create.",
          "operationId": "ProcessSchedules_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessScheduleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/ProcessSchedules({key})": {
        "get": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Gets a single process schedule based on its key.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: Schedules.View.",
          "operationId": "ProcessSchedules_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ProcessScheduleDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Edits a process schedule.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Schedules.Edit.",
          "operationId": "ProcessSchedules_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessScheduleDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Deletes a process schedule.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Schedules.Delete.",
          "operationId": "ProcessSchedules_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ProcessSchedules({key})/UiPath.Server.Configuration.OData.Activate": {
        "post": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Activates a process schedule associated with a queue",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Schedules.Edit.",
          "operationId": "ProcessSchedules_ActivateById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Process Schedule was activated successfully",
              "content": {}
            },
            "404": {
              "description": "Process Schedule not found",
              "content": {}
            },
            "409": {
              "description": "Process Schedule cannot be activated",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.GetRobotIdsForSchedule(key={key})": {
        "get": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Returns a collection of all the ids of the robots associated to an schedule based on schedule Id.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Read.\r\n\r\nRequired permissions: Schedules.View.",
          "operationId": "ProcessSchedules_GetRobotIdsForScheduleByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the schedule for which the robot ids are fetched.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.SetEnabled": {
        "post": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Enables/disables a group of schedules.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Schedules.Edit.",
          "operationId": "ProcessSchedules_SetEnabled",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />Enabled - If true the schedules will be enabled, if false the schedules will be disabled.\r\n            <para />ScheduleIds - The collection of ids of the affected schedules.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessSetEnabledRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfBoolean"
                  }
                }
              }
            },
            "207": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/ErrorResult"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResult"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResult"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/ProcessSchedules/UiPath.Server.Configuration.OData.ValidateProcessSchedule": {
        "post": {
          "tags": [
            "ProcessSchedules"
          ],
          "summary": "Validates the input which would be used to create a process schedule.",
          "description": "OAuth required scopes: OR.Jobs or OR.Jobs.Write.\r\n\r\nRequired permissions: Schedules.Create.",
          "operationId": "ProcessSchedules_ValidateProcessSchedule",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateProcessScheduleRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ValidationResultDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueDefinitions": {
        "get": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Gets the list of queue definitions.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
          "operationId": "QueueDefinitions_Get",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; at least one permission in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Creates a new queue.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.Create.",
          "operationId": "QueueDefinitions_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueDefinitions({key})": {
        "get": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Gets a single queue definition based on its Id.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
          "operationId": "QueueDefinitions_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Edits a queue.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.Edit.",
          "operationId": "QueueDefinitions_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueDefinitionDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Deletes a queue based on its key.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.Delete.",
          "operationId": "QueueDefinitions_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Deleted",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueDefinitions({key})/UiPathODataSvc.Export": {
        "post": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Requests a CSV export of filtered items.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueDefinitions_ExportById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExportModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueDefinitions({key})/UiPathODataSvc.GetJsonSchemaDefinition(jsonSchemaType='{jsonSchemaType}')": {
        "get": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Gets a given queue item JSON schema as a .json file, based on queue definition id.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.Edit.",
          "operationId": "QueueDefinitions_GetJsonSchemaDefinitionByIdAndJsonschematype",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "jsonSchemaType",
              "in": "path",
              "description": "Possible values: QueueSchemaType",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueDefinitions({key})/UiPathODataSvc.Reports": {
        "get": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Returns an Excel file containing all the items in the given queue.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.\r\nDEPRECATED: \r\nPlease user other means to retrieve such reports: https://docs.uipath.com/orchestrator/automation-cloud/latest/release-notes/release-notes-june-2023#deprecation-of-reports-endpoints. This endpoint will be removed in future releases.",
          "operationId": "QueueDefinitions_ReportsById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Given queue's Id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueDefinitions/UiPath.Server.Configuration.OData.GetFoldersForQueue(id={id})": {
        "get": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Get all accesible folders where the queue is shared, and the total count of folders where it is shared (including unaccessible folders).",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequires authentication.",
          "operationId": "QueueDefinitions_GetFoldersForQueueById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessibleFoldersDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueDefinitions/UiPath.Server.Configuration.OData.GetQueuesAcrossFolders": {
        "get": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Get the queues from all the folders in which the current user has the Queues.View permission, except the ones in the excluded folder.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequires authentication.",
          "operationId": "QueueDefinitions_GetQueuesAcrossFolders",
          "parameters": [
            {
              "name": "excludeFolderId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueDefinitions/UiPath.Server.Configuration.OData.ShareToFolders": {
        "post": {
          "tags": [
            "QueueDefinitions"
          ],
          "summary": "Makes the queue visible in the specified folders.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequires authentication.",
          "operationId": "QueueDefinitions_ShareToFolders",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Object containing the ids of the queue definitions and the ids of the folders where they should be shared.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueFoldersShareDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "404": {
              "description": "A queue or one of the folders specified does not exist.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueItemComments": {
        "get": {
          "tags": [
            "QueueItemComments"
          ],
          "summary": "Gets the QueueItemComments.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItemComments_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueItemCommentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "QueueItemComments"
          ],
          "summary": "Creates a QueueItemComment.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.\r\n\r\nNote: If the CreationTime is passed in in the UiPath.Orchestrator.Application.Dto.Queues.QueueItemCommentDto it will be overriden with server UTC time.",
          "operationId": "QueueItemComments_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemCommentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueItemComments({key})": {
        "get": {
          "tags": [
            "QueueItemComments"
          ],
          "summary": "Gets a QueueItemComment by Id.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItemComments_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemCommentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "QueueItemComments"
          ],
          "summary": "Updates a QueueItemComment",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItemComments_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemCommentDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "QueueItemComments"
          ],
          "summary": "Deletes a QueueItemComment.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItemComments_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItemComments/UiPath.Server.Configuration.OData.GetQueueItemCommentsHistory(queueItemId={queueItemId})": {
        "get": {
          "tags": [
            "QueueItemComments"
          ],
          "summary": "Returns a collection of Queue Item Comments associated to a Queue Item and all its related Queue Items.\r\nA Queue Item is related to another if it was created as a retry of a failed Queue Item. They also share the same Key.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItemComments_GetQueueItemCommentsHistoryByQueueitemid",
          "parameters": [
            {
              "name": "queueItemId",
              "in": "path",
              "description": "The Id of the Queue Item for which the comment history is requested.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueItemCommentDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItemEvents": {
        "get": {
          "tags": [
            "QueueItemEvents"
          ],
          "summary": "Gets the QueueItemEvents.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItemEvents_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueItemEventDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItemEvents({key})": {
        "get": {
          "tags": [
            "QueueItemEvents"
          ],
          "summary": "Gets a QueueItemEvent by Id.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItemEvents_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemEventDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItemEvents/UiPath.Server.Configuration.OData.GetQueueItemEventsHistory(queueItemId={queueItemId})": {
        "get": {
          "tags": [
            "QueueItemEvents"
          ],
          "summary": "Returns a collection of Queue Item Events associated to a Queue Item and all its related Queue Items.\r\nA Queue Item is related to another if it was created as a retry of a failed Queue Item. They also share the same Key.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItemEvents_GetQueueItemEventsHistoryByQueueitemid",
          "parameters": [
            {
              "name": "queueItemId",
              "in": "path",
              "description": "The Id of the Queue Item for which the event history is requested.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueItemEventDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItems": {
        "get": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Gets a collection of queue items.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItems_Get",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; at least one permission in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueItemDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItems({key})": {
        "get": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Gets a queue item by Id.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItems_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Updates the QueueItem properties with the new values provided.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.Edit and Transactions.Edit.\r\n\r\nOnly UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.Progress, UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.Priority, UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.DueDate, UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.DeferDate and UiPath.Orchestrator.Application.Dto.Queues.QueueItemDto.SpecificContent will be updated from given queueItemDto object.",
          "operationId": "QueueItems_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDataDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Queue Item updated successfully.",
              "content": {}
            },
            "404": {
              "description": "Queue Item does not exist.",
              "content": {}
            },
            "409": {
              "description": "Conflict with Queue Item being updated.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Deletes a queue item by Id.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Delete.",
          "operationId": "QueueItems_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItems({key})/UiPath.Server.Configuration.OData.GetItemLastRetry": {
        "get": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Returns the last retry of a queue item.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItems_GetItemLastRetryById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItems({key})/UiPathODataSvc.GetItemProcessingHistory": {
        "get": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Returns data about the processing history of the given queue item. Allows odata query options.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueItems_GetItemProcessingHistoryById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueItemDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItems({key})/UiPathODataSvc.SetTransactionProgress": {
        "post": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Updates the progress field of a queue item with the status 'In Progress'.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItems_SetTransactionProgressById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />QueueItemId - The item's id.\r\n            <para />Progress - The value for the Progress field.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionProgressRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueItems/UiPath.Server.Configuration.OData.GetReviewers": {
        "get": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Returns a collection of users having the permission for Queue Items review. Allows odata query options.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItems_GetReviewers",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfSimpleUserDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueItems/UiPathODataSvc.DeleteBulk": {
        "post": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Sets the given queue items' status to Deleted.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Delete.",
          "operationId": "QueueItems_DeleteBulk",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "QueueItems - The collection of ids of queue items to delete.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueItemDeleteBulkRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkOperationResponseDtoOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueItems/UiPathODataSvc.SetItemReviewer": {
        "post": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Sets the reviewer for multiple queue items",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItems_SetItemReviewer",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />UserId - The ID of the user to be set as the reviewer. If not set, the reviewer is cleared.\r\n            <para />QueueItems - The collection of ids of queue items for which the reviewer is set.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewerRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkOperationResponseDtoOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueItems/UiPathODataSvc.SetItemReviewStatus": {
        "post": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Updates the review status of the specified queue items to an indicated state.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItems_SetItemReviewStatus",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />QueueItems - The collection of ids of queue items for which the state is set.\r\n            <para />Status - The new value for the review status.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetItemReviewStatusRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkOperationResponseDtoOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueItems/UiPathODataSvc.UnsetItemReviewer": {
        "post": {
          "tags": [
            "QueueItems"
          ],
          "summary": "Unsets the reviewer for multiple queue items",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "QueueItems_UnsetItemReviewer",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />QueueItems - The collection of ids of queue items for which the reviewer is unset.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueUnsetItemReviewerRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkOperationResponseDtoOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/QueueProcessingRecords/UiPathODataSvc.RetrieveLastDaysProcessingRecords(daysNo={daysNo},queueDefinitionId={queueDefinitionId})": {
        "get": {
          "tags": [
            "QueueProcessingRecords"
          ],
          "summary": "Returns the computed processing status for a given queue in the last specified days.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View and Transactions.View.",
          "operationId": "QueueProcessingRecords_RetrieveLastDaysProcessingRecordsByDaysnoAndQueuedefinitionid",
          "parameters": [
            {
              "name": "daysNo",
              "in": "path",
              "description": "The number of days to go back from the present moment when calculating the report. If it is 0 the report will be computed for the last hour.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "queueDefinitionId",
              "in": "path",
              "description": "The Id of the queue for which the report is computed.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueProcessingRecordDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueProcessingRecords/UiPathODataSvc.RetrieveQueuesProcessingStatus": {
        "get": {
          "tags": [
            "QueueProcessingRecords"
          ],
          "summary": "Returns the processing status for all queues. Allows odata query options.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
          "operationId": "QueueProcessingRecords_RetrieveQueuesProcessingStatus",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueProcessingStatusDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueRetention": {
        "get": {
          "tags": [
            "QueueRetention"
          ],
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
          "operationId": "QueueRetention_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfQueueRetentionSettingDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/QueueRetention({key})": {
        "get": {
          "tags": [
            "QueueRetention"
          ],
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Read.\r\n\r\nRequired permissions: Queues.View.",
          "operationId": "QueueRetention_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueRetentionSettingDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "QueueRetention"
          ],
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.Edit.",
          "operationId": "QueueRetention_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueRetentionSettingDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "QueueRetention"
          ],
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.Edit.",
          "operationId": "QueueRetention_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Queues({key})/UiPathODataSvc.SetTransactionResult": {
        "post": {
          "tags": [
            "Queues"
          ],
          "summary": "Sets the result of a transaction.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Edit.",
          "operationId": "Queues_SetTransactionResultById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueSetTransactionResultRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Queues/UiPathODataSvc.AddQueueItem": {
        "post": {
          "tags": [
            "Queues"
          ],
          "summary": "Adds a new queue item.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Create.",
          "operationId": "Queues_AddQueueItem",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/AddQueueItemRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Queues/UiPathODataSvc.BulkAddQueueItems": {
        "post": {
          "tags": [
            "Queues"
          ],
          "summary": "Bulk adds queue items",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.Create.",
          "operationId": "Queues_BulkAddQueueItems",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAddQueueItemsRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkOperationResponseDtoOfFailedQueueItemDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Queues/UiPathODataSvc.StartTransaction": {
        "post": {
          "tags": [
            "Queues"
          ],
          "summary": "Starts a transaction.",
          "description": "OAuth required scopes: OR.Queues or OR.Queues.Write.\r\n\r\nRequired permissions: Queues.View and Transactions.View and Transactions.Create and Transactions.Edit.",
          "operationId": "Queues_StartTransaction",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/QueuesStartTransactionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueueItemDto"
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/ReleaseRetention": {
        "get": {
          "tags": [
            "ReleaseRetention"
          ],
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Processes.View.",
          "operationId": "ReleaseRetention_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfReleaseRetentionSettingDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/ReleaseRetention({key})": {
        "get": {
          "tags": [
            "ReleaseRetention"
          ],
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Processes.View.",
          "operationId": "ReleaseRetention_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "ReleaseRetention"
          ],
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
          "operationId": "ReleaseRetention_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "ReleaseRetention"
          ],
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
          "operationId": "ReleaseRetention_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Releases": {
        "get": {
          "tags": [
            "Releases"
          ],
          "summary": "Gets multiple releases.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Processes.View.",
          "operationId": "Releases_Get",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; at least one permission in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfReleaseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Releases"
          ],
          "summary": "Creates a new release.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: (Processes.Create) and (RemoteControl.Create - Required when creating a process with live streaming enabled.).",
          "operationId": "Releases_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReleaseDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Releases({key})": {
        "get": {
          "tags": [
            "Releases"
          ],
          "summary": "Gets a release by id.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Read.\r\n\r\nRequired permissions: Processes.View.",
          "operationId": "Releases_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReleaseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Releases"
          ],
          "summary": "Edits a release.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: (Processes.Edit) and (RemoteControl.Create - Required when changing the live streaming configuration.).",
          "operationId": "Releases_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ReleaseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Releases"
          ],
          "summary": "Deletes a release.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Delete.",
          "operationId": "Releases_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Releases"
          ],
          "summary": "Partially updates a release.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: (Processes.Edit) and (RemoteControl.Create - Required when changing the live streaming configuration.).",
          "operationId": "Releases_PatchById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Releases({key})/UiPath.Server.Configuration.OData.RollbackToPreviousReleaseVersion": {
        "post": {
          "tags": [
            "Releases"
          ],
          "summary": "Reverts the package versions for the given release to the last version it had before the current one.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
          "operationId": "Releases_RollbackToPreviousReleaseVersionById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "mergePackageTags",
              "in": "query",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Releases({key})/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersion": {
        "post": {
          "tags": [
            "Releases"
          ],
          "summary": "Updates the package version for the given release to the latest available.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
          "operationId": "Releases_UpdateToLatestPackageVersionById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "mergePackageTags",
              "in": "query",
              "description": "Merge process tags with the new package version tags",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Releases({key})/UiPath.Server.Configuration.OData.UpdateToSpecificPackageVersion": {
        "post": {
          "tags": [
            "Releases"
          ],
          "summary": "Updates the package version for the given release.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
          "operationId": "Releases_UpdateToSpecificPackageVersionById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "PackageVersion - The new package version.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToSpecificPackageVersionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Releases/UiPath.Server.Configuration.OData.UpdateToLatestPackageVersionBulk": {
        "post": {
          "tags": [
            "Releases"
          ],
          "summary": "Updates the package versions for the given releases to the latest available.",
          "description": "OAuth required scopes: OR.Execution or OR.Execution.Write.\r\n\r\nRequired permissions: Processes.Edit.",
          "operationId": "Releases_UpdateToLatestPackageVersionBulk",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleasesUpdateToLatestPackageVersionBulkRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkOperationResponseDtoOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/RobotLogs": {
        "get": {
          "tags": [
            "RobotLogs"
          ],
          "summary": "Gets the robot logs.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Logs.View.",
          "operationId": "RobotLogs_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfLogDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/RobotLogs/UiPath.Server.Configuration.OData.Export": {
        "post": {
          "tags": [
            "RobotLogs"
          ],
          "summary": "Requests a CSV export of filtered items.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Write.\r\n\r\nRequired permissions: Logs.View.",
          "operationId": "RobotLogs_Export",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExportModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/RobotLogs/UiPath.Server.Configuration.OData.GetTotalCount": {
        "get": {
          "tags": [
            "RobotLogs"
          ],
          "summary": "Gets the total count of robot logs.\r\nThis might be different than the size of the count returned by GetRobotLogs which\r\nis limited by the max_result_window parameter for an Elasticsearch source.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Logs.View.",
          "operationId": "RobotLogs_GetTotalCount",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/RobotLogs/UiPath.Server.Configuration.OData.Reports": {
        "get": {
          "tags": [
            "RobotLogs"
          ],
          "summary": "Reports.",
          "description": "OAuth required scopes: OR.Monitoring or OR.Monitoring.Read.\r\n\r\nRequired permissions: Logs.View.\r\nDEPRECATED: \r\nPlease user other means to retrieve such reports: https://docs.uipath.com/orchestrator/automation-cloud/latest/release-notes/release-notes-june-2023#deprecation-of-reports-endpoints. This endpoint will be removed in future releases.",
          "operationId": "RobotLogs_Reports",
          "parameters": [
            {
              "name": "fileNameSubject",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Gets robots.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
          "operationId": "Robots_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfRobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Robots"
          ],
          "summary": "Creates a new robot.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: (Robots.Create - Floating Robot) and (Robots.Create and Machines.View - Standard Robot).",
          "operationId": "Robots_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Robots({key})": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Gets a single robot based on its key.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
          "operationId": "Robots_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Robots"
          ],
          "summary": "Edits a robot based on its key.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
          "operationId": "Robots_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Robots"
          ],
          "summary": "Deletes a robot based on its key.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Delete.",
          "operationId": "Robots_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Robots"
          ],
          "summary": "Partially updates a robot.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
          "operationId": "Robots_PatchById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.ConvertToFloating": {
        "post": {
          "tags": [
            "Robots"
          ],
          "summary": "Convert a Standard Attended Robot to a Floating Robot.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
          "operationId": "Robots_ConvertToFloating",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsConvertToFloatingRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid arguments",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.DeleteBulk": {
        "post": {
          "tags": [
            "Robots"
          ],
          "summary": "Deletes multiple robots based on their keys.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Delete.",
          "operationId": "Robots_DeleteBulk",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotDeleteBulkRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Empty robotIds collection in payload",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.FindAllAcrossFolders": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Get robots across all accessible folders.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View or Users.View or Machines.Create or Machines.Edit.",
          "operationId": "Robots_FindAllAcrossFolders",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfExtendedRobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.GetConfiguredRobots": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Gets robots autoprovisioned from users",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: (Users.View - Required only when the robot's user is expanded) and (Robots.View).",
          "operationId": "Robots_GetConfiguredRobots",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfExtendedRobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.GetFolderRobots(folderId={folderId},machineId={machineId})": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Get folder robots",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: (SubFolders.View or Units.View or Jobs.Create).",
          "operationId": "Robots_GetFolderRobotsByFolderidAndMachineid",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "machineId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfExtendedRobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.GetMachineNameToLicenseKeyMappings": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Gets machine name to license key mapping.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.Create and Machines.View.",
          "operationId": "Robots_GetMachineNameToLicenseKeyMappings",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfKeyValuePairOfStringString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.GetRobotsForProcess(processId='{processId}')": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Returns a collection of all robots that can execute the process with the provided Id.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View and Environments.View and Processes.View.",
          "operationId": "Robots_GetRobotsForProcessByProcessid",
          "parameters": [
            {
              "name": "processId",
              "in": "path",
              "description": "The Id of the process for which the robots are fetched.",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfRobotDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.GetRobotsFromFolder(folderId={folderId})": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Gets all robots from a folder",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: (SubFolders.View or Units.View or Jobs.Create or Users.View).",
          "operationId": "Robots_GetRobotsFromFolderByFolderid",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "machineId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfRobotsFromFolderModel"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.GetUsernames": {
        "get": {
          "tags": [
            "Robots"
          ],
          "summary": "Gets usernames.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
          "operationId": "Robots_GetUsernames",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Robots/UiPath.Server.Configuration.OData.ToggleEnabledStatus": {
        "post": {
          "tags": [
            "Robots"
          ],
          "summary": "Toggles the status of the robots (enabled/disabled)",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
          "operationId": "Robots_ToggleEnabledStatus",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para /> disabled - If true the robots will be enabled, if false the robots will be disabled.\r\n            <para /> robotIds - The collection of ids of the affected robots.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RobotsToggleEnabledStatusRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Roles": {
        "get": {
          "tags": [
            "Roles"
          ],
          "summary": "Gets roles.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Roles.View or Units.Edit or SubFolders.Edit.",
          "operationId": "Roles_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfRoleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Roles"
          ],
          "summary": "Creates a new role - Creating mixed roles will not be supported in 21.10",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Roles.Create.",
          "operationId": "Roles_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Roles({key})": {
        "get": {
          "tags": [
            "Roles"
          ],
          "summary": "Gets role based on its id.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Roles.View.",
          "operationId": "Roles_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RoleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Roles"
          ],
          "summary": "Edits a role.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Roles.Edit.",
          "operationId": "Roles_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Roles"
          ],
          "summary": "Deletes a role.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Roles.Delete.",
          "operationId": "Roles_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Roles({key})/UiPath.Server.Configuration.OData.SetUsers": {
        "post": {
          "tags": [
            "Roles"
          ],
          "summary": "Associates a group of users with and dissociates another group of users from the given role.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Roles.Edit and Users.View.",
          "operationId": "Roles_SetUsersById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The role id.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "description": "<para />addedUserIds - The id of the users to be associated with the role.\r\n            <para />removedUserIds - The id of the users to be dissociated from the role.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SetUsersRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "Nothing returned",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Roles/UiPath.Server.Configuration.OData.GetUserIdsForRole(key={key})": {
        "get": {
          "tags": [
            "Roles"
          ],
          "summary": "Returns a collection of all the ids of the users associated to a role based on role Id.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Roles.View or Users.View.",
          "operationId": "Roles_GetUserIdsForRoleByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the role for which the robot ids are fetched.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfInt64"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Roles/UiPath.Server.Configuration.OData.GetUsersForRole(key={key})": {
        "get": {
          "tags": [
            "Roles"
          ],
          "summary": "Returns a collection of all users and, if no other sorting is provided, will place first those associated to a role.Allows odata query options.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Roles.View and Users.View.",
          "operationId": "Roles_GetUsersForRoleByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The Id of the role for which the associated users are placed first.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfUserDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Gets the sessions for the current folder.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View.",
          "operationId": "Sessions_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfSessionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions({key})/UiPath.Server.Configuration.OData.ToggleMachineSessionDebugMode": {
        "post": {
          "tags": [
            "Sessions"
          ],
          "summary": "Toggles the debug mode for the specified machine session",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
          "operationId": "Sessions_ToggleMachineSessionDebugModeById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionsToggleMachineSessionDebugModeRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.DeleteInactiveUnattendedSessions": {
        "post": {
          "tags": [
            "Sessions"
          ],
          "summary": "Deletes disconnected or unresponsive sessions",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Delete.",
          "operationId": "Sessions_DeleteInactiveUnattendedSessions",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteInactiveSessionsParameters"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.GetGlobalSessions": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Gets all the tenant sessions.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: (Robots.View and Users.View - Classic and modern robot sessions are returned.) and (Users.View or Machines.Create or Machines.Edit - Modern robot sessions are returned. Users.View is required only when the robot is expanded) and (Robots.View - Classic robot sessions are returned. Users.View is required only when the robot is expanded).",
          "operationId": "Sessions_GetGlobalSessions",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfSessionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.GetMachineSessionRuntimes": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Gets machine runtime sessions",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Machines.View.",
          "operationId": "Sessions_GetMachineSessionRuntimes",
          "parameters": [
            {
              "name": "runtimeType",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": [
                  "NonProduction",
                  "Attended",
                  "Unattended",
                  "Development",
                  "Studio",
                  "RpaDeveloper",
                  "StudioX",
                  "CitizenDeveloper",
                  "Headless",
                  "StudioPro",
                  "RpaDeveloperPro",
                  "TestAutomation",
                  "AutomationCloud",
                  "Serverless",
                  "AutomationKit",
                  "ServerlessTestAutomation",
                  "AutomationCloudTestAutomation",
                  "AttendedStudioWeb"
                ],
                "x-ms-enum": {
                  "name": "RobotType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "RobotType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMachineSessionRuntimeDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.GetMachineSessionRuntimesByFolderId(folderId={folderId})": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Gets machine runtime sessions by folder id",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: (Machines.View or Jobs.Create).",
          "operationId": "Sessions_GetMachineSessionRuntimesByFolderId",
          "parameters": [
            {
              "name": "folderId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "robotId",
              "in": "query",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "runtimeType",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": [
                  "NonProduction",
                  "Attended",
                  "Unattended",
                  "Development",
                  "Studio",
                  "RpaDeveloper",
                  "StudioX",
                  "CitizenDeveloper",
                  "Headless",
                  "StudioPro",
                  "RpaDeveloperPro",
                  "TestAutomation",
                  "AutomationCloud",
                  "Serverless",
                  "AutomationKit",
                  "ServerlessTestAutomation",
                  "AutomationCloudTestAutomation",
                  "AttendedStudioWeb"
                ],
                "x-ms-enum": {
                  "name": "RobotType",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "RobotType",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMachineSessionRuntimeDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.GetMachineSessions(key={key})": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Get sessions for a machine",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Machines.View.",
          "operationId": "Sessions_GetMachineSessionsByKey",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfMachineSessionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.GetUsernames": {
        "get": {
          "tags": [
            "Sessions"
          ],
          "summary": "Gets usernames.",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Read.\r\n\r\nRequired permissions: Robots.View or Users.View.",
          "operationId": "Sessions_GetUsernames",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Sessions/UiPath.Server.Configuration.OData.SetMaintenanceMode": {
        "post": {
          "tags": [
            "Sessions"
          ],
          "summary": "Sets the execution capabilities for a specified host",
          "description": "OAuth required scopes: OR.Robots or OR.Robots.Write.\r\n\r\nRequired permissions: Robots.Edit.",
          "operationId": "Sessions_SetMaintenanceMode",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionMaintenanceModeParameters"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets the settings.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "Settings_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfSettingsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings('{key}')": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets a settings value based on its key.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "Settings_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Settings"
          ],
          "summary": "Edits a setting.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
          "operationId": "Settings_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SettingsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.ActivateLicenseOffline": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Uploads a new offline license activation.\r\nThe content of the license is sent as a file embedded in the HTTP request.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
          "operationId": "Settings_ActivateLicenseOffline",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.ActivateLicenseOnline": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Activate the license for a specific tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
          "operationId": "Settings_ActivateLicenseOnline",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.DeactivateLicenseOnline": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Deactivate the license for a specific tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Delete.",
          "operationId": "Settings_DeactivateLicenseOnline",
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.DeleteBulk": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Deletes values for the specified settings in the Tenant scope.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Delete.",
          "operationId": "Settings_DeleteBulk",
          "requestBody": {
            "description": "Settings - The collection of settings to be deleted.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsDeleteBulkRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.DeleteLicense": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Removes the license",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Delete.",
          "operationId": "Settings_DeleteLicense",
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetActivitySettings": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Returns Orchestrator settings used by activities",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequires authentication.",
          "operationId": "Settings_GetActivitySettings",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ActivitySettingsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetAuthenticationSettings": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets the authentication settings",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.",
          "operationId": "Settings_GetAuthenticationSettings",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDictionaryDto"
                  }
                }
              }
            }
          }
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetCalendar": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets custom calendar, with excluded dates in UTC, for current tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.\r\nDEPRECATED: \r\nThis API is deprecated. Please do not use it any longer. Use /odata/Calendars instead.",
          "operationId": "Settings_GetCalendar",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CalendarDto"
                  }
                }
              }
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetConnectionString": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets the connection string",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "Settings_GetConnectionString",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfString"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetDeactivateLicenseOffline": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Deactivate the license offline for a specific tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Delete.",
          "operationId": "Settings_GetDeactivateLicenseOffline",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfString"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetExecutionSettingsConfiguration(scope={scope})": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets the execution settings configuration (display name, value type, etc.).\r\nIf scope is 0 (Global), the default values will be the initial ones. If scope is 1 (Robot), then\r\nthe default values will be the actual values set globally.\r\ne.g., Resolution width\r\nAssume it was set globally to 720.\r\nThen within the config returned by this function, the default value for this setting will be:\r\n- 0 for scope = 0 and\r\n- 720 for scope = 1.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.Edit or Robots.Create or Robots.Edit.",
          "operationId": "Settings_GetExecutionSettingsConfigurationByScope",
          "parameters": [
            {
              "name": "scope",
              "in": "path",
              "description": "Scope of the configuration; 0 for Global, 1 for Robot",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ExecutionSettingsConfiguration"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetLanguages": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets supported languages",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.",
          "operationId": "Settings_GetLanguages",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListResultDtoOfLanguageInfo"
                  }
                }
              }
            }
          }
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetLicense": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Retrieves the current license information.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequires authentication.",
          "operationId": "Settings_GetLicense",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LicenseDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetLicenseOffline": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Create the offline activation request for a specific tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
          "operationId": "Settings_GetLicenseOffline",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfString"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetSecureStoreConfiguration(storeTypeName='{storeTypeName}')": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets the configuration format for a Secure store",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequired permissions: Settings.View.",
          "operationId": "Settings_GetSecureStoreConfigurationByStoretypename",
          "parameters": [
            {
              "name": "storeTypeName",
              "in": "path",
              "description": "name of the secure store type",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "proxyId",
              "in": "query",
              "description": "id of the hosted credential store",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfConfigurationEntry"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetTimezones": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets timezones.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.",
          "operationId": "Settings_GetTimezones",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListResultDtoOfNameValueDto"
                  }
                }
              }
            }
          }
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetUpdateSettings": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Gets the update settings",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.",
          "operationId": "Settings_GetUpdateSettings",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateSettingsDto"
                  }
                }
              }
            }
          }
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.GetWebSettings": {
        "get": {
          "tags": [
            "Settings"
          ],
          "summary": "Returns a collection of key value pairs representing settings used by Orchestrator web client.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Read.\r\n\r\nRequires authentication.",
          "operationId": "Settings_GetWebSettings",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseDictionaryDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.SetCalendar": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Sets custom calendar, with excluded dates in UTC, for current tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.\r\nDEPRECATED: \r\nThis API is deprecated. Please do not use it any longer. Use /odata/Calendars instead.",
          "operationId": "Settings_SetCalendar",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "deprecated": true,
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.UpdateBulk": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Updates the current settings.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
          "operationId": "Settings_UpdateBulk",
          "requestBody": {
            "description": "Settings - The collection of settings to be updated.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingsUpdateBulkRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.UpdateLicenseOnline": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Update the license for a specific tenant",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Edit.",
          "operationId": "Settings_UpdateLicenseOnline",
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Invalid parameters",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.UpdateUserSetting": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Edits a user setting.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequires authentication.",
          "operationId": "Settings_UpdateUserSetting",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserSettingRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SettingsDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.UploadLicense": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Uploads a new license file that was previously generated with Regutil. The content of the license is sent as a file embedded in the HTTP request.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: License.Create or License.Edit.",
          "operationId": "Settings_UploadLicense",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "required": [
                    "file"
                  ],
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Settings/UiPath.Server.Configuration.OData.VerifySmtpSetting": {
        "post": {
          "tags": [
            "Settings"
          ],
          "summary": "Verify whether the given SMTP settings are correct or not by sending an email to a recipient.",
          "description": "OAuth required scopes: OR.Settings or OR.Settings.Write.\r\n\r\nRequired permissions: Settings.Edit.",
          "operationId": "Settings_VerifySmtpSetting",
          "requestBody": {
            "description": "SMTP setting parameters",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifySmtpSettingRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskActivities/UiPath.Server.Configuration.OData.GetByTaskId(taskId={taskId})": {
        "get": {
          "tags": [
            "TaskActivities"
          ],
          "summary": "Gets Task Activities for a Task",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
          "operationId": "TaskActivities_GetByTaskId",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "description": "Id of task",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskActivityDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskCatalogs": {
        "get": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Gets Task Catalog objects with the given OData queries.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: TaskCatalogs.View.",
          "operationId": "TaskCatalogs_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskCatalogDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskCatalogs({key})": {
        "get": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Gets a Task Catalog item by Id.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: TaskCatalogs.View.",
          "operationId": "TaskCatalogs_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "id of the object",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskCatalogDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Deletes Task Catalog.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: TaskCatalogs.Delete.",
          "operationId": "TaskCatalogs_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Id of the catalog to be deleted",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "Successfully deleted task catalog.",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "409": {
              "description": "Catalog have associated tasks.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskCatalogs({key})/UiPath.Server.Configuration.OData.UpdateTaskCatalog": {
        "post": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Updates Task Catalog.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: TaskCatalogs.Edit.",
          "operationId": "TaskCatalogs_UpdateTaskCatalogById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Key of the object",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskCatalog to be updated",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Updated",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskCatalogs/UiPath.Server.Configuration.OData.CreateTaskCatalog": {
        "post": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Creates a new Task Catalog.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: TaskCatalogs.Create.",
          "operationId": "TaskCatalogs_CreateTaskCatalog",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The task catalog to be created.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskCatalogDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskCatalogs/UiPath.Server.Configuration.OData.GetFoldersForTaskCatalog(id={id})": {
        "get": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Get all accessible folders where the task catalog is shared, and the total count of folders where it is shared (including unaccessible folders).",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "TaskCatalogs_GetFoldersForTaskCatalogById",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessibleFoldersDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskCatalogs/UiPath.Server.Configuration.OData.GetTaskCatalogExtendedDetails(taskCatalogId={taskCatalogId})": {
        "get": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Validates task catalog deletion request.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "TaskCatalogs_GetTaskCatalogExtendedDetailsByTaskcatalogid",
          "parameters": [
            {
              "name": "taskCatalogId",
              "in": "path",
              "description": "Id of task catalog",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskCatalogExtendedDetailsDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskCatalogs/UiPath.Server.Configuration.OData.GetTaskCatalogsFromFoldersWithPermissions": {
        "get": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Gets Task Catalogs across folders having given permission with the given OData queries .",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "TaskCatalogs_GetTaskCatalogsFromFoldersWithPermissions",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "These represent the additional permissions over TaskCatalog.Read required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "excludeFolderId",
              "in": "query",
              "description": "The task catalogs beloging to this folder will be excluded.",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "distinctBySelect",
              "in": "query",
              "description": "Return distinct attributes from task catalog for select query. Select param must have exactly 1 value if this is enabled",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskCatalogDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskCatalogs/UiPath.Server.Configuration.OData.ShareToFolders": {
        "post": {
          "tags": [
            "TaskCatalogs"
          ],
          "summary": "Makes the task catalogs visible in the specified folders.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequires authentication.",
          "operationId": "TaskCatalogs_ShareToFolders",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Object containing the ids of the task catalogs and the ids of the folders where it should be shared.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCatalogFoldersShareDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "404": {
              "description": "One of the specified entities does not exist.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskDefinitions": {
        "get": {
          "tags": [
            "TaskDefinitions"
          ],
          "summary": "Gets Task Definition objects with the given OData queries.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: ActionDesign.View.",
          "operationId": "TaskDefinitions_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskDefinitions({key})": {
        "get": {
          "tags": [
            "TaskDefinitions"
          ],
          "summary": "Gets a Task Definition item by Id.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: ActionDesign.View.",
          "operationId": "TaskDefinitions_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "id of the object",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDefinitionDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TaskDefinitions({key})/UiPath.Server.Configuration.OData.UpdateTaskDefinition": {
        "post": {
          "tags": [
            "TaskDefinitions"
          ],
          "summary": "Updates Task Definition.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: ActionDesign.Edit.",
          "operationId": "TaskDefinitions_UpdateTaskDefinitionById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Key of the object",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskDefinition to be updated",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Updated",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskDefinitions/UiPath.Server.Configuration.OData.CreateTaskDefinition": {
        "post": {
          "tags": [
            "TaskDefinitions"
          ],
          "summary": "Creates a new Task Definition.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: ActionDesign.Create.",
          "operationId": "TaskDefinitions_CreateTaskDefinition",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "The Task Definition to be created.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDefinitionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created response.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskNotes/UiPath.Server.Configuration.OData.CreateTaskNote": {
        "post": {
          "tags": [
            "TaskNotes"
          ],
          "summary": "Adds a task note.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "TaskNotes_CreateTaskNote",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The note to be created.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskNoteCreateRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskNoteDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TaskNotes/UiPath.Server.Configuration.OData.GetByTaskId(taskId={taskId})": {
        "get": {
          "tags": [
            "TaskNotes"
          ],
          "summary": "Gets Task Notes for a Task",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
          "operationId": "TaskNotes_GetByTaskId",
          "parameters": [
            {
              "name": "taskId",
              "in": "path",
              "description": "Id of the task",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskNoteDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Gets Task objects from classic folders with the given OData queries.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks({key})": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Gets a Task with the given primary key.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "The primary key of the Task to be retrieved.",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok result of Task object.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not found result.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.AssignTasks": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Assigns the tasks to given users.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_AssignTasks",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The json containing task and user Ids for assignment.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Update successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskOperationErrorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.DeleteTasks": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Deletes the tasks.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_DeleteTasks",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The json containing list of task ids for deletion.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskOperationErrorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.EditTaskMetadata": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Edits the metadata of a task",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_EditTaskMetadata",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/EditTaskMetadataRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Ok task successfully edited.",
              "content": {}
            },
            "404": {
              "description": "Not found result.",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.GetTaskPermissions": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Gets all the tasks related permissions for the logged in user on the folder in session",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_GetTaskPermissions",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfPermissionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.GetTasksAcrossFolders": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Gets Task objects across folders (including Modern folders) with the given OData queries.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_GetTasksAcrossFolders",
          "parameters": [
            {
              "name": "event",
              "in": "query",
              "description": "Operation performed on the task",
              "schema": {
                "type": "string",
                "enum": [
                  "ForwardedEver"
                ],
                "x-ms-enum": {
                  "name": "TaskEvent",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "TaskEvent",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.GetTasksAcrossFoldersForAdmin": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Gets Task objects across folders (including Modern folders) where the current user has task admin permissions, with the given OData query options",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_GetTasksAcrossFoldersForAdmin",
          "parameters": [
            {
              "name": "event",
              "in": "query",
              "description": "Operation performed on the task",
              "schema": {
                "type": "string",
                "enum": [
                  "ForwardedEver"
                ],
                "x-ms-enum": {
                  "name": "TaskEvent",
                  "modelAsString": false
                }
              },
              "x-ms-enum": {
                "name": "TaskEvent",
                "modelAsString": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Ok.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.GetTaskUsers(organizationUnitId={organizationUnitId})": {
        "get": {
          "tags": [
            "Tasks"
          ],
          "summary": "Gets users in given Organization Unit, who have Tasks.View and Tasks.Edit permissions",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View and Tasks.Edit.",
          "operationId": "Tasks_GetTaskUsersByOrganizationunitid",
          "parameters": [
            {
              "name": "organizationUnitId",
              "in": "path",
              "description": "organizationUnitId of the task",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfUserLoginInfoDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.ReassignTasks": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Reassigns the tasks to given users.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_ReassignTasks",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The json containing task and user Ids for reassignment.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksAssignRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Update successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskOperationErrorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tasks/UiPath.Server.Configuration.OData.UnassignTasks": {
        "post": {
          "tags": [
            "Tasks"
          ],
          "summary": "Unassigns the tasks from the users.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequires authentication.",
          "operationId": "Tasks_UnassignTasks",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The json containing list of task ids for un-assignments.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TasksDeleteRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Update successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTaskOperationErrorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tenants": {
        "get": {
          "tags": [
            "Tenants"
          ],
          "summary": "Gets tenants.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Tenants_Get",
          "parameters": [
            {
              "name": "skipLastLoginTime",
              "in": "query",
              "description": "Skips computation of last login time for an improved performance",
              "schema": {
                "type": "boolean",
                "default": false
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTenantDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Tenants"
          ],
          "summary": "Creates a tenant.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Tenants_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tenants({key})": {
        "get": {
          "tags": [
            "Tenants"
          ],
          "summary": "Gets a single tenant based on its id.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Read.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Tenants_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TenantDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "delete": {
          "tags": [
            "Tenants"
          ],
          "summary": "Deletes a tenant based on its id.",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Tenants_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Tenants"
          ],
          "summary": "Partially updates a tenant",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Tenants_PatchById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Tenants/UiPath.Server.Configuration.OData.SetActive": {
        "post": {
          "tags": [
            "Tenants"
          ],
          "summary": "Toggles the active status of tenants",
          "description": "OAuth required scopes: OR.Administration or OR.Administration.Write.\r\n\r\nHost only. Requires authentication.",
          "operationId": "Tenants_SetActive",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantSetActiveRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TestCaseDefinitions": {
        "get": {
          "tags": [
            "TestCaseDefinitions"
          ],
          "summary": "Returns a list of Test Case Definitions",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Read.\r\n\r\nRequired permissions: TestSets.View.\r\n\r\nResponses:\r\n200 Returns a list of Test Case Definitions filtered with queryOptions\r\n403 If the caller doesn't have permissions to view Test Case Definitions",
          "operationId": "TestCaseDefinitions_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of Test Case Definitions filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestCaseDefinitionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestCaseExecutions": {
        "get": {
          "tags": [
            "TestCaseExecutions"
          ],
          "summary": "Returns a list of Test Case Executions",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 Return a specific Test Case Execution identified by key\r\n403 If the caller doesn't have permissions to view Test Set Executions",
          "operationId": "TestCaseExecutions_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of Test Case Executions filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestCaseExecutionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestCaseExecutions({key})": {
        "get": {
          "tags": [
            "TestCaseExecutions"
          ],
          "summary": "Return a specific Test Case Execution identified by key",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 Return a specific Test Case Execution identified by key\r\n403 If the caller doesn't have permissions to view Test Set Executions\r\n404 If the test case execution is not found",
          "operationId": "TestCaseExecutions_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return a specific Test Case Execution identified by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestCaseExecutionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestDataQueueItems": {
        "get": {
          "tags": [
            "TestDataQueueItems"
          ],
          "summary": "Return a list of test data queue items",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Read.\r\n\r\nRequired permissions: TestDataQueueItems.View.\r\n\r\nResponses:\r\n200 Returns a list of test data queue items filtered with queryOptions\r\n403 If the caller doesn't have permissions to view test data queue items",
          "operationId": "TestDataQueueItems_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of test data queue items filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestDataQueueItemODataDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestDataQueueItems({key})": {
        "get": {
          "tags": [
            "TestDataQueueItems"
          ],
          "summary": "Return a specific test data queue item identified by key",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Read.\r\n\r\nRequired permissions: TestDataQueueItems.View.\r\n\r\nResponses:\r\n200 Returns a specific test data queue item identified by key\r\n403 If the caller doesn't have permissions to view test data queue items\r\n404 If the test data queue item is not found",
          "operationId": "TestDataQueueItems_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a specific test data queue item identified by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestDataQueueItemODataDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestDataQueues": {
        "get": {
          "tags": [
            "TestDataQueues"
          ],
          "summary": "Return a list of test data queues",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Read.\r\n\r\nRequired permissions: TestDataQueues.View.\r\n\r\nResponses:\r\n200 Returns a list of test data queues filtered with queryOptions\r\n403 If the caller doesn't have permissions to view test data queues",
          "operationId": "TestDataQueues_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of test data queues filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestDataQueueDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "TestDataQueues"
          ],
          "summary": "Create a new test data queue",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueues.Create.\r\n\r\nResponses:\r\n201 Returns the newly created test data queue\r\n403 If the caller doesn't have permissions to create test data queues\r\n409 If a queue with the same name already exists",
          "operationId": "TestDataQueues_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Returns the newly created test data queue",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestDataQueueDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TestDataQueues({key})": {
        "get": {
          "tags": [
            "TestDataQueues"
          ],
          "summary": "Return a specific test data queue identified by key",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Read.\r\n\r\nRequired permissions: TestDataQueues.View.\r\n\r\nResponses:\r\n200 Returns a specific test data queue identified by key\r\n403 If the caller doesn't have permissions to view test data queues\r\n404 If the test data queue is not found",
          "operationId": "TestDataQueues_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a specific test data queue identified by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestDataQueueDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "TestDataQueues"
          ],
          "summary": "Update an existing test data queue",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueues.Edit.\r\n\r\nResponses:\r\n200 Returns the updated test data queue\r\n403 If the caller doesn't have permissions to update test data queues\r\n409 If trying to change the queue name",
          "operationId": "TestDataQueues_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Id of the test data queue to be updated",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Update information",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestDataQueueDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Returns the updated test data queue",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestDataQueueDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "TestDataQueues"
          ],
          "summary": "Delete an existing test data queue",
          "description": "OAuth required scopes: OR.TestDataQueues or OR.TestDataQueues.Write.\r\n\r\nRequired permissions: TestDataQueues.Delete.\r\n\r\nResponses:\r\n204 The test data queue was deleted\r\n403 If the caller doesn't have permissions to delete test data queues",
          "operationId": "TestDataQueues_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "Id of the test data queue to be deleted",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestSetExecutions": {
        "get": {
          "tags": [
            "TestSetExecutions"
          ],
          "summary": "Returns a list of Test Set Executions cross-folder when no current folder is sent by header.\r\nIt will return Test Set Executions from folder where current user has TestSetExecutionsView.\r\nIf there is none, will return forbidden.",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 Returns a list of Test Set Executions filtered with queryOptions\r\n403 If the caller doesn't have permissions to view Test Set Executions",
          "operationId": "TestSetExecutions_Get",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; all permissions in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "description": "If in a cross-folder scenario, these represent the additional permissions\r\n            required in the folders the data is retrieved from; at least one permission in this set must be met",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of Test Set Executions filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestSetExecutionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestSetExecutions({key})": {
        "get": {
          "tags": [
            "TestSetExecutions"
          ],
          "summary": "Return a specific Test Set Execution identified by key",
          "description": "OAuth required scopes: OR.TestSetExecutions or OR.TestSetExecutions.Read.\r\n\r\nRequired permissions: TestSetExecutions.View.\r\n\r\nResponses:\r\n200 Return a specific Test Set Execution identified by key\r\n403 If the caller doesn't have permissions to view Test Set Executions\r\n404 It the test set execution is not found",
          "operationId": "TestSetExecutions_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return a specific Test Set Execution identified by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetExecutionDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestSets": {
        "get": {
          "tags": [
            "TestSets"
          ],
          "summary": "Returns a list of Test Sets cross-folder when no current folder is sent by header.\r\nIt will return Test Sets from folder where current user has TestSetsView.\r\nIf there is none, will return forbidden.",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Read.\r\n\r\nRequired permissions: TestSets.View.\r\n\r\nResponses:\r\n200 Returns a list of Test Sets filtered with queryOptions\r\n403 If the caller doesn't have permissions to view Test Sets",
          "operationId": "TestSets_Get",
          "parameters": [
            {
              "name": "mandatoryPermissions",
              "in": "query",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "atLeastOnePermissions",
              "in": "query",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of Test Sets filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestSetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "TestSets"
          ],
          "summary": "Creates a new Test Set",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Write.\r\n\r\nRequired permissions: TestSets.Create.\r\n\r\nResponses:\r\n201 Returns the newly created Test Set\r\n403 If the caller doesn't have permissions to create Test Sets",
          "operationId": "TestSets_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Returns the newly created Test Set",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TestSets({key})": {
        "get": {
          "tags": [
            "TestSets"
          ],
          "summary": "Return a specific Test Set identified by key",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Read.\r\n\r\nRequired permissions: TestSets.View.\r\n\r\nResponses:\r\n200 Return a specific Test Set identified by key\r\n403 If the caller doesn't have permissions to view Test Sets\r\n404 If the Test Set is not found",
          "operationId": "TestSets_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return a specific Test Set identified by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "TestSets"
          ],
          "summary": "Update an existing Test Set",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Write.\r\n\r\nRequired permissions: TestSets.Edit.\r\n\r\nResponses:\r\n200 Returns the updated Test Set\r\n403 If the caller doesn't have permissions to update Test Sets",
          "operationId": "TestSets_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "ID of the Test Set to be updated",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Update information",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "TestSets"
          ],
          "summary": "Delete a test set",
          "description": "OAuth required scopes: OR.TestSets or OR.TestSets.Write.\r\n\r\nRequired permissions: TestSets.Delete.\r\n\r\nResponses:\r\n204 The Test Set was deleted\r\n403 If the caller doesn't have permissions to delete Test Sets",
          "operationId": "TestSets_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "ID of the Test Set to delete",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestSetSchedules": {
        "get": {
          "tags": [
            "TestSetSchedules"
          ],
          "summary": "Returns a list of test set execution schedules",
          "description": "OAuth required scopes: OR.TestSetSchedules or OR.TestSetSchedules.Read.\r\n\r\nRequired permissions: TestSetSchedules.View.\r\n\r\nResponses:\r\n200 Returns a list of test set execution schedules filtered with queryOptions\r\n403 If the caller doesn't have permissions to view test set execution schedules",
          "operationId": "TestSetSchedules_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Returns a list of test set execution schedules filtered with queryOptions",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfTestSetScheduleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "TestSetSchedules"
          ],
          "summary": "Creates a new test set execution schedule",
          "description": "OAuth required scopes: OR.TestSetSchedules or OR.TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Create.\r\n\r\nResponses:\r\n201 Returns the newly created test set execution schedule\r\n403 If the caller doesn't have permissions to create test set execution schedules",
          "operationId": "TestSetSchedules_Post",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Returns the newly created test set execution schedule",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetScheduleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/TestSetSchedules({key})": {
        "get": {
          "tags": [
            "TestSetSchedules"
          ],
          "summary": "Return a specific test set execution schedule identified by key",
          "description": "OAuth required scopes: OR.TestSetSchedules or OR.TestSetSchedules.Read.\r\n\r\nRequired permissions: TestSetSchedules.View.\r\n\r\nResponses:\r\n200 Return a specific test set execution schedule identified by key\r\n403 If the caller doesn't have permissions to view test set execution schedules\r\n404 It the test set execution schedule is not found",
          "operationId": "TestSetSchedules_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return a specific test set execution schedule identified by key",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetScheduleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "TestSetSchedules"
          ],
          "summary": "Update an existing test set execution schedule",
          "description": "OAuth required scopes: OR.TestSetSchedules or OR.TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Edit.\r\n\r\nResponses:\r\n201 Returns the updated test set execution schedule\r\n403 If the caller doesn't have permissions to update test set execution schedules",
          "operationId": "TestSetSchedules_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "ID of the test set execution schedule to be updated",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "Update information",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetScheduleDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TestSetScheduleDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "TestSetSchedules"
          ],
          "summary": "Delete an existing test set execution schedule",
          "description": "OAuth required scopes: OR.TestSetSchedules or OR.TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Delete.\r\n\r\nResponses:\r\n204 The test set execution schedule was deleted\r\n403 If the caller doesn't have permissions to delete test set execution schedules",
          "operationId": "TestSetSchedules_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "description": "ID of the test set execution schedule to be deleted",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/TestSetSchedules/UiPath.Server.Configuration.OData.SetEnabled": {
        "post": {
          "tags": [
            "TestSetSchedules"
          ],
          "summary": "Enables / disables a list of test set execution schedules.",
          "description": "OAuth required scopes: OR.TestSetSchedules or OR.TestSetSchedules.Write.\r\n\r\nRequired permissions: TestSetSchedules.Edit.",
          "operationId": "TestSetSchedules_SetEnabled",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />enabled: if true the test set schedules will be enabled, if false they will be disabled.\r\n            <para />scheduleIds: the ids of the test set schedules to be enabled or disabled.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSetSchedulesEnabledRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfBoolean"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Gets users.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Users.View.",
          "operationId": "Users_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfUserDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Creates a new user.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Create.",
          "operationId": "Users_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Gets a user based on its id.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequires authentication.",
          "operationId": "Users_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Users"
          ],
          "summary": "Edits a user.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Edit or Robots.Create or Robots.Edit or Robots.Delete.",
          "operationId": "Users_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Users"
          ],
          "summary": "Deletes a user.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Delete.",
          "operationId": "Users_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Users"
          ],
          "summary": "Partially updates a user.\r\nCannot update roles or organization units via this endpoint.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequires authentication.",
          "operationId": "Users_PatchById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})/UiPath.Server.Configuration.OData.AssignRoles": {
        "post": {
          "tags": [
            "Users"
          ],
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Edit or Users.Create.",
          "operationId": "Users_AssignRolesById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAssignRolesRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})/UiPath.Server.Configuration.OData.ChangePassword": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Changes the password of the user.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.",
          "operationId": "Users_ChangePasswordById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />CurrentPassword - The current password of the user.\r\n            <para />NewPassword - Then new password of the user.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangePasswordDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})/UiPath.Server.Configuration.OData.ChangeUserCulture": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Changes the culture for the specified user",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
          "operationId": "Users_ChangeUserCultureById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})/UiPath.Server.Configuration.OData.SetActive": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Activate or deactivate a user",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
          "operationId": "Users_SetActiveById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersSetActiveRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})/UiPath.Server.Configuration.OData.ToggleOrganizationUnit": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Associates/dissociates the given user with/from an organization unit based on toggle parameter.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
          "operationId": "Users_ToggleOrganizationUnitById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />Toggle - States whether to associate or to dissociate the organization unit with/from the user.\r\n            <para />OrganizationUnitId - The id of the organization unit to be associated/dissociated.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleOrganizationUnitRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users({key})/UiPath.Server.Configuration.OData.ToggleRole": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Associates/dissociates the given user with/from a role based on toggle parameter.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequired permissions: Users.Edit.",
          "operationId": "Users_ToggleRoleById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "<para />Toggle - States whether to associate or to dissociate the role with/from the user.\r\n            <para />Role - The name of the role to be associated/dissociated.",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersToggleRoleRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users/UiPath.Server.Configuration.OData.ChangeCulture": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Changes the culture for the current user",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.\r\n\r\nRequires authentication.",
          "operationId": "Users_ChangeCulture",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserChangeCultureRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentPermissions": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Returns a user permission collection containing data about the current user and all the permissions it has.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequires authentication.",
          "operationId": "Users_GetCurrentPermissions",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserPermissionsCollection"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Users/UiPath.Server.Configuration.OData.GetCurrentUser": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Returns details about the user currently logged into Orchestrator.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.",
          "operationId": "Users_GetCurrentUser",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Users/UiPath.Server.Configuration.OData.UpdatePassword": {
        "post": {
          "tags": [
            "Users"
          ],
          "summary": "Updates the user password for the provided Username and Tenancy Name.\r\nThis endpoint is intended to be used via API to update the first login password.",
          "description": "OAuth required scopes: OR.Users or OR.Users.Write.",
          "operationId": "Users_UpdatePassword",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserPasswordDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "User password successfully updated.",
              "content": {}
            },
            "400": {
              "description": "Invalid authentication credentials.",
              "content": {}
            }
          },
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Users/UiPath.Server.Configuration.OData.Validate(userIds=[{userIds}])": {
        "get": {
          "tags": [
            "Users"
          ],
          "summary": "Validates if the robots for the given users are busy",
          "description": "OAuth required scopes: OR.Users or OR.Users.Read.\r\n\r\nRequired permissions: Users.View.",
          "operationId": "Users_ValidateByUserids",
          "parameters": [
            {
              "name": "userIds",
              "in": "path",
              "description": "The Id of the users to check",
              "required": true,
              "style": "simple",
              "explode": false,
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIDictionaryOfInt64Boolean"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Webhooks": {
        "get": {
          "tags": [
            "Webhooks"
          ],
          "summary": "List webhooks",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Read.\r\n\r\nRequired permissions: Webhooks.View.",
          "operationId": "Webhooks_Get",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$top",
              "in": "query",
              "description": "Limits the number of items returned from a collection. The maximum value is 1000.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$skip",
              "in": "query",
              "description": "Excludes the specified number of items of the queried collection from the result.",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfWebhookDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "post": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Create a new webhook subscription",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Create.",
          "operationId": "Webhooks_Post",
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Webhooks({key})": {
        "get": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Gets a single webhook",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Read.\r\n\r\nRequired permissions: Webhooks.View.",
          "operationId": "Webhooks_GetById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "put": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Update an existing webhook subscription",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Edit.",
          "operationId": "Webhooks_PutById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        },
        "delete": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Delete a webhook subscription",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Delete.",
          "operationId": "Webhooks_DeleteById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        },
        "patch": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Patches a webhook",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.Edit.",
          "operationId": "Webhooks_PatchById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              },
              "application/*+json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookDto"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WebhookDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/odata/Webhooks({key})/UiPath.Server.Configuration.OData.Ping": {
        "post": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Sends a Ping request to webhook endpoint.\r\nUsed for testing connectivity and availability of target URL",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.View.",
          "operationId": "Webhooks_PingById",
          "parameters": [
            {
              "name": "key",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PingEventDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Webhooks/UiPath.Server.Configuration.OData.GetEventTypes": {
        "get": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Gets the list of event types a webhook can subscribe to",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Read.\r\n\r\nRequired permissions: Webhooks.View.",
          "operationId": "Webhooks_GetEventTypes",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$filter",
              "in": "query",
              "description": "Restricts the set of items returned. The maximum number of expressions is 100.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$orderby",
              "in": "query",
              "description": "Specifies the order in which items are returned. The maximum number of expressions is 5.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$count",
              "in": "query",
              "description": "Indicates whether the total count of items within a collection are returned in the result.",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ODataValueOfIEnumerableOfWebhookEventTypeDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/odata/Webhooks/UiPath.Server.Configuration.OData.TriggerCustom": {
        "post": {
          "tags": [
            "Webhooks"
          ],
          "summary": "Triggers an event of type \"custom\"",
          "description": "OAuth required scopes: OR.Webhooks or OR.Webhooks.Write.\r\n\r\nRequired permissions: Webhooks.View.",
          "operationId": "Webhooks_TriggerCustom",
          "parameters": [
            {
              "name": "$expand",
              "in": "query",
              "description": "Indicates the related entities to be represented inline. The maximum depth is 2.",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "$select",
              "in": "query",
              "description": "Limits the properties returned in the result.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Any custom event data payload",
            "content": {
              "application/json;odata.metadata=minimal;odata.streaming=true": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=minimal;odata.streaming=false": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=minimal": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=full;odata.streaming=true": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=full;odata.streaming=false": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=full": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=none;odata.streaming=true": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=none;odata.streaming=false": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.metadata=none": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.streaming=true": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json;odata.streaming=false": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/json-patch+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              },
              "application/*+json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            },
            "required": false
          },
          "responses": {
            "202": {
              "description": "Accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CustomEventDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/AppTasks/CompleteAppTask": {
        "post": {
          "tags": [
            "AppTasks"
          ],
          "summary": "Complete the task by saving app task data and action taken",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "AppTasks_CompleteAppTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskCompletionRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCompletionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/AppTasks/CreateAppTask": {
        "post": {
          "tags": [
            "AppTasks"
          ],
          "summary": "Creates a new App Task.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Create.",
          "operationId": "AppTasks_CreateAppTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The app task to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppTasksCreateRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppTasksDataDto"
                  }
                }
              }
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/AppTasks/GetAppTaskById": {
        "get": {
          "tags": [
            "AppTasks"
          ],
          "summary": "Returns dto to render app task",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
          "operationId": "AppTasks_GetAppTaskById",
          "parameters": [
            {
              "name": "taskId",
              "in": "query",
              "description": "Task id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AppTasksDataDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/tasks/AppTasks/SaveAndReassignAppTasks": {
        "post": {
          "tags": [
            "AppTasks"
          ],
          "summary": "Save changes done by the current user and Reassign Task to another user",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "AppTasks_SaveAndReassignAppTasks",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskSaveAndReassignmentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSaveAndReassignmentRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/AppTasks/SaveAppTasksData": {
        "put": {
          "tags": [
            "AppTasks"
          ],
          "summary": "Save task data",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "AppTasks_SaveAppTasksData",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskDataSaveRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDataSaveRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/GenericTasks/CompleteTask": {
        "post": {
          "tags": [
            "GenericTasks"
          ],
          "summary": "Complete the task by saving task data and action taken",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "GenericTasks_CompleteTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskCompletionRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCompletionRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/GenericTasks/CreateTask": {
        "post": {
          "tags": [
            "GenericTasks"
          ],
          "summary": "Creates a new Generic Task.",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Create.",
          "operationId": "GenericTasks_CreateTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "The task to be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCreateRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDataDto"
                  }
                }
              }
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/GenericTasks/GetTaskDataById": {
        "get": {
          "tags": [
            "GenericTasks"
          ],
          "summary": "Returns task data dto",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Read.\r\n\r\nRequired permissions: Tasks.View.",
          "operationId": "GenericTasks_GetTaskDataById",
          "parameters": [
            {
              "name": "taskId",
              "in": "query",
              "description": "Task id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/TaskDataDto"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ]
        }
      },
      "/tasks/GenericTasks/SaveAndReassignTask": {
        "post": {
          "tags": [
            "GenericTasks"
          ],
          "summary": "Save changes done by the current user and Reassign Task to another user",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "GenericTasks_SaveAndReassignTask",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskSaveAndReassignmentRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSaveAndReassignmentRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/GenericTasks/SaveTaskData": {
        "put": {
          "tags": [
            "GenericTasks"
          ],
          "summary": "Save Task data",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "GenericTasks_SaveTaskData",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskDataSaveRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskDataSaveRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      },
      "/tasks/GenericTasks/SaveTaskTags": {
        "put": {
          "tags": [
            "GenericTasks"
          ],
          "summary": "Save tags for a task",
          "description": "OAuth required scopes: OR.Tasks or OR.Tasks.Write.\r\n\r\nRequired permissions: Tasks.Edit.",
          "operationId": "GenericTasks_SaveTaskTags",
          "parameters": [
            {
              "name": "X-UIPATH-OrganizationUnitId",
              "in": "header",
              "description": "Folder/OrganizationUnit Id",
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          ],
          "requestBody": {
            "description": "TaskTagsSaveRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskTagsSaveRequest"
                }
              }
            },
            "required": false
          },
          "responses": {
            "204": {
              "description": "No Content",
              "content": {}
            },
            "400": {
              "description": "Bad Request",
              "content": {}
            },
            "404": {
              "description": "Not Found",
              "content": {}
            }
          },
          "security": [
            {
              "OAuth2": []
            }
          ],
          "x-codegen-request-body-name": "body"
        }
      }
    },
    "components": {
      "schemas": {
        "AccessibleFoldersDto": {
          "type": "object",
          "properties": {
            "AccessibleFolders": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SimpleFolderDto"
              }
            },
            "TotalFoldersCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "ActivitySettingsDto": {
          "type": "object",
          "properties": {
            "ApiVersion": {
              "type": "string",
              "description": "Current Orchestrator api version"
            },
            "SignalR": {
              "$ref": "#/components/schemas/SignalRActivitySettingsDto"
            }
          },
          "description": "Activity settings"
        },
        "AddQueueItemRequest": {
          "required": [
            "itemData"
          ],
          "type": "object",
          "properties": {
            "itemData": {
              "$ref": "#/components/schemas/QueueItemDataDto"
            }
          }
        },
        "AjaxResponse": {
          "type": "object",
          "properties": {
            "result": {
              "type": "object"
            },
            "targetUrl": {
              "type": "string"
            },
            "success": {
              "type": "boolean"
            },
            "error": {
              "$ref": "#/components/schemas/ErrorInfo"
            },
            "unAuthorizedRequest": {
              "type": "boolean"
            },
            "__abp": {
              "type": "boolean",
              "readOnly": true
            }
          }
        },
        "AlertDto": {
          "required": [
            "Severity"
          ],
          "type": "object",
          "properties": {
            "NotificationName": {
              "type": "string",
              "description": "The name of a specific type of notification, e.g. Robot.StatusChanged.NotResponding."
            },
            "Data": {
              "type": "string",
              "description": "Stores data about the context in which the event occurred, in JSON format."
            },
            "Component": {
              "type": "string",
              "description": "The component that raised the alert.",
              "enum": [
                "Robots",
                "Transactions",
                "Schedules",
                "Jobs",
                "Process",
                "Tasks",
                "Queues",
                "Folders",
                "PersonalWorkspaces",
                "TestAutomation",
                "Insights",
                "CloudRobots",
                "ConnectedTriggers",
                "Serverless",
                "Export"
              ],
              "x-ms-enum": {
                "name": "AlertDtoComponent",
                "modelAsString": false
              }
            },
            "Severity": {
              "type": "string",
              "description": "The severity level of the alert.",
              "enum": [
                "Info",
                "Success",
                "Warn",
                "Error",
                "Fatal"
              ],
              "x-ms-enum": {
                "name": "AlertDtoSeverity",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the alert was generated.",
              "format": "date-time"
            },
            "State": {
              "type": "string",
              "description": "Defines if a specified notification has been read or not.\r\n<para />Members: Unread (0) - the specified notification has not been marked as read; Read (1) - the specified notification has been marked as read.",
              "enum": [
                "Unread",
                "Read"
              ],
              "x-ms-enum": {
                "name": "AlertDtoState",
                "modelAsString": false
              }
            },
            "UserNotificationId": {
              "type": "string",
              "description": "The database unique identifier for the alert notification sent to the current user.",
              "format": "uuid"
            },
            "DeepLinkRelativeUrl": {
              "type": "string",
              "description": "Relative deep link for front-end usage.\r\ne.g /alerts/deeplink/{alert_title}?{alert_param1}={alert_param1_value}&{alert_param2}={alert_param2_value}"
            },
            "Id": {
              "type": "string",
              "format": "uuid"
            }
          },
          "description": "Stores notification data used to inform the users about specific application events."
        },
        "AlertsMarkAsReadRequest": {
          "required": [
            "ids"
          ],
          "type": "object",
          "properties": {
            "ids": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        },
        "AppTasksCreateRequest": {
          "required": [
            "appId",
            "appVersion",
            "taskDefinitionId",
            "title"
          ],
          "type": "object",
          "properties": {
            "taskDefinitionId": {
              "type": "integer",
              "description": "Id for associated task definition",
              "format": "int64"
            },
            "taskDefinitionVersion": {
              "type": "integer",
              "description": "Version of Task Definition to get associated properties",
              "format": "int32"
            },
            "appId": {
              "maxLength": 34,
              "minLength": 1,
              "type": "string",
              "description": "Id representing AppId for AppTask"
            },
            "appVersion": {
              "type": "integer",
              "description": "Version of App for AppTask",
              "format": "int32"
            },
            "type": {
              "type": "string",
              "description": "Gets or sets type of this task, allowed type is 'ExternalTask'.",
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "TaskCreateRequestType",
                "modelAsString": false
              }
            },
            "title": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseTaskCreateRequestPriority",
                "modelAsString": false
              }
            },
            "data": {
              "type": "object",
              "description": "Task data"
            },
            "taskCatalogName": {
              "maxLength": 50,
              "type": "string",
              "description": "Gets or sets the task catalog/category of the task"
            },
            "externalTag": {
              "maxLength": 128,
              "type": "string",
              "description": "Reference or name of external system"
            },
            "tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          },
          "description": "Class with only attributes needed for Creating Task (TaskType = TaskType.AppTask)"
        },
        "AppTasksDataDto": {
          "type": "object",
          "properties": {
            "appTasksMetadata": {
              "$ref": "#/components/schemas/AppTasksMetadataDto"
            },
            "status": {
              "type": "string",
              "description": "Task status",
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "TaskDataDtoStatus",
                "modelAsString": false
              }
            },
            "data": {
              "type": "object",
              "description": "Task form data json"
            },
            "action": {
              "type": "string",
              "description": "Task form action"
            },
            "waitJobState": {
              "type": "string",
              "description": "State of the job(if any) waiting on the current task",
              "enum": [
                "Pending",
                "Running",
                "Stopping",
                "Terminating",
                "Faulted",
                "Successful",
                "Stopped",
                "Suspended",
                "Resumed"
              ],
              "x-ms-enum": {
                "name": "TaskDataDtoWaitJobState",
                "modelAsString": false
              }
            },
            "organizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "Fully qualified folder name"
            },
            "tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "assignedToUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "title": {
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "type": {
              "type": "string",
              "description": "Gets or sets type of this task.",
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoType",
                "modelAsString": false
              }
            },
            "priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoPriority",
                "modelAsString": false
              }
            },
            "assignedToUserId": {
              "type": "integer",
              "description": "Gets the id of the actual assigned user, if any.",
              "format": "int64"
            },
            "organizationUnitId": {
              "type": "integer",
              "description": "Gets or sets the folder/organization-unit id.",
              "format": "int64"
            },
            "externalTag": {
              "type": "string",
              "description": "Identifier of external system where this task is handled"
            },
            "creatorJobKey": {
              "type": "string",
              "description": "Key of the job which created this task",
              "format": "uuid"
            },
            "waitJobKey": {
              "type": "string",
              "description": "Key job which is waiting on this task",
              "format": "uuid"
            },
            "lastAssignedTime": {
              "type": "string",
              "description": "Datetime when task was last assigned.",
              "format": "date-time"
            },
            "completionTime": {
              "type": "string",
              "description": "Datetime when task was completed.",
              "format": "date-time"
            },
            "isDeleted": {
              "type": "boolean"
            },
            "deleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "deletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            },
            "creatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto with attributes required for App Task"
        },
        "AppTasksMetadataDto": {
          "type": "object",
          "properties": {
            "appId": {
              "type": "string",
              "description": "Associated App Id for App Tasks"
            },
            "appVersion": {
              "type": "integer",
              "description": "Associated App Version for App Tasks",
              "format": "int32"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            },
            "creatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ArgumentMetadata": {
          "type": "object",
          "properties": {
            "Input": {
              "type": "string"
            },
            "Output": {
              "type": "string"
            }
          }
        },
        "AssetCreatedEvent": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "assetType": {
              "type": "string",
              "description": "Defines what type of value is stored by an asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "AssetCreatedEventAssetType",
                "modelAsString": false
              }
            },
            "assetScope": {
              "type": "string",
              "description": "Defines the visibility level of an asset.",
              "enum": [
                "Global",
                "PerRobot"
              ],
              "x-ms-enum": {
                "name": "AssetCreatedEventAssetScope",
                "modelAsString": false
              }
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "folderKeys": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "AssetDeletedEvent": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "assetType": {
              "type": "string",
              "description": "Defines what type of value is stored by an asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "AssetDeletedEventAssetType",
                "modelAsString": false
              }
            },
            "assetScope": {
              "type": "string",
              "description": "Defines the visibility level of an asset.",
              "enum": [
                "Global",
                "PerRobot"
              ],
              "x-ms-enum": {
                "name": "AssetDeletedEventAssetScope",
                "modelAsString": false
              }
            },
            "folderKeys": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "AssetDto": {
          "required": [
            "Name",
            "ValueScope"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "An unique identifier",
              "format": "uuid"
            },
            "Name": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string",
              "description": "A custom name for the asset."
            },
            "CanBeDeleted": {
              "type": "boolean",
              "description": "States if an assets can be deleted. The default value of this property is true."
            },
            "ValueScope": {
              "type": "string",
              "description": "Defines the scope of the asset.",
              "enum": [
                "Global",
                "PerRobot"
              ],
              "x-ms-enum": {
                "name": "AssetDtoValueScope",
                "modelAsString": false
              }
            },
            "ValueType": {
              "type": "string",
              "description": "Defines the type of value stored by the asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "AssetDtoValueType",
                "modelAsString": false
              }
            },
            "Value": {
              "type": "string",
              "description": "The textual representation of the asset value, irrespective of value type."
            },
            "StringValue": {
              "maxLength": 1000000,
              "type": "string",
              "description": "The value of the asset when the value type is Text. Empty when the value type is not Text."
            },
            "BoolValue": {
              "type": "boolean",
              "description": "The value of the asset when the value type is Bool. False when the value type is not Bool."
            },
            "IntValue": {
              "type": "integer",
              "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
              "format": "int32"
            },
            "CredentialUsername": {
              "maxLength": 512,
              "type": "string",
              "description": "The user name when the value type is Credential. Empty when the value type is not Credential."
            },
            "CredentialPassword": {
              "maxLength": 25000,
              "type": "string",
              "description": "The password when the value type is Credential. Empty when the value type is not Credential."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the credentials."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the credentials.",
              "format": "int64"
            },
            "KeyValueList": {
              "type": "array",
              "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
              "items": {
                "$ref": "#/components/schemas/CustomKeyValuePair"
              }
            },
            "HasDefaultValue": {
              "type": "boolean",
              "description": "The asset has a default value set. This value will be null when set from legacy components that don't support\r\nthe PerRobot assets with default value feature."
            },
            "Description": {
              "maxLength": 250,
              "type": "string",
              "description": "The description of the asset."
            },
            "RobotValues": {
              "type": "array",
              "description": "The collection of asset values per robot. Empty if the asset type is Global or PerUser.",
              "items": {
                "$ref": "#/components/schemas/AssetRobotValueDto"
              }
            },
            "UserValues": {
              "type": "array",
              "description": "The collection of asset values per user. Empty if the asset type is Global or PerRobot.",
              "items": {
                "$ref": "#/components/schemas/AssetUserValueDto"
              }
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "FoldersCount": {
              "type": "integer",
              "description": "Number of folders where the asset is shared.",
              "format": "int32"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores specific data so that robots can easily have access to it."
        },
        "AssetFoldersShareDto": {
          "type": "object",
          "properties": {
            "AssetIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToAddFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToRemoveFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "AssetRobotValueDto": {
          "type": "object",
          "properties": {
            "RobotId": {
              "type": "integer",
              "description": "The Id of the robot with which the asset is associated.",
              "format": "int64"
            },
            "RobotName": {
              "type": "string",
              "description": "The name of the robot with which the asset is associated."
            },
            "KeyTrail": {
              "type": "string",
              "description": "Masked value of the robot key."
            },
            "ValueType": {
              "type": "string",
              "description": "Defines the type of value stored by the asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "AssetRobotValueDtoValueType",
                "modelAsString": false
              }
            },
            "StringValue": {
              "maxLength": 1000000,
              "type": "string",
              "description": "The value of the asset when the value type is Text. Empty when the value type is not Text."
            },
            "BoolValue": {
              "type": "boolean",
              "description": "The value of the asset when the value type is Bool. False when the value type is not Bool."
            },
            "IntValue": {
              "type": "integer",
              "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
              "format": "int32"
            },
            "Value": {
              "type": "string",
              "description": "The textual representation of the asset value, irrespective of value type."
            },
            "CredentialUsername": {
              "type": "string",
              "description": "The user name when the value type is Credential. Empty when the value type is not Credential."
            },
            "CredentialPassword": {
              "type": "string",
              "description": "The password when the value type is Credential. Empty when the value type is not Credential."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the credentials."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the credentials.",
              "format": "int64"
            },
            "KeyValueList": {
              "type": "array",
              "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
              "items": {
                "$ref": "#/components/schemas/CustomKeyValuePair"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores the value of an asset associated with a robot as well as the robot association data."
        },
        "AssetUpdatedEvent": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "assetType": {
              "type": "string",
              "description": "Defines what type of value is stored by an asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "AssetUpdatedEventAssetType",
                "modelAsString": false
              }
            },
            "assetScope": {
              "type": "string",
              "description": "Defines the visibility level of an asset.",
              "enum": [
                "Global",
                "PerRobot"
              ],
              "x-ms-enum": {
                "name": "AssetUpdatedEventAssetScope",
                "modelAsString": false
              }
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "folderKeys": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "AssetUserValueDto": {
          "type": "object",
          "properties": {
            "UserId": {
              "type": "integer",
              "description": "The Id of the user with which the asset is associated.",
              "format": "int64"
            },
            "UserName": {
              "type": "string",
              "description": "The name of the user which the asset is associated."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the machine which the asset is associated",
              "format": "int64"
            },
            "MachineName": {
              "type": "string",
              "description": "The name of the machine which the asset is associated."
            },
            "ValueType": {
              "type": "string",
              "description": "Defines the type of value stored by the asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "AssetUserValueDtoValueType",
                "modelAsString": false
              }
            },
            "StringValue": {
              "maxLength": 1000000,
              "type": "string",
              "description": "The value of the asset when the value type is Text. Empty when the value type is not Text."
            },
            "BoolValue": {
              "type": "boolean",
              "description": "The value of the asset when the value type is Bool. False when the value type is not Bool."
            },
            "IntValue": {
              "type": "integer",
              "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
              "format": "int32"
            },
            "Value": {
              "type": "string",
              "description": "The textual representation of the asset value, irrespective of value type."
            },
            "CredentialUsername": {
              "type": "string",
              "description": "The user name when the value type is Credential. Empty when the value type is not Credential."
            },
            "CredentialPassword": {
              "type": "string",
              "description": "The password when the value type is Credential. Empty when the value type is not Credential."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the credentials.",
              "format": "int64"
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the credentials."
            },
            "KeyValueList": {
              "type": "array",
              "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
              "items": {
                "$ref": "#/components/schemas/CustomKeyValuePair"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores the value of an asset associated with a user."
        },
        "AssetsGetRobotByNameAndKeyRequest": {
          "required": [
            "assetName",
            "robotKey"
          ],
          "type": "object",
          "properties": {
            "robotKey": {
              "minLength": 1,
              "type": "string"
            },
            "assetName": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "AssetsSetRobotAssetsByKeyRequest": {
          "required": [
            "robotAsset",
            "robotKey"
          ],
          "type": "object",
          "properties": {
            "robotKey": {
              "minLength": 1,
              "type": "string"
            },
            "robotAsset": {
              "$ref": "#/components/schemas/RobotAssetDto"
            }
          }
        },
        "AttendedRobotDto": {
          "type": "object",
          "properties": {
            "UserName": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The UserName used to authenticate on the Host Machine."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "An object containing execution settings for the Robot."
            },
            "RobotId": {
              "type": "integer",
              "description": "The actual Id of the provisioned Robot.",
              "format": "int64"
            },
            "RobotType": {
              "type": "string",
              "description": "The actual Type of the provisioned Robot.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "AttendedRobotDtoRobotType",
                "modelAsString": false
              }
            }
          }
        },
        "AuditLogDto": {
          "type": "object",
          "properties": {
            "ServiceName": {
              "type": "string",
              "description": "The name of the Orchestrator service that performed a given action in the system."
            },
            "MethodName": {
              "type": "string",
              "description": "The name of the service method that performed a given action in the system."
            },
            "Parameters": {
              "type": "string",
              "description": "JSON representation of the method parameters and their values for the given action."
            },
            "ExecutionTime": {
              "type": "string",
              "description": "The date and time when the action was performed.",
              "format": "date-time"
            },
            "Action": {
              "type": "string",
              "description": "The action performed (create, update, delete etc)",
              "enum": [
                "Unknown",
                "Create",
                "Update",
                "Delete",
                "StartJob",
                "StopJob",
                "Associate",
                "Upload",
                "ChangeStatus",
                "Import",
                "ChangePassword",
                "Register",
                "Toggle",
                "ResetPassword",
                "PasswordResetAttempt",
                "Download",
                "Acknowledge",
                "Activate",
                "Assign",
                "BulkUpload",
                "UpdateFeature",
                "ResumeJob",
                "Start",
                "End",
                "Skip",
                "Unassign",
                "Deactivate",
                "CreateBlobFileSas",
                "DeleteBlobFile",
                "Move",
                "Set",
                "StartDelete",
                "ExploreStart",
                "ExploreEnd",
                "Save",
                "Convert",
                "Forward",
                "BulkComplete",
                "BulkSave",
                "ForceStopJob",
                "MigrateFolder",
                "EditTaskMetadata",
                "Archive",
                "StartMigrateFolders",
                "ToggleUserFolderSubscription",
                "StartUninstall",
                "StartInstall",
                "VideoAccess",
                "AutomaticallyExploreEnd",
                "InstallState",
                "FinishInstall",
                "FinishUninstall"
              ],
              "x-ms-enum": {
                "name": "AuditLogDtoAction",
                "modelAsString": false
              }
            },
            "Component": {
              "type": "string",
              "description": "The component for which the action was performed",
              "enum": [
                "Unknown",
                "Assets",
                "Environments",
                "Processes",
                "Queues",
                "Robots",
                "Roles",
                "Schedules",
                "Users",
                "Comments",
                "Units",
                "Jobs",
                "Settings",
                "Packages",
                "License",
                "Tenant",
                "Machines",
                "Libraries",
                "Webhooks",
                "ExecutionMedia",
                "Monitoring",
                "CredentialStores",
                "DefaultCredentialStores",
                "TaskCatalogs",
                "Tasks",
                "Maintenance",
                "Folders",
                "DirectoryService",
                "Buckets",
                "DataRetentionPolicies",
                "TenantMove",
                "Secrets",
                "PersonalWorkspaces",
                "CloudSubscriptions",
                "CloudSnapshots",
                "Sessions",
                "CredentialsProxies",
                "StudioWeb",
                "AutomationSolutions",
                "RemoteControl",
                "TaskSolutions",
                "TaskDefinitions",
                "TestSets",
                "TestSetSchedules",
                "TestDataQueues",
                "TestDataQueueItems"
              ],
              "x-ms-enum": {
                "name": "AuditLogDtoComponent",
                "modelAsString": false
              }
            },
            "DisplayName": {
              "type": "string",
              "description": "The display name of the resource acted on, usually Name"
            },
            "EntityId": {
              "type": "integer",
              "description": "The Id of the resource acted on",
              "format": "int64"
            },
            "OperationText": {
              "type": "string",
              "description": "User friendly description of the change, e.g. \"User X created robot Y\""
            },
            "UserName": {
              "type": "string",
              "description": "UserName that sent the request"
            },
            "UserType": {
              "type": "string",
              "description": "The type of user that sent the request",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "AuditLogDtoUserType",
                "modelAsString": false
              }
            },
            "Entities": {
              "type": "array",
              "description": "Audit entity details collection",
              "items": {
                "$ref": "#/components/schemas/AuditLogEntityDto"
              }
            },
            "ExternalClientId": {
              "type": "string",
              "description": "External client identifier. Example: OAuth 3rd party app identifier that called Orchestrator."
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            },
            "UserIsDeleted": {
              "type": "boolean",
              "description": "Marks whether the users that did the action was deleted in the meantime"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores audit information about any action performed in Orchestrator."
        },
        "AuditLogEntityDto": {
          "type": "object",
          "properties": {
            "AuditLogId": {
              "type": "integer",
              "description": "Business audit entry that triggered the changes",
              "format": "int64"
            },
            "CustomData": {
              "type": "string",
              "description": "Data about the old/new/included values"
            },
            "EntityId": {
              "type": "integer",
              "description": "The Id of the referred entity",
              "format": "int64"
            },
            "EntityName": {
              "type": "string",
              "description": "The name of the entity the auditLog refers to"
            },
            "Action": {
              "type": "string",
              "description": "The action (created, updated, deleted etc)",
              "enum": [
                "Unknown",
                "Create",
                "Update",
                "Delete",
                "StartJob",
                "StopJob",
                "Associate",
                "Upload",
                "ChangeStatus",
                "Import",
                "ChangePassword",
                "Register",
                "Toggle",
                "ResetPassword",
                "PasswordResetAttempt",
                "Download",
                "Acknowledge",
                "Activate",
                "Assign",
                "BulkUpload",
                "UpdateFeature",
                "ResumeJob",
                "Start",
                "End",
                "Skip",
                "Unassign",
                "Deactivate",
                "CreateBlobFileSas",
                "DeleteBlobFile",
                "Move",
                "Set",
                "StartDelete",
                "ExploreStart",
                "ExploreEnd",
                "Save",
                "Convert",
                "Forward",
                "BulkComplete",
                "BulkSave",
                "ForceStopJob",
                "MigrateFolder",
                "EditTaskMetadata",
                "Archive",
                "StartMigrateFolders",
                "ToggleUserFolderSubscription",
                "StartUninstall",
                "StartInstall",
                "VideoAccess",
                "AutomaticallyExploreEnd",
                "InstallState",
                "FinishInstall",
                "FinishUninstall"
              ],
              "x-ms-enum": {
                "name": "AuditLogEntityDtoAction",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores audit information about any action performed in Orchestrator."
        },
        "BlobFileAccessDto": {
          "type": "object",
          "properties": {
            "Uri": {
              "type": "string"
            },
            "Verb": {
              "type": "string"
            },
            "RequiresAuth": {
              "type": "boolean"
            },
            "Headers": {
              "$ref": "#/components/schemas/ResponseDictionaryDto"
            }
          }
        },
        "BlobFileDto": {
          "type": "object",
          "properties": {
            "FullPath": {
              "type": "string"
            },
            "ContentType": {
              "type": "string"
            },
            "Size": {
              "type": "integer",
              "format": "int64"
            },
            "IsDirectory": {
              "type": "boolean"
            },
            "Id": {
              "type": "string"
            }
          }
        },
        "BucketDto": {
          "required": [
            "Identifier",
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "description": "Display name of the Bucket"
            },
            "Description": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string",
              "description": "Description of the Bucket"
            },
            "Identifier": {
              "type": "string",
              "description": "A stable unique identifier",
              "format": "uuid"
            },
            "StorageProvider": {
              "type": "string",
              "description": "Provider Name.\r\nOtherwise one of the supported providers:\r\n- FileSystem\r\n- Azure\r\n- Amazon\r\n- Minio\r\n- S3Compatible\r\nLeave null for built-in Orchestrator host provider."
            },
            "StorageParameters": {
              "type": "string",
              "description": "Provider specific initialization parameters.\r\nUse a $Password for where the password should be inserted.\r\nLeave null for built-in Orchestrator host provider."
            },
            "StorageContainer": {
              "type": "string",
              "description": "Provider specific Container name (AWS, WASB).\r\nLeave null for built-in Orchestrator host provider."
            },
            "Options": {
              "type": "string",
              "description": "Bucket options",
              "enum": [
                "None",
                "ReadOnly",
                "AuditReadAccess",
                "AccessDataThroughOrchestrator"
              ],
              "x-ms-enum": {
                "name": "BucketDtoOptions",
                "modelAsString": false
              }
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "Credential store used to keep the provider access password.\r\nLeave null for built-in Orchestrator host provider.",
              "format": "int64"
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The external name of the password in the credential store.\r\nIf null, it defaults to the bucket name.\r\nLeave null for built-in Orchestrator host provider."
            },
            "Password": {
              "type": "string",
              "description": "Provider specific password/secret.\r\nIt is inserted as a replacement of the $Password token in the StorageParameters.\r\nLeave null for built-in Orchestrator host provider."
            },
            "FoldersCount": {
              "type": "integer",
              "description": "Number of folders where the bucket is shared.",
              "format": "int32"
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "BucketFoldersShareDto": {
          "type": "object",
          "properties": {
            "BucketIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToAddFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToRemoveFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "BuildTestSetRequestMessage": {
          "required": [
            "releaseId",
            "versionNumber"
          ],
          "type": "object",
          "properties": {
            "releaseId": {
              "type": "integer",
              "format": "int64"
            },
            "versionNumber": {
              "minLength": 1,
              "type": "string"
            },
            "testCaseUniqueIds": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "enableCoverage": {
              "type": "boolean"
            }
          }
        },
        "BulkAddQueueItemsRequest": {
          "required": [
            "commitType",
            "queueName"
          ],
          "type": "object",
          "properties": {
            "queueName": {
              "minLength": 1,
              "type": "string"
            },
            "commitType": {
              "type": "string",
              "enum": [
                "AllOrNothing",
                "StopOnFirstFailure",
                "ProcessAllIndependently"
              ],
              "x-ms-enum": {
                "name": "BulkAddQueueItemsRequestCommitType",
                "modelAsString": false
              }
            },
            "queueItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueItemDataDto"
              }
            }
          }
        },
        "BulkItemDtoOfString": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            },
            "Status": {
              "type": "string",
              "enum": [
                "Continue",
                "SwitchingProtocols",
                "Processing",
                "EarlyHints",
                "OK",
                "Created",
                "Accepted",
                "NonAuthoritativeInformation",
                "NoContent",
                "ResetContent",
                "PartialContent",
                "MultiStatus",
                "AlreadyReported",
                "IMUsed",
                "MultipleChoices",
                "Ambiguous",
                "MovedPermanently",
                "Moved",
                "Found",
                "Redirect",
                "SeeOther",
                "RedirectMethod",
                "NotModified",
                "UseProxy",
                "Unused",
                "TemporaryRedirect",
                "RedirectKeepVerb",
                "PermanentRedirect",
                "BadRequest",
                "Unauthorized",
                "PaymentRequired",
                "Forbidden",
                "NotFound",
                "MethodNotAllowed",
                "NotAcceptable",
                "ProxyAuthenticationRequired",
                "RequestTimeout",
                "Conflict",
                "Gone",
                "LengthRequired",
                "PreconditionFailed",
                "RequestEntityTooLarge",
                "RequestUriTooLong",
                "UnsupportedMediaType",
                "RequestedRangeNotSatisfiable",
                "ExpectationFailed",
                "MisdirectedRequest",
                "UnprocessableEntity",
                "UnprocessableContent",
                "Locked",
                "FailedDependency",
                "UpgradeRequired",
                "PreconditionRequired",
                "TooManyRequests",
                "RequestHeaderFieldsTooLarge",
                "UnavailableForLegalReasons",
                "InternalServerError",
                "NotImplemented",
                "BadGateway",
                "ServiceUnavailable",
                "GatewayTimeout",
                "HttpVersionNotSupported",
                "VariantAlsoNegotiates",
                "InsufficientStorage",
                "LoopDetected",
                "NotExtended",
                "NetworkAuthenticationRequired"
              ],
              "x-ms-enum": {
                "name": "BulkItemDto`1Status",
                "modelAsString": false
              }
            },
            "Body": {
              "type": "string"
            }
          }
        },
        "BulkOperationErrorResponse": {
          "type": "object",
          "properties": {
            "taskId": {
              "type": "integer",
              "description": "Gets or sets the taskId for this task operation.",
              "format": "int64"
            },
            "errorCode": {
              "type": "integer",
              "description": "Gets or sets the code of error occurred during this task's operation.",
              "format": "int32"
            },
            "errorMessage": {
              "type": "string",
              "description": "Gets or sets the translated message of error occurred during this task's operation."
            }
          }
        },
        "BulkOperationResponseDtoOfFailedQueueItemDto": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "message": {
              "type": "string"
            },
            "failedItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FailedQueueItemDto"
              }
            }
          }
        },
        "BulkOperationResponseDtoOfInt64": {
          "type": "object",
          "properties": {
            "Success": {
              "type": "boolean"
            },
            "Message": {
              "type": "string"
            },
            "FailedItems": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "BulkTasksCompletionRequest": {
          "required": [
            "action",
            "data",
            "taskIds"
          ],
          "type": "object",
          "properties": {
            "action": {
              "minLength": 1,
              "type": "string",
              "description": "Action taken on this task"
            },
            "taskIds": {
              "type": "array",
              "description": "List of Task Ids which have to be Bulk edited",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "data": {
              "type": "object",
              "description": "Task data json"
            },
            "title": {
              "maxLength": 512,
              "type": "string",
              "description": "Title of tasks"
            },
            "taskCatalogId": {
              "type": "integer",
              "description": "Action Catalog to be associated with the tasks",
              "format": "int64"
            },
            "unsetTaskCatalog": {
              "type": "boolean",
              "description": "Unset/Unassociate action catalogs with the tasks\r\nSet to true for unassociating catalog"
            },
            "priority": {
              "type": "string",
              "description": "Priority of tasks",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BulkTasksDataUpdateRequestPriority",
                "modelAsString": false
              }
            },
            "noteText": {
              "maxLength": 512,
              "type": "string",
              "description": "Comment to be added while doing the bulk operation"
            }
          }
        },
        "BulkTasksDataUpdateRequest": {
          "required": [
            "data",
            "taskIds"
          ],
          "type": "object",
          "properties": {
            "taskIds": {
              "type": "array",
              "description": "List of Task Ids which have to be Bulk edited",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "data": {
              "type": "object",
              "description": "Task data json"
            },
            "title": {
              "maxLength": 512,
              "type": "string",
              "description": "Title of tasks"
            },
            "taskCatalogId": {
              "type": "integer",
              "description": "Action Catalog to be associated with the tasks",
              "format": "int64"
            },
            "unsetTaskCatalog": {
              "type": "boolean",
              "description": "Unset/Unassociate action catalogs with the tasks\r\nSet to true for unassociating catalog"
            },
            "priority": {
              "type": "string",
              "description": "Priority of tasks",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BulkTasksDataUpdateRequestPriority",
                "modelAsString": false
              }
            },
            "noteText": {
              "maxLength": 512,
              "type": "string",
              "description": "Comment to be added while doing the bulk operation"
            }
          }
        },
        "CalendarDto": {
          "type": "object",
          "properties": {
            "TimeZoneId": {
              "maxLength": 80,
              "type": "string"
            },
            "ExcludedDates": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        },
        "CalendarExistsRequest": {
          "required": [
            "calendarName"
          ],
          "type": "object",
          "properties": {
            "calendarName": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "ChangePasswordDto": {
          "type": "object",
          "properties": {
            "CurrentPassword": {
              "type": "string",
              "description": "Existing user password"
            },
            "NewPassword": {
              "type": "string",
              "description": "The new user password"
            }
          },
          "description": "Encapsulates information needed to change user password"
        },
        "CloudTemplateDto": {
          "properties": {
            "externalPoolKey": {
              "type": "string",
              "description": "The external pool associated with the machine.",
              "format": "uuid"
            },
            "hosting": {
              "type": "string",
              "description": "The Hosting type of the spec",
              "enum": [
                "Customer",
                "System"
              ],
              "x-ms-enum": {
                "name": "CloudTemplateDtoHosting",
                "modelAsString": false
              }
            }
          },
          "description": "The cloud template that hosts the Robot",
          "allOf": [
            {
              "$ref": "#/components/schemas/MachineDto"
            }
          ]
        },
        "ConfigurationEntry": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            },
            "DisplayName": {
              "type": "string"
            },
            "ValueType": {
              "type": "string",
              "enum": [
                "String",
                "Number",
                "Choice",
                "Boolean",
                "Section",
                "Secret",
                "SecretFile"
              ],
              "x-ms-enum": {
                "name": "ConfigurationEntryValueType",
                "modelAsString": false
              }
            }
          }
        },
        "ConsumptionLicenseDto": {
          "type": "object",
          "properties": {
            "reference": {
              "type": "string"
            },
            "type": {
              "type": "string"
            },
            "count": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ConsumptionLicenseStatsModel": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "used": {
              "type": "integer",
              "format": "int64"
            },
            "total": {
              "type": "integer",
              "format": "int64"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "CountStats": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "count": {
              "type": "integer",
              "format": "int64"
            },
            "hasPermissions": {
              "type": "boolean",
              "description": "Gives a more descriptive result when getting stats through the API (as opposed to -1 for the count)\r\nused only when serializing the count stats",
              "readOnly": true
            }
          }
        },
        "CredentialSetDefaultStoreForResourceTypeRequest": {
          "required": [
            "resourceType"
          ],
          "type": "object",
          "properties": {
            "resourceType": {
              "type": "string",
              "description": "This enum describes the type of resources that can be stored in the Credential Store. When\r\na new resource type is added, the default needs to be initialized in 3 places:\r\n1. Existing tenants: At migration time.\r\n2. Default tenant: At seed time in DefaultTenantCreator.cs.\r\n3. New tenants: In TenantService.cs.",
              "enum": [
                "AssetCredential",
                "RobotCredential",
                "BucketCredential",
                "Secrets"
              ],
              "x-ms-enum": {
                "name": "CredentialSetDefaultStoreForResourceTypeRequestResourceType",
                "modelAsString": false
              }
            }
          }
        },
        "CredentialStoreDetailsDto": {
          "type": "object",
          "properties": {
            "IsReadOnly": {
              "type": "boolean",
              "description": "Current store is read only"
            }
          },
          "description": "Details about credential store"
        },
        "CredentialStoreDto": {
          "required": [
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "ProxyId": {
              "type": "integer",
              "format": "int64"
            },
            "ProxyType": {
              "type": "string",
              "enum": [
                "Connected",
                "Disconnected"
              ],
              "x-ms-enum": {
                "name": "CredentialStoreDtoProxyType",
                "modelAsString": false
              }
            },
            "HostName": {
              "type": "string"
            },
            "Name": {
              "minLength": 1,
              "type": "string"
            },
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "AdditionalConfiguration": {
              "type": "string",
              "description": "Additional information specific to the type of the Credential Store."
            },
            "Details": {
              "$ref": "#/components/schemas/CredentialStoreDetailsDto"
            },
            "DefaultCredentialStores": {
              "type": "array",
              "description": "Default credential stores",
              "items": {
                "$ref": "#/components/schemas/DefaultCredentialStoreDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Defines the properties of a Credential Store."
        },
        "CredentialStoreResourceDto": {
          "required": [
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "minLength": 1,
              "type": "string"
            },
            "Type": {
              "type": "string",
              "description": "This enum describes the type of resources that can be stored in the Credential Store. When\r\na new resource type is added, the default needs to be initialized in 3 places:\r\n1. Existing tenants: At migration time.\r\n2. Default tenant: At seed time in DefaultTenantCreator.cs.\r\n3. New tenants: In TenantService.cs.",
              "enum": [
                "AssetCredential",
                "RobotCredential",
                "BucketCredential",
                "Secrets"
              ],
              "x-ms-enum": {
                "name": "CredentialStoreResourceDtoType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Defines the resources such as assets, robots or bucket for a Credential Store."
        },
        "CredentialsProxyResourceDto": {
          "required": [
            "CredentialStoreId",
            "CredentialStoreName",
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "minLength": 1,
              "type": "string"
            },
            "Type": {
              "type": "string",
              "description": "This enum describes the type of resources that can be affiliated to a Credentials Proxy.",
              "enum": [
                "AssetCredential",
                "RobotCredential",
                "BucketCredential",
                "Secrets",
                "CredentialStore"
              ],
              "x-ms-enum": {
                "name": "CredentialsProxyResourceDtoType",
                "modelAsString": false
              }
            },
            "CredentialStoreId": {
              "type": "integer",
              "format": "int64"
            },
            "CredentialStoreName": {
              "minLength": 1,
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Defines the resources such as credential stores, assets, robots or bucket for a Credentials Proxy."
        },
        "CustomEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "EventData": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "An event triggered by a robot Orchestrator activity",
          "x-webhook-event": "custom"
        },
        "CustomKeyValuePair": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "A piece of text representing the key."
            },
            "Value": {
              "type": "string",
              "description": "A piece of text representing the value."
            }
          },
          "description": "Stores a custom pair of key and value for assets with type KeyValueList."
        },
        "DeactivateLicenseRequest": {
          "type": "object",
          "properties": {
            "tenantId": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "DefaultCredentialStoreDto": {
          "required": [
            "ResourceType"
          ],
          "type": "object",
          "properties": {
            "ResourceType": {
              "type": "string",
              "description": "This enum describes the type of resources that can be stored in the Credential Store. When\r\na new resource type is added, the default needs to be initialized in 3 places:\r\n1. Existing tenants: At migration time.\r\n2. Default tenant: At seed time in DefaultTenantCreator.cs.\r\n3. New tenants: In TenantService.cs.",
              "enum": [
                "AssetCredential",
                "RobotCredential",
                "BucketCredential",
                "Secrets"
              ],
              "x-ms-enum": {
                "name": "DefaultCredentialStoreDtoResourceType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "DeleteInactiveSessionsParameters": {
          "type": "object",
          "properties": {
            "sessionIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "DirectoryObjectDto": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "User",
                "Group",
                "Machine",
                "Robot",
                "ExternalApplication"
              ],
              "x-ms-enum": {
                "name": "DirectoryObjectDtoType",
                "modelAsString": false
              }
            },
            "source": {
              "type": "string"
            },
            "domain": {
              "type": "string"
            },
            "identifier": {
              "type": "string"
            },
            "identityName": {
              "type": "string"
            },
            "displayName": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "DirectoryPermissionDto": {
          "type": "object",
          "properties": {
            "directoryGroup": {
              "type": "string"
            },
            "organizationUnits": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserOrganizationUnitDto"
              }
            },
            "roles": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LightRoleDto"
              }
            }
          }
        },
        "DomainDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "isDefault": {
              "type": "boolean"
            }
          }
        },
        "DomainUserAssignmentDto": {
          "type": "object",
          "properties": {
            "Domain": {
              "type": "string"
            },
            "UserName": {
              "type": "string"
            },
            "DirectoryIdentifier": {
              "type": "string"
            },
            "UserType": {
              "type": "string",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "DomainUserAssignmentDtoUserType",
                "modelAsString": false
              }
            },
            "RolesPerFolder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FolderRolesDto"
              }
            }
          }
        },
        "EditTaskMetadataRequest": {
          "required": [
            "TaskId"
          ],
          "type": "object",
          "properties": {
            "TaskId": {
              "type": "integer",
              "description": "Id of Task which have to be edited",
              "format": "int64"
            },
            "Title": {
              "maxLength": 512,
              "type": "string",
              "description": "Title of task"
            },
            "TaskCatalogId": {
              "type": "integer",
              "description": "Action Catalog to be associated with the task",
              "format": "int64"
            },
            "UnsetTaskCatalog": {
              "type": "boolean",
              "description": "Unset/Unassociate action catalogs with the task\r\nSet to true for unassociating catalog"
            },
            "Priority": {
              "type": "string",
              "description": "Priority of task",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "EditTaskMetadataRequestPriority",
                "modelAsString": false
              }
            },
            "NoteText": {
              "maxLength": 512,
              "type": "string",
              "description": "Comment to be added while doing the edit operation"
            }
          }
        },
        "EntryPointDataVariationDto": {
          "type": "object",
          "properties": {
            "Content": {
              "type": "string"
            },
            "ContentType": {
              "type": "string",
              "enum": [
                "Json"
              ],
              "x-ms-enum": {
                "name": "EntryPointDataVariationDtoContentType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "EntryPointDto": {
          "type": "object",
          "properties": {
            "UniqueId": {
              "type": "string",
              "format": "uuid"
            },
            "Path": {
              "type": "string"
            },
            "InputArguments": {
              "type": "string"
            },
            "OutputArguments": {
              "type": "string"
            },
            "DataVariation": {
              "$ref": "#/components/schemas/EntryPointDataVariationDto"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "EnvironmentDto": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "A custom name for the environment."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string",
              "description": "Used to add additional information about an environment in order to better identify it."
            },
            "Robots": {
              "type": "array",
              "description": "The collection of robots associated with the current environment.",
              "items": {
                "$ref": "#/components/schemas/SimpleRobotDto"
              }
            },
            "Type": {
              "type": "string",
              "description": "DEPRECATED. The environment type specifies how it should be used.\r\nThis property is deprecated and should no longer be used.",
              "enum": [
                "Dev",
                "Test",
                "Prod"
              ],
              "x-ms-enum": {
                "name": "EnvironmentDtoType",
                "modelAsString": false
              },
              "x-deprecated": true
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "A grouping of Robots."
        },
        "EnvironmentRobotRequest": {
          "required": [
            "robotId"
          ],
          "type": "object",
          "properties": {
            "robotId": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "EnvironmentsSetRobotsRequest": {
          "required": [
            "addedRobotIds",
            "removedRobotIds"
          ],
          "type": "object",
          "properties": {
            "addedRobotIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "removedRobotIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "ErrorInfo": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            },
            "details": {
              "type": "string"
            },
            "validationErrors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationErrorInfo"
              }
            }
          }
        },
        "ErrorResult": {
          "type": "object",
          "properties": {
            "Message": {
              "type": "string",
              "readOnly": true
            },
            "ErrorCode": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "TraceId": {
              "type": "string"
            },
            "ResourceIds": {
              "type": "array",
              "readOnly": true,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "ExecutionMediaDeleteMediaByJobIdRequest": {
          "required": [
            "jobId"
          ],
          "type": "object",
          "properties": {
            "jobId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ExecutionMediaDto": {
          "type": "object",
          "properties": {
            "StorageLocation": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            },
            "Name": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            },
            "JobId": {
              "type": "integer",
              "format": "int64"
            },
            "ReleaseName": {
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ExecutionSettingDefinition": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string"
            },
            "DisplayName": {
              "type": "string"
            },
            "ValueType": {
              "type": "string"
            },
            "DefaultValue": {
              "type": "string"
            },
            "PossibleValues": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ExecutionSettingsConfiguration": {
          "type": "object",
          "properties": {
            "Scope": {
              "type": "string",
              "enum": [
                "Global",
                "Robot"
              ],
              "x-ms-enum": {
                "name": "ExecutionSettingsConfigurationScope",
                "modelAsString": false
              }
            },
            "Configuration": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExecutionSettingDefinition"
              }
            }
          }
        },
        "ExportModel": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64"
            },
            "Name": {
              "type": "string"
            },
            "Type": {
              "type": "string",
              "enum": [
                "OrchestratorAudit",
                "TestAutomationAudit",
                "Queues",
                "Logs",
                "Jobs"
              ],
              "x-ms-enum": {
                "name": "ExportModelType",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "enum": [
                "New",
                "InProgress",
                "Completed",
                "Failed"
              ],
              "x-ms-enum": {
                "name": "ExportModelStatus",
                "modelAsString": false
              }
            },
            "RequestedAt": {
              "type": "string",
              "format": "date-time"
            },
            "ExecutedAt": {
              "type": "string",
              "format": "date-time"
            },
            "Size": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ExtendedCalendarDto": {
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 150,
              "type": "string"
            },
            "TimeZoneId": {
              "maxLength": 80,
              "type": "string"
            },
            "ExcludedDates": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "date-time"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ExtendedFolderDto": {
          "required": [
            "DisplayName"
          ],
          "type": "object",
          "properties": {
            "IsSelectable": {
              "type": "boolean",
              "description": "Determines whether this folder can be selected to view its entities"
            },
            "HasChildren": {
              "type": "boolean",
              "description": "True if this folder has children"
            },
            "Level": {
              "type": "integer",
              "description": "Level in the Folders tree.",
              "format": "int32"
            },
            "Key": {
              "type": "string",
              "description": "Unique key for the folder",
              "format": "uuid"
            },
            "DisplayName": {
              "maxLength": 115,
              "minLength": 1,
              "type": "string",
              "description": "Display name for the folder."
            },
            "FullyQualifiedName": {
              "type": "string",
              "description": "Name of folder prepended by the names of its ancestors."
            },
            "Description": {
              "maxLength": 500,
              "type": "string",
              "description": "Description of folder"
            },
            "FolderType": {
              "type": "string",
              "description": "Folder type",
              "enum": [
                "Standard",
                "Personal",
                "Virtual",
                "Solution"
              ],
              "x-ms-enum": {
                "name": "FolderDtoFolderType",
                "modelAsString": false
              }
            },
            "IsPersonal": {
              "type": "boolean",
              "description": "True if Personal",
              "readOnly": true
            },
            "ProvisionType": {
              "type": "string",
              "description": "Robot provisioning type",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "FolderDtoProvisionType",
                "modelAsString": false
              }
            },
            "PermissionModel": {
              "type": "string",
              "description": "Folder permissions model",
              "enum": [
                "InheritFromTenant",
                "FineGrained"
              ],
              "x-ms-enum": {
                "name": "FolderDtoPermissionModel",
                "modelAsString": false
              }
            },
            "ParentId": {
              "type": "integer",
              "description": "Id of parent folder in the folders hierarchy",
              "format": "int64"
            },
            "ParentKey": {
              "type": "string",
              "description": "Unique key for the parent folder",
              "format": "uuid"
            },
            "FeedType": {
              "type": "string",
              "description": "Folder feed type",
              "enum": [
                "Undefined",
                "Processes",
                "Libraries",
                "PersonalWorkspace",
                "FolderHierarchy"
              ],
              "x-ms-enum": {
                "name": "FolderDtoFeedType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ExtendedMachineDto": {
          "properties": {
            "UpdateInfo": {
              "$ref": "#/components/schemas/UpdateInfoDto"
            }
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/MachineDto"
            }
          ]
        },
        "ExtendedRobotDto": {
          "required": [
            "HostingType",
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "User": {
              "$ref": "#/components/schemas/UserDto"
            },
            "LicenseKey": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly."
            },
            "MachineName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the machine a Robot is hosted on",
              "format": "int64"
            },
            "Name": {
              "maxLength": 19,
              "minLength": 0,
              "type": "string",
              "description": "A custom name for the robot."
            },
            "Username": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the password."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string",
              "description": "Used to add additional information about a robot in order to better identify it."
            },
            "Type": {
              "type": "string",
              "description": "The Robot type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "RobotDtoType",
                "modelAsString": false
              }
            },
            "HostingType": {
              "type": "string",
              "description": "The Robot hosting type (Standard / Floating).",
              "enum": [
                "Standard",
                "Floating"
              ],
              "x-ms-enum": {
                "name": "RobotDtoHostingType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The Robot provision type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "RobotDtoProvisionType",
                "modelAsString": false
              }
            },
            "Password": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The Windows password associated with the machine username."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the password.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "The associated user's Id.",
              "format": "int64"
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator"
            },
            "CredentialType": {
              "type": "string",
              "description": "The robot credentials type (Default/ SmartCard)",
              "enum": [
                "Default",
                "SmartCard",
                "NCipher",
                "SafeNet",
                "NoCredential"
              ],
              "x-ms-enum": {
                "name": "RobotDtoCredentialType",
                "modelAsString": false
              }
            },
            "Environments": {
              "type": "array",
              "description": "The collection of environments the robot is part of.",
              "items": {
                "$ref": "#/components/schemas/EnvironmentDto"
              }
            },
            "RobotEnvironments": {
              "type": "string",
              "description": "The comma separated textual representation of environment names the robot is part of."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing execution settings for this robot."
            },
            "IsExternalLicensed": {
              "type": "boolean",
              "description": "Flag to indicate if the robot uses an external license"
            },
            "LimitConcurrentExecution": {
              "type": "boolean",
              "description": "Specifies if the robot can be used concurrently on multiple machines"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "FailedQueueItemDto": {
          "type": "object",
          "properties": {
            "Ordinal": {
              "type": "integer",
              "description": "Ordinal of the item that failed.\r\nA value of null means that offending item is unknown.",
              "format": "int32"
            },
            "ErrorCode": {
              "type": "string",
              "description": "Error code.",
              "enum": [
                "Unknown",
                "MultipleErrors",
                "InvalidODataRequest",
                "InvalidRequest",
                "NameAlreadyUsed",
                "ItemNotFound",
                "StringProtectFailed",
                "ItemAlreadyExists",
                "ErrorDeleting",
                "ErrorInserting",
                "ErrorUpdating",
                "ErrorSendingEmail",
                "InvalidArgument",
                "SqlAcquireLockFailure",
                "LibrariesFeedInUse",
                "HasDependentItems",
                "ItemIsInUse",
                "ParameterMissing",
                "ParameterInvalid",
                "DuplicateReference",
                "ForbiddenOperation",
                "InvalidUser",
                "FeatureDisabled",
                "OptimisticConcurrency",
                "EncryptionException",
                "CannotCreateOrMigrateTenantDb",
                "TenantIsRequired",
                "FieldNotEditable",
                "ServiceUnavailable",
                "SharedAccessSignatureFailure",
                "ProviderNotSupported",
                "EmailAlreadyUsed",
                "MaxSiblingsLimitReached",
                "InvalidAuditRelationship",
                "InvalidOrganizationUnit",
                "RequiredOrganizationUnit",
                "OrganizationUnitNotEditable",
                "NoOrganizationUnitWithPermissions",
                "MultipleOrganizationUnitsOnSession",
                "InvalidPermissionInCrossFolderRequest",
                "CannotCreateClassicEntities",
                "CannotEditClassicEntities",
                "RequiredPermissions",
                "CannotEditDuringMigration",
                "MachineAlreadyPairedWithDifferentLicenseKey",
                "NoAvailableLicenses",
                "HasAttachedRobots",
                "InvalidMachineKey",
                "MachineNameRequired",
                "UserNameRequired",
                "CannotDeleteBusyRobot",
                "MachineNameCannotChange",
                "MachineLicenseCannotChange",
                "CannotUpdateBusyRobot",
                "MachineTypeCannotChange",
                "UserNameInvalid",
                "SessionAlreadyActive",
                "CannotAssignMachineToFloatingRobot",
                "CannotUpdateRobotHostingType",
                "CannotAssignMachineTemplateToStandardRobot",
                "CannotUpdateActiveSession",
                "MachineTemplateUniqueLicenseKey",
                "InvalidMachineId",
                "InvalidNonProductionMachineSlots",
                "InvalidUnattendedMachineSlots",
                "DisconnectedRobot",
                "UnresponsiveRobot",
                "UnsupportedFloatingSessionRobotType",
                "UnsupportedStandardSessionRobotType",
                "RobotNotFoundUseInteractive",
                "MachineScopeProtected",
                "MachineKeyCannotChange",
                "TenantIdMismatch",
                "UserDoesNotHaveRobot",
                "RobotDisabled",
                "UnattendedRobotNotFound",
                "CannotPropagateMachineToSubfolders",
                "MachineRuntimeProtected",
                "IncompatibleOS",
                "IncompatibleRobotVersion",
                "MachineMaintenanceWindowDuration",
                "MachineMaintenanceTimeZoneId",
                "ClassicRobotNotFound",
                "ClassicRobotToUserMappingUsernameMissmatch",
                "UserMappedToRobotWithDifferentUsername",
                "RobotOnDifferentMachineMappedToSameUser",
                "ClassicRobotMappedToInvalidUser",
                "SameRobotUsernameMappedToDiferentUser",
                "ClassicCannotCleanNotFailedMigrations",
                "InvalidSlots",
                "RobotNotFoundByKey",
                "InvalidJobKey",
                "MachineSessionNotFound",
                "EnvironmentDeploymentConflict",
                "UnattendedRobotCredentialsNotFound",
                "ServerConflict",
                "ActionAlreadyPerformed",
                "UnavailableResources",
                "UserIsDeleted",
                "UserIsLockedOut",
                "ChangePassword",
                "PasswordExpired",
                "InvalidPassword",
                "CannotDeleteStaticRole",
                "UserNotEditable",
                "DomainUnreachable",
                "PasswordResetFailed",
                "ConfirmEmailFailed",
                "CannotUsePreviousPassword",
                "RoleIsNotEditable",
                "UserNotFoundInDomain",
                "CannotUpdateUsername",
                "InvalidLoginMethod",
                "InvalidUsernameOrPassword",
                "MultipleMatchingUsers",
                "CannotCallFromHost",
                "CreateNotAllowed",
                "ProvisionError",
                "EmptyDirectoryParam",
                "NotDirectoryUserOrGroup",
                "NoUsersFound",
                "CannotChangeRoleType",
                "InvalidTenantRole",
                "InvalidFolderRole",
                "HostTenantKeyNotFound",
                "CannotAssignFolderRolesToUser",
                "CannotAssignTenantRolesToFolder",
                "InvalidAuthenticationToken",
                "CannotDeleteLastAdmin",
                "CannotUnassignLastAdmin",
                "CannotInactivateLastAdmin",
                "UserNotInRole",
                "UserAlreadyInRole",
                "AdditionalPermissionsNotAllowed",
                "CredentialAssetEmptyPasswordForNewUser",
                "CredentialAssetEmptyForNewRobot",
                "AssetTypeNonUpdatable",
                "AssetNotAvailableForRobot",
                "AssetNotFound",
                "InvalidCron",
                "ScheduleWillNeverRun",
                "ScheduleMisfired",
                "InvalidScheduleKey",
                "ScheduleIsNotEnabled",
                "ScheduleNotAssociatedWithAQueue",
                "ScheduleCannotBeAssociatedWithAQueue",
                "UserIsAssignedToTriggers",
                "InvalidCronRecurrence",
                "DisabledDueToConsecutiveFailures",
                "MachineRobotHasAttachedTriggers",
                "UserHasAttachedTriggers",
                "MachineHasAttachedTriggers",
                "InvalidTimeZoneId",
                "DisabledDueToConsecutiveJobFailures",
                "DownloadUnavailable",
                "CannotConnectToPackagesRepository",
                "NotSupportedByExternalFeeds",
                "ErrorDownloading",
                "InvalidPackageDetails",
                "TenantFeedInUse",
                "InvalidProcessKey",
                "JobTypeCannotBeStopped",
                "JobCannotBeCancelled",
                "JobCannotBeTerminated",
                "VersionNotFound",
                "ProcessNotFound",
                "HasAttachedProcesses",
                "InvalidExtension",
                "InvalidPackageCount",
                "PreviousVersionNotFound",
                "HasRunningJobs",
                "TenantNotFound",
                "PendingJobsAlreadyExist",
                "InvalidStartJobRobotIds",
                "UnregisteredCannotStartJobs",
                "LicenseExpiredCannotStartJobs",
                "InvalidReleaseKey",
                "InvalidPackageVersion",
                "TenantIsDisabled",
                "PackageNotFound",
                "NoRobotsAvailable",
                "PathTooLong",
                "JobExecutionFaulted",
                "InvalidJobIdOrRobotKey",
                "InvalidJobStateForSuspend",
                "JobNotFoundByPersistenceId",
                "SuspendJobStateNotFound",
                "ErrorPackagePublish",
                "ErrorSavingPackageDefinition",
                "MaxNumberJobsAlreadyExist",
                "HasSlaEnabedQueuesAssociated",
                "VersionsManagedAutomatically",
                "InaccessibleFeed",
                "TestAutomationJobExecutionNotSupported",
                "TestAutomationProcessAlreadyExists",
                "CannotRestartUnfinishedJob",
                "CyberArkEditPasswordNotAllowed",
                "LogMessageNotFound",
                "LogRobotNameNotFound",
                "InvalidElasticQuery",
                "EncryptionKeyNotFound",
                "EncryptionKeyIncorrectFormat",
                "AzureKeyVaultRetrieveIssue",
                "AzureKeyVaultStoreIssue",
                "EncryptionKeyUnavailable",
                "TransactionReferenceRequired",
                "InvalidTransactionProgressStatus",
                "TransactionNotStarted",
                "ReviewerNotAvailable",
                "QueueDefinitionParametersCannotChange",
                "QueueProcessingApplicationException",
                "QueueItemSchemaViolationException",
                "InvalidQueueSchemaDefinition",
                "InvalidQueueSchemaDefinitionChange",
                "InvalidQueueSchemaType",
                "QueueSchemaDefinitionNotFound",
                "SlaEnableQueueDefinitionFailure",
                "QueueSlaAtPredictedRisk",
                "QueueSlaPredictedBreach",
                "QueueItemContentSizeExceeded",
                "QueueItemInvalidTransitionFromFinalStatus",
                "LicenseNotFound",
                "LicenseExpired",
                "LicenseAlreadyInUse",
                "InvalidLicenseFormat",
                "LicenseLimitExceeded",
                "UnattendedLicenseLimitExceeded",
                "NonProductionLicenseLimitExceeded",
                "AttendedLicenseLimitExceeded",
                "DevelopmentLicenseLimitExceeded",
                "RobotFailedToAcquireLicense",
                "NonProductionSlotsLimitExceeded",
                "UnattendedSlotsLimitExceeded",
                "LicenseUnregistered",
                "LicenseNotAvailable",
                "NotEnoughAvailableSlots",
                "NotEnoughRuntimeLicenses",
                "SlotsExceedLicenseLimit",
                "NotEnoughAvailableLicenses",
                "HostLicenseLimitExceeded",
                "NoHostLicense",
                "LicenseNewInvalidArguments",
                "LicenseMachineDisabled",
                "CannotDisableBusyMachine",
                "HeadlessSlotsLimitExceeded",
                "HeadlessLicenseLimitExceeded",
                "TestAutomationSlotsLimitExceeded",
                "TestAutomationLicenseLimitExceeded",
                "LicenseNotCompatible",
                "AutomationCloudLicenseLimitExceeded",
                "AutomationExpressNotSupported",
                "StudioWebLocalRobotNotSupported",
                "ArgumentMetadataExtract",
                "ArgumentMetadataValidation",
                "ArgumentDefinitionExtract",
                "ArgumentValueExtract",
                "ArgumentValidation",
                "PackageMetadataExtract",
                "PackageMetadataValidation",
                "ProjectTypeChangedOnUpload",
                "EntryPointUniqueIdsAlreadyUsed",
                "EntryPointNotValidForRelease",
                "EntryPointNotAllowedForTestAutomationRelease",
                "UnknownWebhookEventType",
                "WebhookQuotaReached",
                "WebhookDuplicateName",
                "ExecutionMediaStorageUnavailable",
                "ExecutionMediaNotAvailableForJob",
                "ExecutionMediaContentNotAvailable",
                "JobNotAssignedToRobot",
                "JobAssignedToDifferentRobot",
                "JobNotCompleted",
                "JobVideoRecordingNotEnabled",
                "QueueItemVideoRecordingNotEnabled",
                "CannotDeleteDefaultCredentialStore",
                "CredentialStoreNotFound",
                "UnknownCredentialStoreType",
                "InvalidCredentialStoreConfiguration",
                "FailedToReadFromCredentialStore",
                "FailedToWriteToCredentialStore",
                "CannotDeleteNonEmptyCredentialStore",
                "FailedToDeleteFromCredentialStore",
                "InvalidCredentialStoreType",
                "TaskAssignmentError",
                "TaskCompletionError",
                "TaskAssigneeMismatchError",
                "TaskFormInvalidFormLayout",
                "TaskFormInvalidFormPayload",
                "TaskFormMultipleActions",
                "TaskFormNoAction",
                "TaskFormInvalidAction",
                "TasksNotAllowedInModernFolder",
                "NoFolderExistAsTaskAdmin",
                "NoFolderExistAsTaskUser",
                "TaskAlreadyCompletedBySameUser",
                "TaskTypeMistmatch",
                "TaskNotAlreadyAssigned",
                "TaskAssigneeNotPermitted",
                "TaskAssignerNotPermitted",
                "DuplicateTaskAssignment",
                "TaskAlreadyAssignedToSameUser",
                "TaskAlreadyAssignedToAnotherUser",
                "TaskAlreadyCompletedByAnotherUser",
                "TaskSaveError",
                "TaskFormNoData",
                "TaskForwardError",
                "TaskFormSubmitButtonMissing",
                "TaskDeletionGenericError",
                "TaskAlreadyDeletedBySameUser",
                "TaskAlreadyDeletedByAnotherUser",
                "TaskDeleterNotPermitted",
                "DuplicateTaskDelete",
                "NoFolderExistsWithTaskCatalogView",
                "TaskCatalogMultipleDistinctColumn",
                "TaskCatalogDistinctColumnInvalid",
                "TaskFormLayoutAndIdMissing",
                "TaskFormDuplicateFormLayoutGuid",
                "TaskFormFormLayoutGuidNotFound",
                "TaskFormLayoutOrGuidMissing",
                "TaskFormLayoutAndIdBothNotSupported",
                "TaskFormLayoutIdNotFound",
                "TaskFormLayoutOutOfSize",
                "TaskCatalogHaveActiveTasks",
                "TasksBulkFormLayoutIdsNotSameOrNull",
                "EmptyTasksBulkOperationRequest",
                "TaskMaximumBulkOperationLimitExceeded",
                "TasksBulkOperationError",
                "TasksBulkOperationInvalidCatalog",
                "TasksBulkUpdateWithTaskCatalogAndUnsetIsInvalid",
                "EditTaskNotFound",
                "TasksEditMetadataWithTaskCatalogAndUnsetIsInvalid",
                "TasksEditMetadataOperationInvalidCatalog",
                "TasksEditMetadataCatalogInEncryptedTaskIsInvalid",
                "TaskCatalogNotFound",
                "TaskCatalogEncrypted",
                "TasksSummaryDateDiffOutOfRange",
                "TasksSummaryEndDateShouldBeGreater",
                "TaskDefinitionPropertiesRequired",
                "TaskDefinitionNotFound",
                "TaskDefinitionVersionNotFound",
                "AppTaskNoAction",
                "AppTaskInvalidPayload",
                "AppTaskNoData",
                "TaskProviderInvalidModifiedDate",
                "TaskProviderInvalidTaskUrn",
                "TaskDefinitionAllowedActionsRequired",
                "AppTaskDataItemViolatesContentJsonSchema",
                "TaskDefinitionSchemaNotAnObject",
                "TaskDefinitionNameIsAlreadyUsed",
                "InvalidSecureStoreContext",
                "MailSmtpSettingsError",
                "CannotDeleteCalendarWhenUsedBySchedule",
                "InvalidExternalUrl",
                "HostMailSmtpSettingsError",
                "MandatoryPropertiesForRootFolderNotSpecified",
                "IncompatibleFolderProperties",
                "NoHierarchyAllowedForClassicFolders",
                "MaximumFolderHierarchyDepthReached",
                "CannotChangeRobotProvisionType",
                "CannotChangeFolderPermissionModel",
                "CannotEditFolderParent",
                "EntitiesRequiredForAssignmentNotFound",
                "CannotAssignRolesToNonFineGrainedFolders",
                "InvalidFolderDisplayName",
                "AssociationAlreadyExists",
                "UserDoesNotHaveAccessToFolder",
                "CannotChangeRobotUserFolderAssignments",
                "CannotAssignMachineToClassicFolder",
                "StrategyNotAvailableInModernFolder",
                "StrategyNotAvailableInClassicFolder",
                "ValidModernFolderIdRequired",
                "NoMachineAssociatedWithFolder",
                "ClassicFoldersCannotBeInvolvedInMoveOperation",
                "CannotMoveToDescendantFolder",
                "CannotDisableTriggersInHierarchy",
                "CannotKillJobsInHierarchy",
                "CannotDeleteEntitiesInHierarchy",
                "NotInFinalStateJobsExist",
                "ModernFoldersCannotInheritRolesFromTenant",
                "CannotChangeFolderFeedType",
                "CannotCreatePersonalWorkspace",
                "CannotSetMachineRobots",
                "FolderNotFound",
                "CannotUnassignFromFolder",
                "MachineAssociatedWithFolderConflict",
                "CannotAssignMachineToFolder",
                "CannotAssignPersonalWorkspaceMachines",
                "CannotMoveFolder",
                "CannotMigrateClassicRelatedObjects",
                "NotSuccessfulEntityMigration",
                "FolderTypeMismatch",
                "ActionNotAllowedInClassicFolder",
                "CannotRenameSolutionFolder",
                "MaintenanceActive",
                "TenantMaintenanceActive",
                "TenantMaintenanceNotActive",
                "AnalyticsNotAuthorized",
                "AnalyticsTenantNotProvisioned",
                "AnalyticsUserIsHostUser",
                "AnalyticsUserHasNoEmail",
                "AnalyticsUserNotFound",
                "AnalyticsAdminEmailProhibited",
                "AnalyticsDbQueryFailure",
                "InvalidStorageProvider",
                "BucketIsReadOnly",
                "InvalidBlobFilePath",
                "UnavailableStorageProvider",
                "BucketDoesNotExists",
                "BucketSecretNotFoundInCredentialStore",
                "TestSetNotNewOnCreate",
                "TestAutomationKeyMismatch",
                "TestSetNewOnUpdate",
                "TestSetEmpty",
                "TestSetDuplicatePackages",
                "TestSetVersionMaskInvalid",
                "TestSetDefinitionNotFound",
                "TestSetTestCaseInvalid",
                "TestSetTestCaseVersionInvalid",
                "TestAutomationVersionInvalid",
                "TestSetExecutionEmptyTestSet",
                "TestSetExecutionCreateFailed",
                "TestSetExecutionDuplicateUniqueIds",
                "TestCaseAssertionScreenshotMimeTypeMissing",
                "TestCaseAssertionScreenshotMissing",
                "TestSetExecutionBatchExecutionKeyAlreadyExists",
                "TestDataQueueContentJsonSchemaInvalid",
                "TestDataQueueNameChangeNotAllowed",
                "TestDataQueueItemViolatesContentJsonSchema",
                "TestDataQueueItemsFromMultipleQueues",
                "TestDataQueueItemsBulkAddMixed",
                "TestDataQueueBulkOperationInProgress",
                "TestSetDuplicateInputArgument",
                "TestSetExecutionInvalidExecutionTarget",
                "AttachmentInvalid",
                "TestCasesReexecuteFailed",
                "TestSetTestCaseMissingReleaseVersion",
                "TestCaseDefinitionDuplicateIds",
                "TestCaseDefinitionInUse",
                "TestSetScheduleInvalidScheduleKey",
                "InvalidTenantMoveStatus",
                "TenantMoveIdConflict",
                "TenantMoveMigrationConflict",
                "MediaFileNotFound",
                "MediaFileNotFoundForKey",
                "InvalidMediaFilesUpload",
                "MediaFileTypeNotSupported",
                "CannotBeExploredByOwner",
                "AlreadyExploredByCurrentUser",
                "NotExploredCurrentUser",
                "CannotRemoveMachineFromPersonalWorkspace",
                "CannotToggleDebugMode",
                "CannotStartRemoteControl",
                "CannotStopRemoteControl",
                "CheckForUpdatesWithProductDuplicates",
                "AccountIdMissing",
                "AccountIdPartitionKeyMismatch",
                "IdentityKeyMissing",
                "InvalidDownloadUri",
                "InstallationIdMissing",
                "UpdateRequestRetryFailed",
                "InvalidProductVersion",
                "ProductVersionUpdateNotAllowed",
                "HostRetentionPolicyInvalidLicenseType",
                "TenantRetentionPolicyLicenseTypeNotSupported",
                "SWRobotCreationFailed",
                "SWRobotCreationNotEnabled",
                "SWPersonalWorkspaceCreationFailed",
                "SWPersonalWorkspacesNotEnabled",
                "SWMachineTemplateCreationFailed",
                "SWMachineTemplateAssignmentFailed",
                "SWMachineTemplateAssignmentMissingVirtualFolder",
                "SWRobotCreationNoLicense",
                "SWUserDoesNotHaveAnAttendedRobotOrProvisionNotEnabled",
                "SWUserInactive",
                "SWUserLicensingEnabledNoRobots",
                "SWUserLicensingEnabledRobotProvisionFailed",
                "SWUserLicensingEnabledAttendedLicense",
                "SWUserLicensingDisabledNoRobots",
                "SWUserLicensingDisabledRobotProvisionFailed",
                "SWUserLicensingDisabledAttendedLicense",
                "ConnectionsAvailableOnlyInPW",
                "ResourceOverwriteNotSupported",
                "ResourceNotOverwritable",
                "ResourceOverwriteNotSupportedInStandardFolders",
                "MultipleOverwritesForSameResourceKeyNotSupported",
                "PackageResourceNotFound",
                "InvalidConnectionId",
                "ConnectionNotFound",
                "InvalidConnectionType",
                "ConnectedEventTriggerNoConnection",
                "ConnectedEventTriggerCreateFailed",
                "ConnectedEventTriggerDeleteFailed",
                "MissingEventTriggerBinding",
                "VirtualTriggerCanNotHaveUser",
                "EventTriggerCreateFailedConnectionNotAvailable",
                "UserHasNoRobotToFireUserEventTrigger",
                "CredentialsProxyNotFound",
                "CannotDeleteCredentialsProxyInUse",
                "CredentialsProxyUrlMustBeHttps",
                "CredentialsProxyHostUrlUpdateRequiresSecretResubmission",
                "CredentialsProxyBadSecretFormat",
                "CredentialsProxyAuthHealthRequestFailed",
                "CredentialsProxyHealthRequestFailed",
                "CredentialsProxyRequestFailedInvalidCredentials",
                "CredentialsProxyConnectionRefused",
                "CredentialsProxyTypeCannotBeUpdated",
                "CredentialsProxyRequestFailedForbidden",
                "CredentialsProxyRequestFailedNotFound",
                "CredentialsProxyRequestFailedInternalServerError",
                "CredentialsProxyRequestFailedUnhandledError",
                "CredentialsProxyRequestFailedBadRequest",
                "CredentialsProxyTypeCannotBeCreated",
                "ServerlessCreateMachineTemplateErrorCode",
                "ServerlessUpdateMachineTemplateErrorCode",
                "ServerlessDeleteMachineTemplateErrorCode",
                "ServerlessUnkownActionMachineTemplateErrorCode",
                "ServerlessVpnInvalidCidr",
                "ServerlessVpnInvalidState",
                "ServerlessVpnNotFound",
                "ServerlessUnknownError",
                "ServerlessNoMachineTemplate",
                "ServerlessGenericWorkloadsNotEnabled",
                "ServerlessRobotJobTypeInvalid",
                "ServerlessServiceIsDisabledInTenant",
                "InvalidSolutionArchive",
                "CompatibilityCheckFail",
                "RollbackNotSupported",
                "SolutionsResourceNotFound",
                "SolutionsResourceNotSupported",
                "SolutionsResourcesNotFound",
                "FolderKeyRequired",
                "SolutionsCannotInstallInClassicFolder",
                "SolutionsCannotInstallInSolutionFolder",
                "SolutionIsNotInstallAtPath",
                "SolutionFolderNotFound",
                "SolutionFolderHasJobsNotInFinalState",
                "SolutionFileNotFound",
                "SolutionPackageUrlIsInvalid",
                "ExportTimeout",
                "InvalidMessageReceived",
                "IntegrationServiceApiFailure",
                "JobFaulted",
                "JobStopped",
                "JobUnknownFinalStatus",
                "ContentLengthTooLarge"
              ],
              "x-ms-enum": {
                "name": "FailedQueueItemDtoErrorCode",
                "modelAsString": false
              }
            },
            "ErrorMessage": {
              "type": "string",
              "description": "Error message."
            }
          },
          "description": "Stores the result of the BulkAddQueueItems operation."
        },
        "FolderAssignDomainUserRequest": {
          "required": [
            "assignment"
          ],
          "type": "object",
          "properties": {
            "assignment": {
              "$ref": "#/components/schemas/DomainUserAssignmentDto"
            }
          }
        },
        "FolderAssignMachinesRequest": {
          "required": [
            "assignments"
          ],
          "type": "object",
          "properties": {
            "assignments": {
              "$ref": "#/components/schemas/MachineAssignmentsDto"
            }
          }
        },
        "FolderAssignUsersRequest": {
          "required": [
            "assignments"
          ],
          "type": "object",
          "properties": {
            "assignments": {
              "$ref": "#/components/schemas/UserAssignmentsDto"
            }
          }
        },
        "FolderAssignmentsDto": {
          "type": "object",
          "properties": {
            "Folder": {
              "$ref": "#/components/schemas/SimpleFolderDto"
            },
            "Roles": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoleUsersDto"
              }
            }
          }
        },
        "FolderCreatedEvent": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "displayName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "fullyQualifiedName": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "Standard",
                "Personal",
                "Virtual",
                "Solution"
              ],
              "x-ms-enum": {
                "name": "FolderCreatedEventType",
                "modelAsString": false
              }
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "FolderDeletedEvent": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "FolderDto": {
          "required": [
            "DisplayName"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "Unique key for the folder",
              "format": "uuid"
            },
            "DisplayName": {
              "maxLength": 115,
              "minLength": 1,
              "type": "string",
              "description": "Display name for the folder."
            },
            "FullyQualifiedName": {
              "type": "string",
              "description": "Name of folder prepended by the names of its ancestors."
            },
            "Description": {
              "maxLength": 500,
              "type": "string",
              "description": "Description of folder"
            },
            "FolderType": {
              "type": "string",
              "description": "Folder type",
              "enum": [
                "Standard",
                "Personal",
                "Virtual",
                "Solution"
              ],
              "x-ms-enum": {
                "name": "FolderDtoFolderType",
                "modelAsString": false
              }
            },
            "IsPersonal": {
              "type": "boolean",
              "description": "True if Personal",
              "readOnly": true
            },
            "ProvisionType": {
              "type": "string",
              "description": "Robot provisioning type",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "FolderDtoProvisionType",
                "modelAsString": false
              }
            },
            "PermissionModel": {
              "type": "string",
              "description": "Folder permissions model",
              "enum": [
                "InheritFromTenant",
                "FineGrained"
              ],
              "x-ms-enum": {
                "name": "FolderDtoPermissionModel",
                "modelAsString": false
              }
            },
            "ParentId": {
              "type": "integer",
              "description": "Id of parent folder in the folders hierarchy",
              "format": "int64"
            },
            "ParentKey": {
              "type": "string",
              "description": "Unique key for the parent folder",
              "format": "uuid"
            },
            "FeedType": {
              "type": "string",
              "description": "Folder feed type",
              "enum": [
                "Undefined",
                "Processes",
                "Libraries",
                "PersonalWorkspace",
                "FolderHierarchy"
              ],
              "x-ms-enum": {
                "name": "FolderDtoFeedType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "FolderMachineInheritDto": {
          "type": "object",
          "properties": {
            "MachineId": {
              "type": "integer",
              "format": "int64"
            },
            "FolderId": {
              "type": "integer",
              "format": "int64"
            },
            "InheritEnabled": {
              "type": "boolean"
            }
          }
        },
        "FolderNavigationContextDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64"
            },
            "DisplayName": {
              "type": "string"
            },
            "IsSelectable": {
              "type": "boolean"
            },
            "IsPersonal": {
              "type": "boolean"
            },
            "ProvisionType": {
              "type": "string",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "FolderNavigationContextDtoProvisionType",
                "modelAsString": false
              }
            },
            "Ancestors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SimpleFolderDto"
              }
            },
            "ChildrenPage": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtendedFolderDto"
              }
            },
            "ChildrenCount": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "FolderRolesDto": {
          "type": "object",
          "properties": {
            "FolderId": {
              "type": "integer",
              "format": "int64"
            },
            "RoleIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          },
          "description": "Association between a folder and a set of roles."
        },
        "FolderUpdatedEvent": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "displayName": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "code": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "fullyQualifiedName": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "Standard",
                "Personal",
                "Virtual",
                "Solution"
              ],
              "x-ms-enum": {
                "name": "FolderUpdatedEventType",
                "modelAsString": false
              }
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "FormTaskCreateRequest": {
          "required": [
            "title"
          ],
          "type": "object",
          "properties": {
            "formLayout": {
              "type": "object",
              "description": "Text representing the form layout schema"
            },
            "formLayoutId": {
              "type": "integer",
              "description": "Unique FormLayoutId for a form layout",
              "format": "int64"
            },
            "bulkFormLayoutId": {
              "type": "integer",
              "description": "Unique BulkFormLayoutId for a form layout",
              "format": "int64"
            },
            "title": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseTaskCreateRequestPriority",
                "modelAsString": false
              }
            },
            "data": {
              "type": "object",
              "description": "Task data"
            },
            "taskCatalogName": {
              "maxLength": 50,
              "type": "string",
              "description": "Gets or sets the task catalog/category of the task"
            },
            "externalTag": {
              "maxLength": 128,
              "type": "string",
              "description": "Reference or name of external system"
            },
            "tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          },
          "description": "Class with only attributes needed for Creating Task (TaskType = TaskType.FormTask)"
        },
        "HostAvailabilityDto": {
          "type": "object",
          "properties": {
            "canConnect": {
              "type": "boolean",
              "description": "Target host is reachable and a succesful TCP connection could be made on the specified port"
            },
            "hasBadSsl": {
              "type": "boolean",
              "description": "Any error occurred during SSL/TLS authentication.\r\nIncludes bad certificates (name mismatch, expired certificates), unsupported protocol versions or cyphersuites"
            },
            "connectionError": {
              "type": "string",
              "description": "An error code that further describes the type of connection error.\r\nDoes not include TLS/SSL errors"
            }
          }
        },
        "HostDeleteTenantLicenseRequest": {
          "required": [
            "tenantId"
          ],
          "type": "object",
          "properties": {
            "tenantId": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "HostLicenseDto": {
          "type": "object",
          "properties": {
            "TenantsCount": {
              "type": "integer",
              "description": "The number of tenants licensed from this license file",
              "format": "int32"
            },
            "Id": {
              "type": "integer",
              "description": "License Id",
              "format": "int64"
            },
            "ExpireDate": {
              "type": "integer",
              "description": "License expiration date in Epoch format",
              "format": "int64"
            },
            "GracePeriodEndDate": {
              "type": "integer",
              "description": "License grace period end date in Epoch format",
              "format": "int64"
            },
            "GracePeriod": {
              "type": "integer",
              "description": "Number of grace period days",
              "format": "int64"
            },
            "VersionControl": {
              "type": "string",
              "description": "The product version which can use this license"
            },
            "Allowed": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              },
              "description": "Contains the number of allowed licenses for each type"
            },
            "Used": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              },
              "description": "Contains the number of used licenses for each type"
            },
            "AttendedConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Attended Concurrent"
            },
            "DevelopmentConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Development Concurrent"
            },
            "StudioXConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Studio Business Concurrent"
            },
            "StudioProConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Studio Pro Concurrent"
            },
            "LicensedFeatures": {
              "type": "array",
              "description": "What features are licensed (valid for individually-licensed features, like Analytics)",
              "items": {
                "type": "string"
              }
            },
            "IsRegistered": {
              "type": "boolean",
              "description": "True if the current tenant is registered with a license. False otherwise."
            },
            "IsCommunity": {
              "type": "boolean",
              "description": "True if the current tenant is registered with a community license."
            },
            "IsProOrEnterprise": {
              "type": "boolean",
              "description": "True if the current tenant is registered with a pro license."
            },
            "SubscriptionCode": {
              "type": "string",
              "description": "The license subscription code"
            },
            "SubscriptionPlan": {
              "type": "string",
              "description": "The license subscription plan"
            },
            "IsExpired": {
              "type": "boolean",
              "description": "States whether the license is still valid or not."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date when the license was uploaded.",
              "format": "date-time"
            },
            "Code": {
              "type": "string",
              "description": "The license code."
            },
            "UserLicensingEnabled": {
              "type": "boolean",
              "description": "Whether user licensing is enabled or not."
            }
          },
          "description": "Stores information about the host license used to activate one or more tenants."
        },
        "HostLicensePerTenantDto": {
          "type": "object",
          "properties": {
            "TenantId": {
              "type": "integer",
              "description": "The tenant's Id",
              "format": "int32"
            },
            "HostLicenseId": {
              "type": "integer",
              "description": "The host license's Id",
              "format": "int64"
            }
          },
          "additionalProperties": {
            "type": "object"
          }
        },
        "HostSetTenantLicenseRequest": {
          "required": [
            "license"
          ],
          "type": "object",
          "properties": {
            "license": {
              "$ref": "#/components/schemas/HostLicensePerTenantDto"
            }
          }
        },
        "JobCompletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a job has completed successfully",
          "x-webhook-event": "job.completed"
        },
        "JobDto": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "The unique job identifier.",
              "format": "uuid"
            },
            "StartTime": {
              "type": "string",
              "description": "The date and time when the job execution started or null if the job hasn't started yet.",
              "format": "date-time"
            },
            "EndTime": {
              "type": "string",
              "description": "The date and time when the job execution ended or null if the job hasn't ended yet.",
              "format": "date-time"
            },
            "State": {
              "type": "string",
              "description": "The state in which the job is.",
              "enum": [
                "Pending",
                "Running",
                "Stopping",
                "Terminating",
                "Faulted",
                "Successful",
                "Stopped",
                "Suspended",
                "Resumed"
              ],
              "x-ms-enum": {
                "name": "JobDtoState",
                "modelAsString": false
              }
            },
            "JobPriority": {
              "type": "string",
              "description": "Execution priority.",
              "enum": [
                "Low",
                "Normal",
                "High"
              ],
              "x-ms-enum": {
                "name": "JobDtoJobPriority",
                "modelAsString": false
              }
            },
            "SpecificPriorityValue": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Value for more granular control over execution priority.",
              "format": "int32"
            },
            "Robot": {
              "$ref": "#/components/schemas/SimpleRobotDto"
            },
            "Release": {
              "$ref": "#/components/schemas/SimpleReleaseDto"
            },
            "ResourceOverwrites": {
              "type": "string",
              "description": "Job overwrites"
            },
            "Source": {
              "type": "string",
              "description": "The Source name of the job."
            },
            "SourceType": {
              "type": "string",
              "description": "The Source type of the job.",
              "enum": [
                "Manual",
                "Schedule",
                "Agent",
                "Queue",
                "StudioWeb",
                "IntegrationTrigger",
                "StudioDesktop",
                "AutomationOpsPipelines",
                "Apps",
                "SAP"
              ],
              "x-ms-enum": {
                "name": "JobDtoSourceType",
                "modelAsString": false
              }
            },
            "BatchExecutionKey": {
              "type": "string",
              "description": "The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.",
              "format": "uuid"
            },
            "Info": {
              "type": "string",
              "description": "Additional information about the current job."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the job was created.",
              "format": "date-time"
            },
            "StartingScheduleId": {
              "type": "integer",
              "description": "The Id of the schedule that started the job, or null if the job was started by the user.",
              "format": "int64"
            },
            "ReleaseName": {
              "type": "string",
              "description": "The name of the release associated with the current name."
            },
            "Type": {
              "type": "string",
              "description": "The type of the job, Attended if started via the robot, Unattended otherwise",
              "enum": [
                "Unattended",
                "Attended",
                "ServerlessGeneric"
              ],
              "x-ms-enum": {
                "name": "JobDtoType",
                "modelAsString": false
              }
            },
            "InputArguments": {
              "type": "string",
              "description": "Input parameters in JSON format to be passed to job execution"
            },
            "OutputArguments": {
              "type": "string",
              "description": "Output parameters in JSON format resulted from job execution"
            },
            "HostMachineName": {
              "type": "string",
              "description": "The name of the machine where the Robot run the job."
            },
            "HasMediaRecorded": {
              "type": "boolean",
              "description": "True if any execution media has been recorded for this job, false otherwise."
            },
            "HasVideoRecorded": {
              "type": "boolean",
              "description": "True if any execution video has been recorded for this job, false otherwise."
            },
            "PersistenceId": {
              "type": "string",
              "description": "The persistence instance id for a suspended job",
              "format": "uuid"
            },
            "ResumeVersion": {
              "type": "integer",
              "description": "Distinguishes between multiple job suspend/resume cycles",
              "format": "int32"
            },
            "StopStrategy": {
              "type": "string",
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "JobDtoStopStrategy",
                "modelAsString": false
              }
            },
            "RuntimeType": {
              "type": "string",
              "description": "The runtime type of the robot which can pick up the job",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "JobDtoRuntimeType",
                "modelAsString": false
              }
            },
            "RequiresUserInteraction": {
              "type": "boolean"
            },
            "ReleaseVersionId": {
              "type": "integer",
              "format": "int64"
            },
            "EntryPointPath": {
              "maxLength": 512,
              "type": "string",
              "description": "Path to the entry point workflow (XAML) that will be executed by the robot"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "Id of the folder this job is part of.",
              "format": "int64"
            },
            "OrganizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "Fully qualified name of the folder this job is part of."
            },
            "Reference": {
              "type": "string",
              "description": "Reference identifier for the job"
            },
            "ProcessType": {
              "type": "string",
              "enum": [
                "Undefined",
                "Process",
                "TestAutomationProcess"
              ],
              "x-ms-enum": {
                "name": "JobDtoProcessType",
                "modelAsString": false
              }
            },
            "Machine": {
              "$ref": "#/components/schemas/MachineDto"
            },
            "ProfilingOptions": {
              "type": "string",
              "description": "Options to instruct the robot what profiling info to collect (code coverage, CPU / memory utilization, etc)"
            },
            "ResumeOnSameContext": {
              "type": "boolean",
              "description": "Flag for honoring initial machine and robot choice upon resumption of job if suspended. <br />\r\nIf set, the job will resume on the same robot-machine pair on which it initially ran."
            },
            "LocalSystemAccount": {
              "type": "string",
              "description": "The account under which the robot executor will run the job"
            },
            "OrchestratorUserIdentity": {
              "type": "string",
              "description": "The orchestrator identity used to make API calls"
            },
            "RemoteControlAccess": {
              "type": "string",
              "enum": [
                "None",
                "ReadOnly",
                "Full"
              ],
              "x-ms-enum": {
                "name": "JobDtoRemoteControlAccess",
                "modelAsString": false
              }
            },
            "MaxExpectedRunningTimeSeconds": {
              "type": "integer",
              "description": "Expected running time in seconds",
              "format": "int64"
            },
            "ServerlessJobType": {
              "type": "string",
              "description": "The type of the serverless job, RobotJob or Generic",
              "enum": [
                "RobotJob",
                "StudioWebDesigner"
              ],
              "x-ms-enum": {
                "name": "JobDtoServerlessJobType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Represents a scheduled or manual execution of a process on a robot."
        },
        "JobFaultedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a job has failed to finish execution",
          "x-webhook-event": "job.faulted"
        },
        "JobResumedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "x-webhook-event": "job.resumed"
        },
        "JobStartedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a job has started execution on a robot",
          "x-webhook-event": "job.started"
        },
        "JobStoppingEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "x-webhook-event": "job.stopping"
        },
        "JobSuspendedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a job has suspended execution on a robot",
          "x-webhook-event": "job.suspended"
        },
        "JobTerminatingEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Job": {
              "$ref": "#/components/schemas/SimpleJobEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "x-webhook-event": "job.terminating"
        },
        "JobTriggerDto": {
          "type": "object",
          "properties": {
            "JobId": {
              "type": "integer",
              "format": "int64"
            },
            "TriggerType": {
              "type": "string",
              "description": "Resume type (job, queue, task etc)",
              "enum": [
                "None",
                "QueueItem",
                "Job",
                "Task",
                "Timer",
                "Integration"
              ],
              "x-ms-enum": {
                "name": "JobTriggerDtoTriggerType",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "description": "Job trigger status (new, ready, fired etc)",
              "enum": [
                "New",
                "Ready",
                "Fired"
              ],
              "x-ms-enum": {
                "name": "JobTriggerDtoStatus",
                "modelAsString": false
              }
            },
            "ItemId": {
              "type": "integer",
              "description": "item Id (queue item id, task id, job id etc)",
              "format": "int64"
            },
            "Timer": {
              "type": "string",
              "description": "Resume timer (for time trigger)",
              "format": "date-time"
            },
            "TriggerMessage": {
              "type": "string",
              "description": "Workflow provided resume trigger description/message"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "A trigger for resuming a job"
        },
        "JobTriggerWithWaitEventsDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "description": "Job Trigger Id",
              "format": "int64"
            },
            "JobId": {
              "type": "integer",
              "description": "Job Id",
              "format": "int64"
            },
            "TriggerType": {
              "type": "string",
              "description": "Resume type (job, queue, task etc)",
              "enum": [
                "None",
                "QueueItem",
                "Job",
                "Task",
                "Timer",
                "Integration"
              ],
              "x-ms-enum": {
                "name": "JobTriggerWaitEventModelTriggerType",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "description": "Job trigger status (new, ready, fired etc)",
              "enum": [
                "New",
                "Ready",
                "Fired"
              ],
              "x-ms-enum": {
                "name": "JobTriggerWaitEventModelStatus",
                "modelAsString": false
              }
            },
            "ItemId": {
              "type": "integer",
              "description": "item Id (queue item id, task id, job id etc)",
              "format": "int64"
            },
            "Timer": {
              "type": "string",
              "description": "Resume timer (for time trigger)",
              "format": "date-time"
            },
            "TriggerMessage": {
              "type": "string",
              "description": "Workflow provided resume trigger description/message"
            },
            "ItemName": {
              "type": "string",
              "description": "Name of the Item on which wait is placed"
            },
            "AssignedToUserId": {
              "type": "integer",
              "description": "Assigned to UserId",
              "format": "int64"
            },
            "Name": {
              "type": "string",
              "description": "Assigned to User - Name"
            },
            "Surname": {
              "type": "string",
              "description": "Assigned to User - SurName"
            },
            "UserName": {
              "type": "string",
              "description": "Assigned to User - UserName"
            },
            "EmailAddress": {
              "type": "string",
              "description": "Assigned to User - EmailAddress"
            },
            "CreationTime": {
              "type": "string",
              "description": "Creationtime of the item",
              "format": "date-time"
            },
            "ModifiedTime": {
              "type": "string",
              "description": "Modification time of the item",
              "format": "date-time"
            }
          }
        },
        "JobsCreatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "StartInfo": {
              "$ref": "#/components/schemas/WrappedStartProcessDto"
            },
            "Jobs": {
              "type": "array",
              "description": "List of jobs that were created and are in pending state",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedJobDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever jobs were created and queued for execution",
          "x-webhook-event": "job.created"
        },
        "JobsStoppedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Jobs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SimpleJobEventDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever jobs were stopped",
          "x-webhook-event": "job.stopped"
        },
        "KeyValuePairOfStringString": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "readOnly": true
            },
            "Value": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "LanguageInfo": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string"
            },
            "DisplayName": {
              "type": "string"
            },
            "Icon": {
              "type": "string"
            },
            "IsDefault": {
              "type": "boolean"
            },
            "IsDisabled": {
              "type": "boolean"
            }
          }
        },
        "LibraryDto": {
          "type": "object",
          "properties": {
            "Created": {
              "type": "string",
              "format": "date-time"
            },
            "LastUpdated": {
              "type": "string",
              "format": "date-time"
            },
            "Owners": {
              "type": "string"
            },
            "IconUrl": {
              "type": "string"
            },
            "Summary": {
              "type": "string"
            },
            "PackageSize": {
              "type": "integer",
              "format": "int64"
            },
            "IsPrerelease": {
              "type": "boolean"
            },
            "Title": {
              "type": "string",
              "description": "The custom name of the package."
            },
            "Version": {
              "type": "string",
              "description": "The current version of the given package."
            },
            "Key": {
              "type": "string",
              "description": "The unique identifier for the package."
            },
            "Description": {
              "type": "string",
              "description": "Used to add additional information about a package in order to better identify it."
            },
            "Published": {
              "type": "string",
              "description": "The date and time when the package was published or uploaded.",
              "format": "date-time"
            },
            "IsLatestVersion": {
              "type": "boolean",
              "description": "Specifies whether the current version is the latest of the given package."
            },
            "OldVersion": {
              "type": "string",
              "description": "Specifies the last version before the current one."
            },
            "ReleaseNotes": {
              "type": "string",
              "description": "Package release notes."
            },
            "Authors": {
              "type": "string",
              "description": "Package authors."
            },
            "ProjectType": {
              "type": "string",
              "description": "Package project type.",
              "enum": [
                "Undefined",
                "Process",
                "ProcessLibrary",
                "BusinessProcess",
                "BusinessProcessLibrary",
                "TestAutomationProcess"
              ],
              "x-ms-enum": {
                "name": "PackageDtoProjectType",
                "modelAsString": false
              }
            },
            "Tags": {
              "type": "string",
              "description": "Package tags."
            },
            "IsCompiled": {
              "type": "boolean",
              "description": "Disable explore packages for compiled processes"
            },
            "LicenseUrl": {
              "type": "string",
              "description": "License URL"
            },
            "ProjectUrl": {
              "type": "string",
              "description": "Project URL"
            },
            "ResourceTags": {
              "type": "array",
              "description": "Tags set up by orchestrator",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Id": {
              "type": "string"
            }
          }
        },
        "LicenseDto": {
          "type": "object",
          "properties": {
            "HostLicenseId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "description": "License Id",
              "format": "int64"
            },
            "ExpireDate": {
              "type": "integer",
              "description": "License expiration date in Epoch format",
              "format": "int64"
            },
            "GracePeriodEndDate": {
              "type": "integer",
              "description": "License grace period end date in Epoch format",
              "format": "int64"
            },
            "GracePeriod": {
              "type": "integer",
              "description": "Number of grace period days",
              "format": "int64"
            },
            "VersionControl": {
              "type": "string",
              "description": "The product version which can use this license"
            },
            "Allowed": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              },
              "description": "Contains the number of allowed licenses for each type"
            },
            "Used": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              },
              "description": "Contains the number of used licenses for each type"
            },
            "AttendedConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Attended Concurrent"
            },
            "DevelopmentConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Development Concurrent"
            },
            "StudioXConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Studio Business Concurrent"
            },
            "StudioProConcurrent": {
              "type": "boolean",
              "description": "States whether the license is Studio Pro Concurrent"
            },
            "LicensedFeatures": {
              "type": "array",
              "description": "What features are licensed (valid for individually-licensed features, like Analytics)",
              "items": {
                "type": "string"
              }
            },
            "IsRegistered": {
              "type": "boolean",
              "description": "True if the current tenant is registered with a license. False otherwise."
            },
            "IsCommunity": {
              "type": "boolean",
              "description": "True if the current tenant is registered with a community license."
            },
            "IsProOrEnterprise": {
              "type": "boolean",
              "description": "True if the current tenant is registered with a pro license."
            },
            "SubscriptionCode": {
              "type": "string",
              "description": "The license subscription code"
            },
            "SubscriptionPlan": {
              "type": "string",
              "description": "The license subscription plan"
            },
            "IsExpired": {
              "type": "boolean",
              "description": "States whether the license is still valid or not."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date when the license was uploaded.",
              "format": "date-time"
            },
            "Code": {
              "type": "string",
              "description": "The license code."
            },
            "UserLicensingEnabled": {
              "type": "boolean",
              "description": "Whether user licensing is enabled or not."
            }
          },
          "description": "Stores information about the license used to activate a tenant."
        },
        "LicenseNamedUserDto": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "The license key."
            },
            "UserName": {
              "type": "string",
              "description": "The Robot's UserName."
            },
            "LastLoginDate": {
              "type": "string",
              "description": "The last date when the Robot acquired a license.",
              "format": "date-time"
            },
            "MachinesCount": {
              "type": "integer",
              "description": "Total number of machines where a robot with UserName is defined.",
              "format": "int32"
            },
            "IsLicensed": {
              "type": "boolean",
              "description": "If the license is in use."
            },
            "IsExternalLicensed": {
              "type": "boolean",
              "description": "If the robot is external licensed"
            },
            "ActiveRobotId": {
              "type": "integer",
              "description": "The Id of the Robot that uses the license.",
              "format": "int64"
            },
            "MachineNames": {
              "type": "array",
              "description": "The Machine names of the defined Robot.",
              "items": {
                "type": "string"
              }
            },
            "ActiveMachineNames": {
              "type": "array",
              "description": "The Machine names of the connected and licensed Robot.",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Stores information about a named-user license (attended/development)."
        },
        "LicenseRequest": {
          "required": [
            "environment",
            "licenseKey"
          ],
          "type": "object",
          "properties": {
            "licenseKey": {
              "minLength": 1,
              "type": "string"
            },
            "environment": {
              "minLength": 1,
              "type": "string"
            },
            "email": {
              "type": "string"
            }
          }
        },
        "LicenseResultDto": {
          "type": "object",
          "properties": {
            "isSuccess": {
              "type": "boolean"
            },
            "errorCode": {
              "type": "string",
              "enum": [
                "NoLicense",
                "LicenseExpired",
                "LicenseUnregistered",
                "NoAvailableLicenses",
                "NotEnoughAvailableSlots",
                "NotEnoughRuntimeLicenses",
                "LicenseIsAlreadyInUse",
                "InvalidRequest",
                "SlotsExceedLicenseLimit",
                "RuntimeDisabled",
                "ExternalNotSupported",
                "UsageExceedsLicenseLimit",
                "LicenseNotCompatible"
              ],
              "x-ms-enum": {
                "name": "LicenseResultDtoErrorCode",
                "modelAsString": false
              }
            },
            "errorMessage": {
              "type": "string"
            }
          }
        },
        "LicenseRuntimeDto": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "The license key."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Machine's Id.",
              "format": "int64"
            },
            "MachineName": {
              "type": "string",
              "description": "The Machine's Name."
            },
            "HostMachineName": {
              "type": "string",
              "description": "The Host machine's Name."
            },
            "ServiceUserName": {
              "type": "string",
              "description": "The Service username when installed in user mode."
            },
            "MachineType": {
              "type": "string",
              "description": "The Machine's Type.",
              "enum": [
                "Standard",
                "Template"
              ],
              "x-ms-enum": {
                "name": "LicenseRuntimeDtoMachineType",
                "modelAsString": false
              }
            },
            "Runtimes": {
              "type": "integer",
              "description": "Maximum number of runtimes.",
              "format": "int32"
            },
            "RobotsCount": {
              "type": "integer",
              "description": "Total number of Robots.",
              "format": "int32"
            },
            "ExecutingCount": {
              "type": "integer",
              "description": "How many Robots acquired a license.",
              "format": "int32"
            },
            "IsOnline": {
              "type": "boolean",
              "description": "If the machine is online."
            },
            "IsLicensed": {
              "type": "boolean",
              "description": "If the machine is licensed."
            },
            "Enabled": {
              "type": "boolean",
              "description": "If the machine is allowed to consume licenses."
            },
            "MachineScope": {
              "type": "string",
              "description": "Machine scope.",
              "enum": [
                "Default",
                "Shared",
                "PersonalWorkspace",
                "Cloud",
                "Serverless"
              ],
              "x-ms-enum": {
                "name": "LicenseRuntimeDtoMachineScope",
                "modelAsString": false
              }
            }
          },
          "description": "Stores information about a runtime license (unattended/non-production)."
        },
        "LicenseStatsModel": {
          "type": "object",
          "properties": {
            "robotType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "LicenseStatsModelRobotType",
                "modelAsString": false
              }
            },
            "count": {
              "type": "integer",
              "format": "int64"
            },
            "timestamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "LicensesToggleEnabledRequest": {
          "required": [
            "enabled",
            "key",
            "robotType"
          ],
          "type": "object",
          "properties": {
            "key": {
              "minLength": 1,
              "type": "string"
            },
            "robotType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "LicensesToggleEnabledRequestRobotType",
                "modelAsString": false
              }
            },
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "LightRoleDto": {
          "type": "object",
          "properties": {
            "name": {
              "maxLength": 64,
              "type": "string",
              "description": "A custom name for the role."
            },
            "displayName": {
              "maxLength": 64,
              "type": "string",
              "description": "An alternative name used for UI display."
            },
            "groups": {
              "type": "string",
              "description": "Allows grouping multiple roles together."
            },
            "isStatic": {
              "type": "boolean",
              "description": "States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted."
            },
            "isEditable": {
              "type": "boolean",
              "description": "States whether the permissions for this role can be modified or not."
            },
            "id": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "ListResultDtoOfLanguageInfo": {
          "type": "object",
          "properties": {
            "Items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LanguageInfo"
              }
            }
          }
        },
        "ListResultDtoOfNameValueDto": {
          "type": "object",
          "properties": {
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NameValueDto"
              }
            }
          }
        },
        "LogDto": {
          "type": "object",
          "properties": {
            "Level": {
              "type": "string",
              "description": "Defines the log severity.",
              "enum": [
                "Trace",
                "Debug",
                "Info",
                "Warn",
                "Error",
                "Fatal"
              ],
              "x-ms-enum": {
                "name": "LogDtoLevel",
                "modelAsString": false
              }
            },
            "WindowsIdentity": {
              "type": "string",
              "description": "The name of the user that performed the action that was logged."
            },
            "ProcessName": {
              "type": "string",
              "description": "The name of the process."
            },
            "TimeStamp": {
              "type": "string",
              "description": "The exact date and time the action was performed.",
              "format": "date-time"
            },
            "Message": {
              "type": "string",
              "description": "The log message. This can also be a message logged through the Log Message activity in UiPath Studio."
            },
            "JobKey": {
              "type": "string",
              "description": "The key of the job running the process that generated the log, if any.",
              "format": "uuid"
            },
            "RawMessage": {
              "type": "string",
              "description": "A JSON format message containing all the above fields."
            },
            "RobotName": {
              "type": "string",
              "description": "The name of the Robot that generated the log."
            },
            "HostMachineName": {
              "type": "string",
              "description": "The name of the machine that generated the log"
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the Machine on which the Robot that generated the log is running.",
              "format": "int64"
            },
            "MachineKey": {
              "type": "string",
              "description": "The Key of the Machine on which the Robot that generated the log is running.",
              "format": "uuid"
            },
            "RuntimeType": {
              "type": "string",
              "description": "The RuntimeType of the job referenced by the JobKey field",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "LogDtoRuntimeType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Logs generated by Robots and execution reports. Can be stored in ElasticSearch and/or to a local SQL database.\r\n<para />Note: The endpoint for this type is /odata/RobotLogs URL."
        },
        "LoginModel": {
          "required": [
            "password",
            "usernameOrEmailAddress"
          ],
          "type": "object",
          "properties": {
            "tenancyName": {
              "type": "string"
            },
            "usernameOrEmailAddress": {
              "minLength": 1,
              "type": "string"
            },
            "password": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "LongVersionedEntity": {
          "type": "object",
          "properties": {
            "RowVersion": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "format": "byte"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "MachineAssignmentsDto": {
          "type": "object",
          "properties": {
            "MachineIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "FolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "MachineDeleteBulkRequest": {
          "type": "object",
          "properties": {
            "machineIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "MachineDto": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "LicenseKey": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly."
            },
            "Name": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The name of the Machine a Robot is hosted on."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string"
            },
            "Type": {
              "type": "string",
              "description": "The type of the Machine (Standard / Template).",
              "enum": [
                "Standard",
                "Template"
              ],
              "x-ms-enum": {
                "name": "MachineDtoType",
                "modelAsString": false
              }
            },
            "Scope": {
              "type": "string",
              "description": "The scope of the Machine (Default / Shared / PW / Cloud / Serverless).",
              "enum": [
                "Default",
                "Shared",
                "PersonalWorkspace",
                "Cloud",
                "Serverless"
              ],
              "x-ms-enum": {
                "name": "MachineDtoScope",
                "modelAsString": false
              }
            },
            "NonProductionSlots": {
              "type": "integer",
              "description": "Number of NonProduction slots to be reserved at runtime",
              "format": "int32"
            },
            "UnattendedSlots": {
              "type": "integer",
              "description": "Number of Unattended slots to be reserved at runtime",
              "format": "int32"
            },
            "HeadlessSlots": {
              "type": "integer",
              "description": "Number of Headless slots to be reserved at runtime",
              "format": "int32"
            },
            "TestAutomationSlots": {
              "type": "integer",
              "description": "Number of TestAutomation slots to be reserved at runtime",
              "format": "int32"
            },
            "AutomationCloudSlots": {
              "type": "integer",
              "description": "Number of AutomationCloud slots to be reserved at runtime",
              "format": "int32"
            },
            "AutomationCloudTestAutomationSlots": {
              "type": "integer",
              "description": "Number of AutomationCloudTestAutomation slots to be reserved at runtime",
              "format": "int32"
            },
            "Key": {
              "type": "string",
              "description": "An immutable unique identifier that is preserved during tenant migration",
              "format": "uuid"
            },
            "EndpointDetectionStatus": {
              "type": "string",
              "description": "The EDR protection status of the connected hosts.",
              "enum": [
                "NotAvailable",
                "Mixed",
                "Enabled"
              ],
              "x-ms-enum": {
                "name": "MachineDtoEndpointDetectionStatus",
                "modelAsString": false
              }
            },
            "RobotVersions": {
              "type": "array",
              "description": "The versions of the Robots hosted on the Machine.",
              "items": {
                "$ref": "#/components/schemas/MachinesRobotVersionDto"
              }
            },
            "RobotUsers": {
              "type": "array",
              "description": "Robots assigned to template machine.",
              "items": {
                "$ref": "#/components/schemas/RobotUserDto"
              }
            },
            "AutomationType": {
              "type": "string",
              "description": "The automation type the machine supports.",
              "enum": [
                "Any",
                "Foreground",
                "Background"
              ],
              "x-ms-enum": {
                "name": "MachineDtoAutomationType",
                "modelAsString": false
              }
            },
            "TargetFramework": {
              "type": "string",
              "description": "The target frameworks the machine supports.",
              "enum": [
                "Any",
                "Windows",
                "Portable"
              ],
              "x-ms-enum": {
                "name": "MachineDtoTargetFramework",
                "modelAsString": false
              }
            },
            "UpdatePolicy": {
              "$ref": "#/components/schemas/UpdatePolicyDto"
            },
            "ClientSecret": {
              "type": "string",
              "description": "Client secret generated by Identity Server\r\nUse in combination with LicenseKey (ClientId) to connect robot"
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "MaintenanceWindow": {
              "$ref": "#/components/schemas/MaintenanceWindowDto"
            },
            "VpnSettings": {
              "$ref": "#/components/schemas/MachineVpnSettingsDto"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "The Machine that hosts the Robot"
        },
        "MachineFolderDto": {
          "properties": {
            "IsAssignedToFolder": {
              "type": "boolean"
            },
            "HasMachineRobots": {
              "type": "boolean"
            },
            "IsInherited": {
              "type": "boolean"
            },
            "PropagateToSubFolders": {
              "type": "boolean"
            },
            "InheritedFromFolderName": {
              "type": "string"
            },
            "UpdateInfo": {
              "$ref": "#/components/schemas/UpdateInfoDto"
            }
          },
          "allOf": [
            {
              "$ref": "#/components/schemas/MachineDto"
            }
          ]
        },
        "MachineRobotDto": {
          "type": "object",
          "properties": {
            "MachineId": {
              "type": "integer",
              "description": "The Id of the Machine.",
              "format": "int64"
            },
            "MachineName": {
              "type": "string",
              "description": "The name of the Machine."
            },
            "RobotId": {
              "type": "integer",
              "description": "The Id of the Robot.",
              "format": "int64"
            },
            "RobotUserName": {
              "type": "string",
              "description": "The robot user name."
            }
          }
        },
        "MachineRobotSessionDto": {
          "type": "object",
          "properties": {
            "MachineId": {
              "type": "integer",
              "format": "int64"
            },
            "MachineName": {
              "type": "string"
            },
            "RobotId": {
              "type": "integer",
              "format": "int64"
            },
            "RobotUserName": {
              "type": "string"
            },
            "SessionId": {
              "type": "integer",
              "format": "int64"
            },
            "SessionName": {
              "type": "string"
            }
          }
        },
        "MachineRuntimeDto": {
          "type": "object",
          "properties": {
            "Type": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "MachineRuntimeDtoType",
                "modelAsString": false
              }
            },
            "Total": {
              "type": "integer",
              "format": "int64"
            },
            "Connected": {
              "type": "integer",
              "format": "int64"
            },
            "Available": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "MachineSessionDto": {
          "type": "object",
          "properties": {
            "ServiceUserName": {
              "type": "string"
            },
            "Robot": {
              "$ref": "#/components/schemas/RobotWithLicenseDto"
            },
            "HostMachineName": {
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the Machine.",
              "format": "int64"
            },
            "MachineName": {
              "type": "string",
              "description": "The Machine's name."
            },
            "State": {
              "type": "string",
              "description": "The value of the last reported status.",
              "enum": [
                "Available",
                "Busy",
                "Disconnected",
                "Unknown"
              ],
              "x-ms-enum": {
                "name": "SessionDtoState",
                "modelAsString": false
              }
            },
            "Job": {
              "$ref": "#/components/schemas/JobDto"
            },
            "ReportingTime": {
              "type": "string",
              "description": "The date and time when the last heartbeat came.",
              "format": "date-time"
            },
            "Info": {
              "type": "string",
              "description": "May store additional information about the robot state."
            },
            "IsUnresponsive": {
              "type": "boolean",
              "description": "If the robot did not report status for longer than 120 seconds."
            },
            "LicenseErrorCode": {
              "type": "string",
              "description": "DEPRECATED. Last licensing error status.",
              "enum": [
                "NoLicense",
                "LicenseExpired",
                "LicenseUnregistered",
                "NoAvailableLicenses",
                "NotEnoughAvailableSlots",
                "NotEnoughRuntimeLicenses",
                "LicenseIsAlreadyInUse",
                "InvalidRequest",
                "SlotsExceedLicenseLimit",
                "RuntimeDisabled",
                "ExternalNotSupported",
                "UsageExceedsLicenseLimit",
                "LicenseNotCompatible"
              ],
              "x-ms-enum": {
                "name": "SessionDtoLicenseErrorCode",
                "modelAsString": false
              },
              "x-deprecated": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "The folder Id.",
              "format": "int64"
            },
            "FolderName": {
              "type": "string",
              "description": "The folder display name."
            },
            "RobotSessionType": {
              "type": "string",
              "description": "The robot session type.",
              "enum": [
                "LongLived",
                "Ephemeral"
              ],
              "x-ms-enum": {
                "name": "SessionDtoRobotSessionType",
                "modelAsString": false
              }
            },
            "Version": {
              "type": "string"
            },
            "Source": {
              "type": "string",
              "enum": [
                "Assistant",
                "StudioWeb",
                "StudioDesktop"
              ],
              "x-ms-enum": {
                "name": "SessionDtoSource",
                "modelAsString": false
              }
            },
            "DebugModeExpirationDate": {
              "type": "string",
              "format": "date-time"
            },
            "UpdateInfo": {
              "$ref": "#/components/schemas/UpdateInfoDto"
            },
            "InstallationId": {
              "type": "string",
              "format": "uuid"
            },
            "Platform": {
              "type": "string",
              "enum": [
                "Unknown",
                "Windows",
                "Linux",
                "OSX"
              ],
              "x-ms-enum": {
                "name": "SessionDtoPlatform",
                "modelAsString": false
              }
            },
            "EndpointDetection": {
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "MachineSessionRuntimeDto": {
          "type": "object",
          "properties": {
            "SessionId": {
              "type": "integer",
              "format": "int64"
            },
            "MachineId": {
              "type": "integer",
              "format": "int64"
            },
            "MachineName": {
              "type": "string"
            },
            "MaintenanceMode": {
              "type": "string",
              "enum": [
                "Default",
                "Enabled"
              ],
              "x-ms-enum": {
                "name": "MachineSessionRuntimeDtoMaintenanceMode",
                "modelAsString": false
              }
            },
            "HostMachineName": {
              "type": "string"
            },
            "RuntimeType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "MachineSessionRuntimeDtoRuntimeType",
                "modelAsString": false
              }
            },
            "MachineType": {
              "type": "string",
              "enum": [
                "Standard",
                "Template"
              ],
              "x-ms-enum": {
                "name": "MachineSessionRuntimeDtoMachineType",
                "modelAsString": false
              }
            },
            "MachineScope": {
              "type": "string",
              "enum": [
                "Default",
                "Shared",
                "PersonalWorkspace",
                "Cloud",
                "Serverless"
              ],
              "x-ms-enum": {
                "name": "MachineSessionRuntimeDtoMachineScope",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "enum": [
                "Available",
                "Busy",
                "Disconnected",
                "Unknown"
              ],
              "x-ms-enum": {
                "name": "MachineSessionRuntimeDtoStatus",
                "modelAsString": false
              }
            },
            "IsUnresponsive": {
              "type": "boolean"
            },
            "Runtimes": {
              "type": "integer",
              "format": "int64"
            },
            "UsedRuntimes": {
              "type": "integer",
              "format": "int64"
            },
            "ServiceUserName": {
              "type": "string"
            },
            "ReportingTime": {
              "type": "string",
              "format": "date-time"
            },
            "Version": {
              "type": "string"
            },
            "DebugModeExpirationDate": {
              "type": "string",
              "format": "date-time"
            },
            "Platform": {
              "type": "string",
              "enum": [
                "Unknown",
                "Windows",
                "Linux",
                "OSX"
              ],
              "x-ms-enum": {
                "name": "MachineSessionRuntimeDtoPlatform",
                "modelAsString": false
              }
            },
            "EndpointDetection": {
              "type": "string"
            },
            "TriggersCount": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "MachineVpnSettingsDto": {
          "type": "object",
          "properties": {
            "cidr": {
              "type": "string"
            }
          }
        },
        "MachinesFolderAssociationsDto": {
          "type": "object",
          "properties": {
            "FolderId": {
              "type": "integer",
              "format": "int64"
            },
            "AddedMachineIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "RemovedMachineIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "MachinesRobotVersionDto": {
          "type": "object",
          "properties": {
            "Count": {
              "type": "integer",
              "description": "The number of Robots on the Machine with the specified version.",
              "format": "int64"
            },
            "Version": {
              "type": "string",
              "description": "The Version of the Robot hosted on the Machine."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the Machine.",
              "format": "int64"
            }
          }
        },
        "MaintenanceSetting": {
          "type": "object",
          "properties": {
            "state": {
              "type": "string",
              "enum": [
                "None",
                "Draining",
                "Suspended"
              ],
              "x-ms-enum": {
                "name": "MaintenanceSettingState",
                "modelAsString": false
              }
            },
            "maintenanceLogs": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/MaintenanceStateLog"
              }
            },
            "jobStopsAttempted": {
              "type": "integer",
              "format": "int32"
            },
            "jobKillsAttempted": {
              "type": "integer",
              "format": "int32"
            },
            "triggersSkipped": {
              "type": "integer",
              "format": "int32"
            },
            "systemTriggersSkipped": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "MaintenanceStateLog": {
          "type": "object",
          "properties": {
            "state": {
              "type": "string",
              "enum": [
                "None",
                "Draining",
                "Suspended"
              ],
              "x-ms-enum": {
                "name": "MaintenanceStateLogState",
                "modelAsString": false
              }
            },
            "timeStamp": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "MaintenanceWindowDto": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Whether the maintenance window is enabled"
            },
            "jobStopStrategy": {
              "type": "string",
              "description": "The strategy for stopping jobs when the window begins",
              "enum": [
                "None",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "MaintenanceWindowDtoJobStopStrategy",
                "modelAsString": false
              }
            },
            "cronExpression": {
              "type": "string",
              "description": "The recurrence pattern as a cron expression"
            },
            "timezoneId": {
              "type": "string",
              "description": "The Timezone Id"
            },
            "duration": {
              "type": "integer",
              "description": "The duration of the maintenance window in minutes",
              "format": "int32"
            },
            "nextExecutionTime": {
              "type": "string",
              "description": "The next execution time of the maintenance window",
              "format": "date-time"
            }
          },
          "description": "Represents a maintenance window for a cloud machine"
        },
        "MoveFolderMachineChange": {
          "type": "object",
          "properties": {
            "MachineId": {
              "type": "integer",
              "format": "int64"
            },
            "MachineName": {
              "type": "string"
            },
            "OldMachineFolderState": {
              "type": "string",
              "enum": [
                "Unknown",
                "NotAssigned",
                "Assigned",
                "Inherited",
                "EroAcrError",
                "ServerlessError"
              ],
              "x-ms-enum": {
                "name": "MoveFolderMachineChangeOldMachineFolderState",
                "modelAsString": false
              }
            },
            "NewMachineFolderState": {
              "type": "string",
              "enum": [
                "Unknown",
                "NotAssigned",
                "Assigned",
                "Inherited",
                "EroAcrError",
                "ServerlessError"
              ],
              "x-ms-enum": {
                "name": "MoveFolderMachineChangeNewMachineFolderState",
                "modelAsString": false
              }
            }
          }
        },
        "NameValueDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string"
            },
            "Value": {
              "type": "string"
            }
          }
        },
        "ODataValueOfBoolean": {
          "type": "object",
          "properties": {
            "value": {
              "type": "boolean"
            }
          }
        },
        "ODataValueOfIDictionaryOfInt64Boolean": {
          "type": "object",
          "properties": {
            "value": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfAlertDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AlertDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfAssetDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AssetDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfAuditLogDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AuditLogDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfAuditLogEntityDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AuditLogEntityDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfBlobFileDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BlobFileDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfBucketDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BucketDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfBulkItemDtoOfString": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BulkItemDtoOfString"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfConfigurationEntry": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConfigurationEntry"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfCredentialStoreDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CredentialStoreDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfCredentialStoreResourceDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CredentialStoreResourceDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfCredentialsProxyResourceDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CredentialsProxyResourceDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfEnvironmentDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EnvironmentDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfExecutionMediaDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExecutionMediaDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfExtendedCalendarDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtendedCalendarDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfExtendedMachineDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtendedMachineDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfExtendedRobotDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExtendedRobotDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfFolderDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FolderDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfHostLicenseDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/HostLicenseDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfInt64": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfJobDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JobDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfJobTriggerDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JobTriggerDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfJobTriggerWithWaitEventsDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JobTriggerWithWaitEventsDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfKeyValuePairOfStringString": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/KeyValuePairOfStringString"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfLibraryDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LibraryDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfLicenseNamedUserDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LicenseNamedUserDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfLicenseRuntimeDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LicenseRuntimeDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfLogDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LogDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfMachineDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MachineDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfMachineFolderDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MachineFolderDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfMachineRuntimeDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MachineRuntimeDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfMachineSessionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MachineSessionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfMachineSessionRuntimeDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MachineSessionRuntimeDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfMoveFolderMachineChange": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MoveFolderMachineChange"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfOrganizationUnitDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OrganizationUnitDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfPermissionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PermissionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfPersonalWorkspaceDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PersonalWorkspaceDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfProcessDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProcessDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfProcessScheduleDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ProcessScheduleDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueDefinitionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueDefinitionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueItemCommentDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueItemCommentDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueItemDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueItemDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueItemEventDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueItemEventDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueProcessingRecordDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueProcessingRecordDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueProcessingStatusDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueProcessingStatusDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfQueueRetentionSettingDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueueRetentionSettingDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfReleaseDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReleaseDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfReleaseRetentionSettingDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ReleaseRetentionSettingDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfRobotDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RobotDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfRobotsFromFolderModel": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RobotsFromFolderModel"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfRoleDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoleDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfSessionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SessionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfSettingsDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SettingsDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfSimpleUserDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SimpleUserDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfString": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTaskActivityDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskActivityDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTaskCatalogDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskCatalogDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTaskDefinitionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskDefinitionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTaskDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTaskNoteDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskNoteDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTaskOperationErrorResponse": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskOperationErrorResponse"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTenantDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TenantDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestCaseDefinitionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseDefinitionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestCaseExecutionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseExecutionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestDataQueueDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestDataQueueDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestDataQueueItemODataDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestDataQueueItemODataDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestSetDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestSetDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestSetExecutionDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestSetExecutionDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfTestSetScheduleDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestSetScheduleDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfUserDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfUserLoginInfoDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserLoginInfoDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfUserRolesDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserRolesDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfWebhookDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WebhookDto"
              }
            }
          }
        },
        "ODataValueOfIEnumerableOfWebhookEventTypeDto": {
          "type": "object",
          "properties": {
            "value": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WebhookEventTypeDto"
              }
            }
          }
        },
        "ODataValueOfInt64": {
          "type": "object",
          "properties": {
            "value": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ODataValueOfString": {
          "type": "object",
          "properties": {
            "value": {
              "type": "string"
            }
          }
        },
        "OrganizationUnitDto": {
          "required": [
            "DisplayName"
          ],
          "type": "object",
          "properties": {
            "DisplayName": {
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "The name of the organization unit."
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about an organization unit in Orchestrator.\r\n<para /> An orchestrator unit can be understood as a company department and it is used to group different entities."
        },
        "PackageDeletedEvent": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "feedId": {
              "type": "string",
              "format": "uuid"
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "PackageUploadedEvent": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "version": {
              "type": "string"
            },
            "feedId": {
              "type": "string",
              "format": "uuid"
            },
            "type": {
              "type": "string",
              "enum": [
                "Undefined",
                "Processes",
                "Libraries",
                "PersonalWorkspace",
                "FolderHierarchy"
              ],
              "x-ms-enum": {
                "name": "PackageUploadedEventType",
                "modelAsString": false
              }
            },
            "description": {
              "type": "string"
            },
            "folderKey": {
              "type": "string",
              "format": "uuid"
            },
            "tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "eventTime": {
              "type": "string",
              "format": "date-time"
            },
            "eventSource": {
              "type": "object"
            }
          }
        },
        "PageResultDtoOfFolderDto": {
          "type": "object",
          "properties": {
            "PageItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FolderDto"
              }
            },
            "Count": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "PermissionDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "The name of the application permission."
            },
            "IsGranted": {
              "type": "boolean",
              "description": "States if a user associated with the role will be allowed or denied to perform the actions governed by the permission."
            },
            "RoleId": {
              "type": "integer",
              "description": "The Id of the role associated with the permission.",
              "format": "int32"
            },
            "Scope": {
              "type": "string",
              "description": "The application scope in which the permission will be applied",
              "enum": [
                "Global",
                "Folder",
                "GlobalOrFolder"
              ],
              "x-ms-enum": {
                "name": "PermissionDtoScope",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about an application permission and role association."
        },
        "PersonalWorkspaceDto": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "format": "uuid"
            },
            "Name": {
              "type": "string"
            },
            "IsActive": {
              "type": "boolean"
            },
            "OwnerId": {
              "type": "integer",
              "format": "int64"
            },
            "OwnerName": {
              "type": "string"
            },
            "LastLogin": {
              "type": "string",
              "format": "date-time"
            },
            "ExploringUserIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "PersonalWorkspacesConvertToFolderRequest": {
          "required": [
            "folderName"
          ],
          "type": "object",
          "properties": {
            "folderName": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "PingEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is triggered immediately after a webhook was created or updated to test the availability of destination URl",
          "x-webhook-event": "ping"
        },
        "ProcessAlertDto": {
          "required": [
            "Message",
            "ProcessName",
            "RobotName",
            "Severity"
          ],
          "type": "object",
          "properties": {
            "Message": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string"
            },
            "Severity": {
              "type": "string",
              "enum": [
                "Info",
                "Success",
                "Warn",
                "Error",
                "Fatal"
              ],
              "x-ms-enum": {
                "name": "ProcessAlertDtoSeverity",
                "modelAsString": false
              }
            },
            "RobotName": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string"
            },
            "ProcessName": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string"
            },
            "Id": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "ProcessDto": {
          "type": "object",
          "properties": {
            "IsActive": {
              "type": "boolean",
              "description": "Specifies if the process is still active."
            },
            "Arguments": {
              "$ref": "#/components/schemas/ArgumentMetadata"
            },
            "SupportsMultipleEntryPoints": {
              "type": "boolean",
              "description": "Specifies if the process has multiple entry points."
            },
            "MainEntryPointPath": {
              "type": "string",
              "description": "The main entry point path."
            },
            "RequiresUserInteraction": {
              "type": "boolean",
              "description": "Specifies if the process can run in headless mode."
            },
            "IsAttended": {
              "type": "boolean"
            },
            "TargetFramework": {
              "type": "string",
              "enum": [
                "Legacy",
                "Windows",
                "Portable"
              ],
              "x-ms-enum": {
                "name": "ProcessDtoTargetFramework",
                "modelAsString": false
              }
            },
            "EntryPoints": {
              "type": "array",
              "description": "Entry points.",
              "items": {
                "$ref": "#/components/schemas/EntryPointDto"
              }
            },
            "Title": {
              "type": "string",
              "description": "The custom name of the package."
            },
            "Version": {
              "type": "string",
              "description": "The current version of the given package."
            },
            "Key": {
              "type": "string",
              "description": "The unique identifier for the package."
            },
            "Description": {
              "type": "string",
              "description": "Used to add additional information about a package in order to better identify it."
            },
            "Published": {
              "type": "string",
              "description": "The date and time when the package was published or uploaded.",
              "format": "date-time"
            },
            "IsLatestVersion": {
              "type": "boolean",
              "description": "Specifies whether the current version is the latest of the given package."
            },
            "OldVersion": {
              "type": "string",
              "description": "Specifies the last version before the current one."
            },
            "ReleaseNotes": {
              "type": "string",
              "description": "Package release notes."
            },
            "Authors": {
              "type": "string",
              "description": "Package authors."
            },
            "ProjectType": {
              "type": "string",
              "description": "Package project type.",
              "enum": [
                "Undefined",
                "Process",
                "ProcessLibrary",
                "BusinessProcess",
                "BusinessProcessLibrary",
                "TestAutomationProcess"
              ],
              "x-ms-enum": {
                "name": "PackageDtoProjectType",
                "modelAsString": false
              }
            },
            "Tags": {
              "type": "string",
              "description": "Package tags."
            },
            "IsCompiled": {
              "type": "boolean",
              "description": "Disable explore packages for compiled processes"
            },
            "LicenseUrl": {
              "type": "string",
              "description": "License URL"
            },
            "ProjectUrl": {
              "type": "string",
              "description": "Project URL"
            },
            "ResourceTags": {
              "type": "array",
              "description": "Tags set up by orchestrator",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Id": {
              "type": "string"
            }
          },
          "description": "A process is a project defined in UiPath Studio and published in Orchestrator from UiPath Studio or manually."
        },
        "ProcessScheduleDto": {
          "required": [
            "Name",
            "TimeZoneId"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "The Key of the process schedule.",
              "format": "uuid"
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specifies if the schedule is active or not."
            },
            "Name": {
              "maxLength": 255,
              "minLength": 1,
              "type": "string",
              "description": "The name of the schedule."
            },
            "ReleaseId": {
              "type": "integer",
              "description": "The Id of the process associated with the schedule.",
              "format": "int64"
            },
            "ReleaseKey": {
              "type": "string",
              "description": "The unique key of the process associated with the schedule."
            },
            "ReleaseName": {
              "type": "string",
              "description": "The name of the process associated with the schedule."
            },
            "PackageName": {
              "type": "string",
              "description": "The name of the package to be triggered with the schedule."
            },
            "EnvironmentName": {
              "type": "string",
              "description": "The name of the environment associated with the schedule."
            },
            "EnvironmentId": {
              "type": "string",
              "description": "The Id of the environment associated with the schedule."
            },
            "JobPriority": {
              "type": "string",
              "description": "The execution priority. If null, it will start jobs with the release's priority.",
              "enum": [
                "Low",
                "Normal",
                "High"
              ],
              "x-ms-enum": {
                "name": "ProcessScheduleDtoJobPriority",
                "modelAsString": false
              }
            },
            "SpecificPriorityValue": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Value for more granular control over execution priority.",
              "format": "int32"
            },
            "RuntimeType": {
              "type": "string",
              "description": "The runtime type of the robot",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "ProcessScheduleDtoRuntimeType",
                "modelAsString": false
              }
            },
            "StartProcessCron": {
              "type": "string",
              "description": "The start cron expression of the schedule."
            },
            "StartProcessCronDetails": {
              "type": "string",
              "description": "Various details that can be associated to the time period expression of the schedule."
            },
            "StartProcessCronSummary": {
              "type": "string",
              "description": "Human readable form of cron expression of the schedule."
            },
            "StartProcessNextOccurrence": {
              "type": "string",
              "description": "The date and time when the associated process will be run next.",
              "format": "date-time"
            },
            "StartStrategy": {
              "type": "integer",
              "description": "States which robots from the environment are being run by the schedule.",
              "format": "int32"
            },
            "ExecutorRobots": {
              "type": "array",
              "description": "The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).",
              "items": {
                "$ref": "#/components/schemas/RobotExecutorDto"
              }
            },
            "StopProcessExpression": {
              "type": "string",
              "description": "Number of seconds after which a running process will be stopped."
            },
            "StopStrategy": {
              "type": "string",
              "description": "The way a running process is stopped.",
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "ProcessScheduleDtoStopStrategy",
                "modelAsString": false
              }
            },
            "KillProcessExpression": {
              "type": "string",
              "description": "Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed"
            },
            "ExternalJobKey": {
              "type": "string",
              "description": "The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule."
            },
            "ExternalJobKeyScheduler": {
              "type": "string",
              "description": "The unique identifier of the external background task schedule associated with the background tasks generated by this schedule. A key is generated for each batch of background tasks triggered by this schedule.",
              "format": "uuid"
            },
            "TimeZoneId": {
              "maxLength": 80,
              "minLength": 1,
              "type": "string",
              "description": "The timezone under which the schedule will run."
            },
            "TimeZoneIana": {
              "type": "string",
              "description": "The timezone under which the schedule will run in Iana Standard."
            },
            "UseCalendar": {
              "type": "boolean",
              "description": "DEPRECATED. Specify whether the schedule uses any calendar.",
              "x-deprecated": true
            },
            "CalendarId": {
              "type": "integer",
              "description": "The id of the calendar that a process schedule uses.",
              "format": "int64"
            },
            "CalendarName": {
              "type": "string",
              "description": "The name of the calendar."
            },
            "StopProcessDate": {
              "type": "string",
              "format": "date-time"
            },
            "InputArguments": {
              "maxLength": 10000,
              "type": "string",
              "description": "Input parameters that will be passed to each job created by this schedule."
            },
            "QueueDefinitionId": {
              "type": "integer",
              "description": "The Id of the queue that uses this schedule for activation (trigger jobs when new queue items are added)",
              "format": "int64"
            },
            "QueueDefinitionName": {
              "type": "string",
              "description": "The Name of the queue that uses this schedule for activation (trigger jobs when new queue items are added)"
            },
            "ActivateOnJobComplete": {
              "type": "boolean",
              "description": "Flag for activating the queue trigger on each completed job."
            },
            "ItemsActivationThreshold": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "description": "The minimum number of queue items that should trigger the process activation.",
              "format": "int64"
            },
            "ItemsPerJobActivationTarget": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "description": "The target ratio between the number of queue items and the Total number of jobs created by a process.",
              "format": "int64"
            },
            "MaxJobsForActivation": {
              "maximum": 10000,
              "minimum": 1,
              "type": "integer",
              "description": "The maximum number of jobs that a process can create as result of a Queue driven activation.",
              "format": "int32"
            },
            "ResumeOnSameContext": {
              "type": "boolean",
              "description": "Flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />\r\nIf set, the jobs will resume on the same robot-machine pair on which they initially ran."
            },
            "Description": {
              "maxLength": 512,
              "type": "string",
              "description": "Description of process schedule."
            },
            "MachineRobots": {
              "type": "array",
              "description": "The machine robots.",
              "items": {
                "$ref": "#/components/schemas/MachineRobotSessionDto"
              }
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "AlertPendingExpression": {
              "type": "string"
            },
            "AlertRunningExpression": {
              "type": "string"
            },
            "RunAsMe": {
              "type": "boolean"
            },
            "ConsecutiveJobFailuresThreshold": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            },
            "JobFailuresGracePeriodInHours": {
              "maximum": 720,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            },
            "IsConnected": {
              "type": "boolean",
              "description": "Whether this process trigger represents a connected trigger defined in package bindings"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Defines the schedule of a process that can be executed at regular intervals, on selected Robots, all of them or a specified number of Robots."
        },
        "ProcessScheduleFailedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "ProcessSchedule": {
              "$ref": "#/components/schemas/WrappedProcessScheduleDto"
            },
            "Reason": {
              "type": "string",
              "readOnly": true
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "x-webhook-event": "schedule.failed"
        },
        "ProcessSetEnabledRequest": {
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "multistatusEnabled": {
              "type": "boolean"
            },
            "scheduleIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "ProcessSettingsDto": {
          "type": "object",
          "properties": {
            "ErrorRecordingEnabled": {
              "type": "boolean"
            },
            "Duration": {
              "type": "integer",
              "format": "int32"
            },
            "Frequency": {
              "type": "integer",
              "format": "int32"
            },
            "Quality": {
              "type": "integer",
              "format": "int32"
            },
            "AutoStartProcess": {
              "type": "boolean"
            },
            "AlwaysRunning": {
              "type": "boolean"
            }
          }
        },
        "ProcessesSetArgumentsRequest": {
          "required": [
            "arguments",
            "key"
          ],
          "type": "object",
          "properties": {
            "key": {
              "minLength": 1,
              "type": "string"
            },
            "arguments": {
              "$ref": "#/components/schemas/ArgumentMetadata"
            }
          }
        },
        "ProcessingExceptionDto": {
          "type": "object",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "The reason the processing failed."
            },
            "Details": {
              "type": "string",
              "description": "Stores additional details about the exception."
            },
            "Type": {
              "type": "string",
              "description": "The processing exception type, if any.",
              "enum": [
                "ApplicationException",
                "BusinessException"
              ],
              "x-ms-enum": {
                "name": "ProcessingExceptionDtoType",
                "modelAsString": false
              }
            },
            "AssociatedImageFilePath": {
              "type": "string",
              "description": "A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen."
            },
            "CreationTime": {
              "type": "string",
              "description": "Time when the exception occurred",
              "format": "date-time"
            }
          },
          "description": "Stores information about exceptions thrown while processing failed queue items."
        },
        "QueueCreatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Queues": {
              "type": "array",
              "description": "The queue that triggered the event",
              "items": {
                "$ref": "#/components/schemas/QueueDefinitionEventDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever queue definitions were created",
          "x-webhook-event": "queue.created"
        },
        "QueueDefinitionDto": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "A unique identifier associated to each queue.",
              "format": "uuid"
            },
            "Name": {
              "minLength": 1,
              "type": "string",
              "description": "A custom name for the queue."
            },
            "Description": {
              "type": "string",
              "description": "Used to add additional information about a queue in order to better identify it."
            },
            "MaxNumberOfRetries": {
              "type": "integer",
              "description": "An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.",
              "format": "int32"
            },
            "AcceptAutomaticallyRetry": {
              "type": "boolean",
              "description": "States whether a robot should retry to process an item if, after processing, it failed with application exception."
            },
            "EnforceUniqueReference": {
              "type": "boolean",
              "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule."
            },
            "Encrypted": {
              "type": "boolean",
              "description": "States whether the Queue Item's data will be encrypted in the database."
            },
            "SpecificDataJsonSchema": {
              "type": "string",
              "description": "JSON schema enforced onto the specific data field."
            },
            "OutputDataJsonSchema": {
              "type": "string",
              "description": "JSON schema enforced onto the output data field."
            },
            "AnalyticsDataJsonSchema": {
              "type": "string",
              "description": "JSON schema enforced onto the analytics data field."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the queue was created.",
              "format": "date-time"
            },
            "ProcessScheduleId": {
              "type": "integer",
              "description": "The Id of the process schedule associated with the queue.",
              "format": "int64"
            },
            "SlaInMinutes": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Queue item processing SLA on the QueueDefinition level.",
              "format": "int32"
            },
            "RiskSlaInMinutes": {
              "maximum": 2147483647,
              "minimum": 0,
              "type": "integer",
              "description": "Queue Item processing Risk SLA on the QueueDefinition level.",
              "format": "int32"
            },
            "ReleaseId": {
              "type": "integer",
              "description": "The ProcessId Queue is associated with.",
              "format": "int64"
            },
            "IsProcessInCurrentFolder": {
              "type": "boolean",
              "description": "Flag to determine if the release is in the current folder"
            },
            "FoldersCount": {
              "type": "integer",
              "description": "Number of folders where the queue is shared.",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "DEPRECATED. ",
              "format": "int64",
              "x-deprecated": true
            },
            "OrganizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "DEPRECATED. ",
              "x-deprecated": true
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "The definition of a work queue. A work queue contains work items that are processed by robots."
        },
        "QueueDefinitionEventDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            },
            "Name": {
              "type": "string",
              "description": "A custom name for the queue.",
              "readOnly": true
            },
            "Description": {
              "type": "string",
              "description": "Used to add additional information about a queue in order to better identify it.",
              "readOnly": true
            },
            "MaxNumberOfRetries": {
              "type": "integer",
              "description": "An integer value representing the number of times an item of this queue can be retried if its processing fails with application exception and auto retry is on.",
              "format": "int32",
              "readOnly": true
            },
            "AcceptAutomaticallyRetry": {
              "type": "boolean",
              "description": "States whether a robot should retry to process an item if, after processing, it failed with application exception.",
              "readOnly": true
            },
            "EnforceUniqueReference": {
              "type": "boolean",
              "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule.",
              "readOnly": true
            },
            "SlaInMinutes": {
              "type": "integer",
              "description": "An integer value representing the Queue SLA in minutes.",
              "format": "int32",
              "readOnly": true
            },
            "RiskSlaInMinutes": {
              "type": "integer",
              "description": "An integer value representing the Queue RiskSla in minutes.",
              "format": "int32",
              "readOnly": true
            }
          },
          "description": "The definition of a work queue. A work queue contains work items that are processed by robots."
        },
        "QueueDeletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Queues": {
              "type": "array",
              "description": "The queue that triggered the event",
              "items": {
                "$ref": "#/components/schemas/QueueDefinitionEventDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever queue definitions were deleted",
          "x-webhook-event": "queue.deleted"
        },
        "QueueFoldersShareDto": {
          "type": "object",
          "properties": {
            "QueueIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToAddFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToRemoveFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "QueueItemAddedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Queue": {
              "$ref": "#/components/schemas/QueueDefinitionEventDto"
            },
            "QueueItems": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/QueueItemSimpleEventDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever new queue items were added",
          "x-webhook-event": "queueItem.added"
        },
        "QueueItemCommentDto": {
          "required": [
            "Text"
          ],
          "type": "object",
          "properties": {
            "Text": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string",
              "description": "The comment body."
            },
            "QueueItemId": {
              "type": "integer",
              "description": "The Id of a Queue Item that the current item is connected to.",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "description": "DEPRECATED. The date and time when the comment was created.",
              "format": "date-time",
              "x-deprecated": true
            },
            "UserId": {
              "type": "integer",
              "description": "The id of the User that authored the comment.",
              "format": "int64"
            },
            "UserName": {
              "type": "string",
              "description": "The name of the User that authored the comment."
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about a comment posted by an Orchestrator user on a queue item."
        },
        "QueueItemCompletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "QueueItem": {
              "$ref": "#/components/schemas/QueueItemSimpleEventDto"
            },
            "Queue": {
              "$ref": "#/components/schemas/QueueDefinitionEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a queue item transaction has completed successfully",
          "x-webhook-event": "queueItem.transactionCompleted"
        },
        "QueueItemDataDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "The name of the queue into which the item will be added."
            },
            "Priority": {
              "type": "string",
              "description": "Sets the processing importance for a given item.",
              "enum": [
                "High",
                "Normal",
                "Low"
              ],
              "x-ms-enum": {
                "name": "QueueItemDataDtoPriority",
                "modelAsString": false
              }
            },
            "SpecificContent": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio."
            },
            "DeferDate": {
              "type": "string",
              "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
              "format": "date-time"
            },
            "DueDate": {
              "type": "string",
              "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
              "format": "date-time"
            },
            "RiskSlaDate": {
              "type": "string",
              "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
              "format": "date-time"
            },
            "Reference": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "description": "An optional, user-specified value for queue item identification."
            },
            "Progress": {
              "type": "string",
              "description": "String field which is used to keep track of the business flow progress."
            },
            "Source": {
              "maxLength": 20,
              "minLength": 0,
              "pattern": "Manual|Apps",
              "type": "string",
              "description": "The Source type of the item."
            }
          },
          "description": "Defines the work item content."
        },
        "QueueItemDeleteBulkRequest": {
          "type": "object",
          "properties": {
            "queueItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LongVersionedEntity"
              }
            }
          }
        },
        "QueueItemDto": {
          "type": "object",
          "properties": {
            "QueueDefinitionId": {
              "type": "integer",
              "description": "The Id of the parent queue.",
              "format": "int64"
            },
            "QueueDefinition": {
              "$ref": "#/components/schemas/QueueDefinitionDto"
            },
            "ProcessingException": {
              "$ref": "#/components/schemas/ProcessingExceptionDto"
            },
            "Encrypted": {
              "type": "boolean",
              "description": "Is the item has encrypted data in the database"
            },
            "SpecificContent": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio."
            },
            "Output": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data resulted after successful processing."
            },
            "OutputData": {
              "type": "string",
              "description": "A JSON representation of the output data generated by the item's processing."
            },
            "Analytics": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data for further analytics processing."
            },
            "AnalyticsData": {
              "type": "string",
              "description": "A JSON representation of the analytics data generated by the item's processing."
            },
            "Status": {
              "type": "string",
              "description": "The processing state of the item.",
              "enum": [
                "New",
                "InProgress",
                "Failed",
                "Successful",
                "Abandoned",
                "Retried",
                "Deleted"
              ],
              "x-ms-enum": {
                "name": "QueueItemDtoStatus",
                "modelAsString": false
              }
            },
            "ReviewStatus": {
              "type": "string",
              "description": "The review state of the item - applicable only for failed items.",
              "enum": [
                "None",
                "InReview",
                "Verified",
                "Retried"
              ],
              "x-ms-enum": {
                "name": "QueueItemDtoReviewStatus",
                "modelAsString": false
              }
            },
            "ReviewerUserId": {
              "type": "integer",
              "description": "The UserId of the Reviewer, if any.",
              "format": "int64"
            },
            "ReviewerUser": {
              "$ref": "#/components/schemas/SimpleUserDto"
            },
            "Key": {
              "type": "string",
              "description": "The unique identifier of a queue item.",
              "format": "uuid"
            },
            "Reference": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "description": "An optional, user-specified value for queue item identification."
            },
            "ProcessingExceptionType": {
              "type": "string",
              "description": "The processing exception. If the item has not been processed or has been processed successfully it will be null.",
              "enum": [
                "ApplicationException",
                "BusinessException"
              ],
              "x-ms-enum": {
                "name": "QueueItemDtoProcessingExceptionType",
                "modelAsString": false
              }
            },
            "DueDate": {
              "type": "string",
              "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
              "format": "date-time"
            },
            "RiskSlaDate": {
              "type": "string",
              "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
              "format": "date-time"
            },
            "Priority": {
              "type": "string",
              "description": "Sets the processing importance for a given item.",
              "enum": [
                "High",
                "Normal",
                "Low"
              ],
              "x-ms-enum": {
                "name": "QueueItemDtoPriority",
                "modelAsString": false
              }
            },
            "Robot": {
              "$ref": "#/components/schemas/SimpleRobotDto"
            },
            "DeferDate": {
              "type": "string",
              "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
              "format": "date-time"
            },
            "StartProcessing": {
              "type": "string",
              "description": "The date and time at which the item processing started. This is null if the item was not processed.",
              "format": "date-time"
            },
            "EndProcessing": {
              "type": "string",
              "description": "The date and time at which the item processing ended. This is null if the item was not processed.",
              "format": "date-time"
            },
            "SecondsInPreviousAttempts": {
              "type": "integer",
              "description": "The number of seconds that the last failed processing lasted.",
              "format": "int32"
            },
            "AncestorId": {
              "type": "integer",
              "description": "The Id of an ancestor item connected to the current item.",
              "format": "int64"
            },
            "RetryNumber": {
              "type": "integer",
              "description": "The number of times this work item has been processed.\r\n<para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.",
              "format": "int32"
            },
            "SpecificData": {
              "type": "string",
              "description": "A JSON representation of the specific content."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the item was created.",
              "format": "date-time"
            },
            "Progress": {
              "type": "string",
              "description": "String field which is used to keep track of the business flow progress."
            },
            "RowVersion": {
              "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
              "type": "string",
              "description": "Identifier used for optimistic concurrency, so Orchestrator can figure whether data is out of date or not.",
              "format": "byte"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "DEPRECATED. ",
              "format": "int64",
              "x-deprecated": true
            },
            "OrganizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "DEPRECATED. ",
              "x-deprecated": true
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Defines a piece of data that can be processed by a robot and the information associated with its processing status.\r\n<para />Queue items are grouped in queues."
        },
        "QueueItemEventDto": {
          "type": "object",
          "properties": {
            "QueueItemId": {
              "type": "integer",
              "description": "The Id of a Queue Item that the current item is connected to.",
              "format": "int64"
            },
            "Timestamp": {
              "type": "string",
              "description": "The Date and Time when the event occured.",
              "format": "date-time"
            },
            "Action": {
              "type": "string",
              "description": "The Action that caused the event.",
              "enum": [
                "Create",
                "Edit",
                "Delete",
                "Status",
                "Retry"
              ],
              "x-ms-enum": {
                "name": "QueueItemEventDtoAction",
                "modelAsString": false
              }
            },
            "Data": {
              "type": "string",
              "description": "The Data associated to the event."
            },
            "UserId": {
              "type": "integer",
              "description": "The Id of the User that caused the event.",
              "format": "int64"
            },
            "UserName": {
              "type": "string",
              "description": "The Name of the User that caused the event."
            },
            "Status": {
              "type": "string",
              "description": "Processing Status when event snapshot was taken.",
              "enum": [
                "New",
                "InProgress",
                "Failed",
                "Successful",
                "Abandoned",
                "Retried",
                "Deleted"
              ],
              "x-ms-enum": {
                "name": "QueueItemEventDtoStatus",
                "modelAsString": false
              }
            },
            "ReviewStatus": {
              "type": "string",
              "description": "Review Status when event snapshot was taken.",
              "enum": [
                "None",
                "InReview",
                "Verified",
                "Retried"
              ],
              "x-ms-enum": {
                "name": "QueueItemEventDtoReviewStatus",
                "modelAsString": false
              }
            },
            "ReviewerUserId": {
              "type": "integer",
              "description": "Reviewer User Id when event snapshot was taken.",
              "format": "int64"
            },
            "ReviewerUserName": {
              "type": "string",
              "description": "Reviewer User Name when event snapshot was taken."
            },
            "ExternalClientId": {
              "type": "string",
              "description": "The External client identifier that caused the event. Example: OAuth 3rd party app identifier that called Orchestrator."
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about an event on a queue item."
        },
        "QueueItemFailedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "QueueItem": {
              "$ref": "#/components/schemas/QueueItemSimpleEventDto"
            },
            "Queue": {
              "$ref": "#/components/schemas/QueueDefinitionEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a queue item transaction has failed",
          "x-webhook-event": "queueItem.transactionFailed"
        },
        "QueueItemSimpleEventDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "description": "The unique identifier of a queue item.",
              "format": "uuid",
              "readOnly": true
            },
            "Reference": {
              "type": "string",
              "description": "An optional, user-specified value for queue item identification.",
              "readOnly": true
            },
            "QueueDefinitionId": {
              "type": "integer",
              "description": "The Id of the parent queue.",
              "format": "int64",
              "readOnly": true
            },
            "Status": {
              "type": "string",
              "description": "The processing state of the item.",
              "readOnly": true,
              "enum": [
                "New",
                "InProgress",
                "Failed",
                "Successful",
                "Abandoned",
                "Retried",
                "Deleted"
              ],
              "x-ms-enum": {
                "name": "QueueItemSimpleEventDtoStatus",
                "modelAsString": false
              }
            },
            "ReviewStatus": {
              "type": "string",
              "description": "The review state of the item - applicable only for failed items.",
              "readOnly": true,
              "enum": [
                "None",
                "InReview",
                "Verified",
                "Retried"
              ],
              "x-ms-enum": {
                "name": "QueueItemSimpleEventDtoReviewStatus",
                "modelAsString": false
              }
            },
            "ProcessingException": {
              "$ref": "#/components/schemas/WrappedProcessingExceptionDto"
            },
            "DueDate": {
              "type": "string",
              "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
              "format": "date-time",
              "readOnly": true
            },
            "Priority": {
              "type": "string",
              "description": "Sets the processing importance for a given item.",
              "readOnly": true,
              "enum": [
                "High",
                "Normal",
                "Low"
              ],
              "x-ms-enum": {
                "name": "QueueItemSimpleEventDtoPriority",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the item was created.",
              "format": "date-time",
              "readOnly": true
            },
            "DeferDate": {
              "type": "string",
              "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
              "format": "date-time",
              "readOnly": true
            },
            "StartProcessing": {
              "type": "string",
              "description": "The date and time at which the item processing started. This is null if the item was not processed.",
              "format": "date-time",
              "readOnly": true
            },
            "EndProcessing": {
              "type": "string",
              "description": "The date and time at which the item processing ended. This is null if the item was not processed.",
              "format": "date-time",
              "readOnly": true
            },
            "CreatorJobId": {
              "type": "integer",
              "description": "The id for the job that created the queue item",
              "format": "int64",
              "readOnly": true
            },
            "ExecutorJobId": {
              "type": "integer",
              "description": "The id for the job that processed the queue item",
              "format": "int64",
              "readOnly": true
            },
            "CreatorUserId": {
              "type": "integer",
              "description": "The id for the user that created the queue item",
              "format": "int64",
              "readOnly": true
            },
            "RiskSlaDate": {
              "type": "string",
              "description": "The RiskSla date at time which is considered as risk zone for the item to be processed.",
              "format": "date-time",
              "readOnly": true
            },
            "SecondsInPreviousAttempts": {
              "type": "integer",
              "description": "The number of seconds that the last failed processing lasted.",
              "format": "int32",
              "readOnly": true
            },
            "AncestorId": {
              "type": "integer",
              "description": "The Id of an ancestor item connected to the current item.",
              "format": "int64",
              "readOnly": true
            },
            "RetryNumber": {
              "type": "integer",
              "description": "The number of times this work item has been processed.\r\n<para />This can be higher than 0 only if MaxRetried number is set and the item processing failed at least once with ApplicationException.",
              "format": "int32",
              "readOnly": true
            },
            "Progress": {
              "type": "string",
              "description": "String field which is used to keep track of the business flow progress.",
              "readOnly": true
            },
            "ReviewerUserId": {
              "type": "integer",
              "description": "The UserId of the Reviewer, if any.",
              "format": "int64",
              "readOnly": true
            },
            "Robot": {
              "$ref": "#/components/schemas/WrappedRobotDto"
            },
            "ReviewerUser": {
              "$ref": "#/components/schemas/WebhookSimpleUserDto"
            },
            "SpecificContent": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data configured in the Add Queue Item activity, in UiPath Studio.",
              "readOnly": true
            },
            "Output": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data resulted after successful processing.",
              "readOnly": true
            },
            "Source": {
              "type": "string",
              "description": "Where the queue item was created",
              "readOnly": true
            }
          }
        },
        "QueueItemStartedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "QueueItem": {
              "$ref": "#/components/schemas/QueueItemSimpleEventDto"
            },
            "Queue": {
              "$ref": "#/components/schemas/QueueDefinitionEventDto"
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a new queue item transaction is started",
          "x-webhook-event": "queueItem.transactionStarted"
        },
        "QueueItemsAbandonedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Queue": {
              "$ref": "#/components/schemas/QueueDefinitionEventDto"
            },
            "QueueItems": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/QueueItemSimpleEventDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever queue item transactions have expired and were abandoned",
          "x-webhook-event": "queueItem.transactionAbandoned"
        },
        "QueueProcessingRecordDto": {
          "type": "object",
          "properties": {
            "QueueDefinitionId": {
              "type": "integer",
              "description": "The Id of the queue for which the report is done.",
              "format": "int64"
            },
            "UiQueueMetadata": {
              "$ref": "#/components/schemas/QueueDefinitionDto"
            },
            "ProcessingTime": {
              "type": "string",
              "description": "The date and time when the report is computed.",
              "format": "date-time"
            },
            "ReportType": {
              "type": "string",
              "description": "The aggregation period used in the report.",
              "enum": [
                "All",
                "Minute",
                "Hour",
                "Day"
              ],
              "x-ms-enum": {
                "name": "QueueProcessingRecordDtoReportType",
                "modelAsString": false
              }
            },
            "NumberOfRemainingTransactions": {
              "type": "integer",
              "description": "The number of unprocessed (new) items.",
              "format": "int32"
            },
            "NumberOfInProgressTransactions": {
              "type": "integer",
              "description": "The number of items in progress.",
              "format": "int32"
            },
            "NumberOfApplicationExceptions": {
              "type": "integer",
              "description": "The total number of application exceptions thrown while processing queue items in the given time period.",
              "format": "int32"
            },
            "NumberOfBusinessExceptions": {
              "type": "integer",
              "description": "The total number of business exceptions thrown while processing queue items in the given time period.",
              "format": "int32"
            },
            "NumberOfSuccessfulTransactions": {
              "type": "integer",
              "description": "The total number of successfully processed queue items in the given time period.",
              "format": "int32"
            },
            "NumberOfRetriedItems": {
              "type": "integer",
              "description": "The total number of processing retries occurred in the given time period.",
              "format": "int32"
            },
            "ApplicationExceptionsProcessingTime": {
              "type": "number",
              "description": "The total number of seconds spent processing queue items that failed with application exception in the given time period.",
              "format": "decimal"
            },
            "BusinessExceptionsProcessingTime": {
              "type": "number",
              "description": "The total number of seconds spent processing queue items that failed with business exception in the given time period.",
              "format": "decimal"
            },
            "SuccessfulTransactionsProcessingTime": {
              "type": "number",
              "description": "The total number of seconds spent processing successful queue items in the given time period.",
              "format": "decimal"
            },
            "TotalNumberOfTransactions": {
              "type": "integer",
              "description": "The total number of item processing transactions, both failed and successful.",
              "format": "int32"
            },
            "TenantId": {
              "type": "integer",
              "description": "The Id of the queue tenant.",
              "format": "int32"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores aggregated report information about the processing status of all the items from a given queue in a specific time period."
        },
        "QueueProcessingStatusDto": {
          "type": "object",
          "properties": {
            "ItemsToProcess": {
              "type": "integer",
              "description": "The total number of items in the queue with the status New.",
              "format": "int32"
            },
            "ItemsInProgress": {
              "type": "integer",
              "description": "The total number of items in the queue with the status InProgress.",
              "format": "int32"
            },
            "QueueDefinitionId": {
              "type": "integer",
              "description": "The Id of the queue for which the report is done.",
              "format": "int64"
            },
            "QueueDefinitionKey": {
              "type": "string",
              "description": "The Key of the queue for which the report is done.",
              "format": "uuid"
            },
            "QueueDefinitionName": {
              "type": "string",
              "description": "The name of the queue for which the report is done."
            },
            "QueueDefinitionDescription": {
              "type": "string",
              "description": "The description of the queue for which the report is done."
            },
            "QueueDefinitionAcceptAutomaticallyRetry": {
              "type": "boolean",
              "description": "States whether the queue accepts automatic item retry or not."
            },
            "QueueDefinitionMaxNumberOfRetries": {
              "type": "integer",
              "description": "The maximum number of retries allowed for any item of the queue.",
              "format": "int32"
            },
            "QueueDefinitionEnforceUniqueReference": {
              "type": "boolean",
              "description": "States whether Item Reference field should be unique per Queue. Deleted and retried items are not checked against this rule."
            },
            "ProcessingMeanTime": {
              "type": "number",
              "description": "The average time spent processing a successful item.",
              "format": "decimal"
            },
            "SuccessfulTransactionsNo": {
              "type": "integer",
              "description": "The total number of successfully processed items.",
              "format": "int32"
            },
            "ApplicationExceptionsNo": {
              "type": "integer",
              "description": "The total number of application exceptions thrown while processing queue items.",
              "format": "int32"
            },
            "BusinessExceptionsNo": {
              "type": "integer",
              "description": "The total number of business exceptions thrown while processing queue items.",
              "format": "int32"
            },
            "SuccessfulTransactionsProcessingTime": {
              "type": "number",
              "description": "The total number of seconds spent processing successful queue items.",
              "format": "decimal"
            },
            "ApplicationExceptionsProcessingTime": {
              "type": "number",
              "description": "The total number of seconds spent processing queue items that failed with application exception.",
              "format": "decimal"
            },
            "BusinessExceptionsProcessingTime": {
              "type": "number",
              "description": "The total number of seconds spent processing queue items that failed with business exception.",
              "format": "decimal"
            },
            "TotalNumberOfTransactions": {
              "type": "integer",
              "description": "The total number of item processing transactions, both failed and successful.",
              "format": "int32"
            },
            "LastProcessed": {
              "type": "string",
              "description": "The date and time of the last item processing.",
              "format": "date-time"
            },
            "ReleaseName": {
              "type": "string",
              "description": "The name of the process associated with the queue."
            },
            "ReleaseId": {
              "type": "integer",
              "description": "The ProcessId Queue is associated with.",
              "format": "int64"
            },
            "IsProcessInCurrentFolder": {
              "type": "boolean",
              "description": "Flag to determine if the release is in the current folder"
            },
            "SpecificDataJsonSchemaExists": {
              "type": "boolean",
              "description": "Optional JSON schema enforced onto the specific data field is set."
            },
            "OutputDataJsonSchemaExists": {
              "type": "boolean",
              "description": "Optional JSON schema enforced onto the output data field is set."
            },
            "AnalyticsDataJsonSchemaExists": {
              "type": "boolean",
              "description": "Optional JSON schema enforced onto the analytics data field is set."
            },
            "ProcessScheduleId": {
              "type": "integer",
              "description": "The Id of the process schedule associated with the queue.",
              "format": "int64"
            },
            "QueueFoldersCount": {
              "type": "integer",
              "description": "The number of folders where the queue definition is shared.",
              "format": "int32"
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores aggregated report information about the processing status of all the items from a given queue."
        },
        "QueueRetentionSettingDto": {
          "type": "object",
          "properties": {
            "QueueDefinitionId": {
              "type": "integer",
              "format": "int64"
            },
            "Action": {
              "type": "string",
              "description": "Action cannot be None for Cloud.",
              "enum": [
                "Delete",
                "Archive",
                "None"
              ],
              "x-ms-enum": {
                "name": "BaseRetentionSettingDtoAction",
                "modelAsString": false
              }
            },
            "Period": {
              "type": "integer",
              "format": "int32"
            },
            "BucketId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "QueueSetItemReviewStatusRequest": {
          "required": [
            "queueItems",
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "minLength": 1,
              "type": "string"
            },
            "queueItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LongVersionedEntity"
              }
            }
          }
        },
        "QueueSetItemReviewerRequest": {
          "required": [
            "queueItems",
            "userId"
          ],
          "type": "object",
          "properties": {
            "userId": {
              "type": "integer",
              "format": "int64"
            },
            "queueItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LongVersionedEntity"
              }
            }
          }
        },
        "QueueSetTransactionProgressRequest": {
          "type": "object",
          "properties": {
            "progress": {
              "type": "string"
            }
          }
        },
        "QueueSetTransactionResultRequest": {
          "required": [
            "transactionResult"
          ],
          "type": "object",
          "properties": {
            "transactionResult": {
              "$ref": "#/components/schemas/TransactionResultDto"
            }
          }
        },
        "QueueUnsetItemReviewerRequest": {
          "required": [
            "queueItems"
          ],
          "type": "object",
          "properties": {
            "queueItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LongVersionedEntity"
              }
            }
          }
        },
        "QueueUpdatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Queues": {
              "type": "array",
              "description": "The queue that triggered the event",
              "items": {
                "$ref": "#/components/schemas/QueueDefinitionEventDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever queue definitions were updated",
          "x-webhook-event": "queue.updated"
        },
        "QueuesStartTransactionRequest": {
          "required": [
            "transactionData"
          ],
          "type": "object",
          "properties": {
            "transactionData": {
              "$ref": "#/components/schemas/TransactionDataDto"
            }
          }
        },
        "RaiseProcessAlertRequest": {
          "required": [
            "processAlert"
          ],
          "type": "object",
          "properties": {
            "processAlert": {
              "$ref": "#/components/schemas/ProcessAlertDto"
            }
          }
        },
        "ReexecuteTestCasesOptionsDto": {
          "required": [
            "testCaseExecutions"
          ],
          "type": "object",
          "properties": {
            "testCaseExecutions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseExecutionArgumentsDto"
              }
            },
            "robotId": {
              "type": "integer",
              "format": "int64"
            },
            "machineId": {
              "type": "integer",
              "format": "int64"
            },
            "machineSessionId": {
              "type": "integer",
              "format": "int64"
            },
            "runtimeType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "ReexecuteTestCasesOptionsDtoRuntimeType",
                "modelAsString": false
              }
            },
            "enforceExecutionOrder": {
              "type": "boolean"
            }
          }
        },
        "ReleaseCreatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Releases": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedReleaseDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a new release has been created",
          "x-webhook-event": "process.created"
        },
        "ReleaseDeletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Releases": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedReleaseDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a release has been deleted",
          "x-webhook-event": "process.deleted"
        },
        "ReleaseDto": {
          "required": [
            "Name",
            "ProcessKey",
            "ProcessVersion"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "A unique identifier associated to each release."
            },
            "ProcessKey": {
              "minLength": 1,
              "type": "string",
              "description": "The unique identifier of the process associated with the release."
            },
            "ProcessVersion": {
              "minLength": 1,
              "type": "string",
              "description": "The version of the process associated with the release."
            },
            "IsLatestVersion": {
              "type": "boolean",
              "description": "States whether the version of process associated with the release is latest or not."
            },
            "IsProcessDeleted": {
              "type": "boolean",
              "description": "States whether the process associated with the release is deleted or not."
            },
            "Description": {
              "type": "string",
              "description": "Used to add additional information about a release in order to better identify it."
            },
            "Name": {
              "minLength": 1,
              "type": "string",
              "description": "A custom name of the release. The default name format is ProcessName_EnvironmentName."
            },
            "EnvironmentId": {
              "type": "integer",
              "description": "The Id of the environment associated with the release.",
              "format": "int64"
            },
            "EnvironmentName": {
              "type": "string",
              "description": "The name of the environment associated with the release."
            },
            "Environment": {
              "$ref": "#/components/schemas/EnvironmentDto"
            },
            "EntryPointId": {
              "type": "integer",
              "format": "int64"
            },
            "EntryPointPath": {
              "type": "string"
            },
            "EntryPoint": {
              "$ref": "#/components/schemas/EntryPointDto"
            },
            "InputArguments": {
              "maxLength": 10000,
              "type": "string",
              "description": "Input parameters in JSON format to be passed as default values to job execution."
            },
            "ProcessType": {
              "type": "string",
              "enum": [
                "Undefined",
                "Process",
                "TestAutomationProcess"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoProcessType",
                "modelAsString": false
              }
            },
            "SupportsMultipleEntryPoints": {
              "type": "boolean"
            },
            "RequiresUserInteraction": {
              "type": "boolean"
            },
            "IsAttended": {
              "type": "boolean"
            },
            "IsCompiled": {
              "type": "boolean"
            },
            "AutomationHubIdeaUrl": {
              "type": "string"
            },
            "CurrentVersion": {
              "$ref": "#/components/schemas/ReleaseVersionDto"
            },
            "ReleaseVersions": {
              "type": "array",
              "description": "The collection of release versions that current release had over time.",
              "items": {
                "$ref": "#/components/schemas/ReleaseVersionDto"
              }
            },
            "Arguments": {
              "$ref": "#/components/schemas/ArgumentMetadata"
            },
            "ProcessSettings": {
              "$ref": "#/components/schemas/ProcessSettingsDto"
            },
            "VideoRecordingSettings": {
              "$ref": "#/components/schemas/VideoRecordingSettingsDto"
            },
            "AutoUpdate": {
              "type": "boolean"
            },
            "HiddenForAttendedUser": {
              "type": "boolean"
            },
            "FeedId": {
              "type": "string",
              "format": "uuid"
            },
            "JobPriority": {
              "type": "string",
              "description": "The execution priority. If null, it defaults to Normal.",
              "enum": [
                "Low",
                "Normal",
                "High"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoJobPriority",
                "modelAsString": false
              }
            },
            "SpecificPriorityValue": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Value for more granular control over execution priority.",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "Id of the folder this release is part of.",
              "format": "int64"
            },
            "OrganizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "Fully qualified name of the folder this release is part of."
            },
            "TargetFramework": {
              "type": "string",
              "enum": [
                "Legacy",
                "Windows",
                "Portable"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoTargetFramework",
                "modelAsString": false
              }
            },
            "RobotSize": {
              "type": "string",
              "enum": [
                "Small",
                "Standard",
                "Medium",
                "Large"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoRobotSize",
                "modelAsString": false
              }
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "RemoteControlAccess": {
              "type": "string",
              "enum": [
                "None",
                "ReadOnly",
                "Full"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoRemoteControlAccess",
                "modelAsString": false
              }
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ReleaseRetentionSettingDto": {
          "type": "object",
          "properties": {
            "ReleaseId": {
              "type": "integer",
              "format": "int64"
            },
            "Action": {
              "type": "string",
              "description": "Action cannot be None for Cloud.",
              "enum": [
                "Delete",
                "Archive",
                "None"
              ],
              "x-ms-enum": {
                "name": "BaseRetentionSettingDtoAction",
                "modelAsString": false
              }
            },
            "Period": {
              "type": "integer",
              "format": "int32"
            },
            "BucketId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ReleaseUpdatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Releases": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedReleaseDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever a release has been updated",
          "x-webhook-event": "process.updated"
        },
        "ReleaseVersionDto": {
          "required": [
            "ReleaseId",
            "VersionNumber"
          ],
          "type": "object",
          "properties": {
            "ReleaseId": {
              "type": "integer",
              "description": "The Id of the parent release.",
              "format": "int64"
            },
            "VersionNumber": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "description": "The version of process associated with the release."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the version was associated with the release.",
              "format": "date-time"
            },
            "ReleaseName": {
              "type": "string",
              "description": "The name of the process associated with the release."
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores data about a version of the various versions of the process associated with a certain release.\r\n<para />If a certain version is associated on and off with a release a new ReleaseVersion object is created for each association."
        },
        "ReleasesUpdateToLatestPackageVersionBulkRequest": {
          "required": [
            "releaseIds"
          ],
          "type": "object",
          "properties": {
            "releaseIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "mergePackageTags": {
              "type": "boolean"
            }
          }
        },
        "ReleasesUpdateToSpecificPackageVersionRequest": {
          "required": [
            "packageVersion"
          ],
          "type": "object",
          "properties": {
            "packageVersion": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "RemoveMachinesFromFolderRequest": {
          "required": [
            "machineIds"
          ],
          "type": "object",
          "properties": {
            "machineIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "RemoveUserFromFolderRequest": {
          "required": [
            "userId"
          ],
          "type": "object",
          "properties": {
            "userId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ResourceOverwriteDto": {
          "required": [
            "resourceKey",
            "resourceType"
          ],
          "type": "object",
          "properties": {
            "properties2": {
              "maxItems": 20,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NameValueDto"
              }
            },
            "resourceType": {
              "type": "string",
              "description": "The type of the resource to be overwritten",
              "enum": [
                "Unknown",
                "Queue",
                "Asset",
                "Bucket",
                "Process",
                "TaskCatalog",
                "Entity",
                "Connection",
                "TimeTrigger",
                "EventTrigger",
                "QueueTrigger",
                "AppsTrigger",
                "Property"
              ],
              "x-ms-enum": {
                "name": "ResourceOverwriteDto`1ResourceType",
                "modelAsString": false
              }
            },
            "resourceKey": {
              "minLength": 1,
              "type": "string",
              "description": "The key of the resource to be overwritten"
            },
            "entityId": {
              "maxLength": 50,
              "type": "string",
              "description": "The id of the entity that overwrites the resource (e.g. ConnectionId)"
            },
            "properties": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "Custom property overwrites"
            },
            "entityDisplayName": {
              "type": "string",
              "description": "The name of the entity that overwrites the resource (e.g. ConnectionName)"
            },
            "entityFolderId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ResponseDictionaryDto": {
          "type": "object",
          "properties": {
            "Keys": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Values": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Data type used to return Dictionary(string, string)"
        },
        "RestartJobRequest": {
          "required": [
            "jobId"
          ],
          "type": "object",
          "properties": {
            "jobId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "ResumeJobRequest": {
          "required": [
            "jobKey"
          ],
          "type": "object",
          "properties": {
            "jobKey": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "RobotAssetDto": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "The asset name."
            },
            "ValueType": {
              "type": "string",
              "description": "Defines the type of value stored by the asset.",
              "enum": [
                "DBConnectionString",
                "HttpConnectionString",
                "Text",
                "Bool",
                "Integer",
                "Credential",
                "WindowsCredential",
                "KeyValueList"
              ],
              "x-ms-enum": {
                "name": "RobotAssetDtoValueType",
                "modelAsString": false
              }
            },
            "StringValue": {
              "maxLength": 1000000,
              "type": "string",
              "description": "The value of the asset when the value type is Text. Empty when the value type is not Text."
            },
            "BoolValue": {
              "type": "boolean",
              "description": "The value of the asset when the value type is Bool. False when the value type is not Bool."
            },
            "IntValue": {
              "type": "integer",
              "description": "The value of the asset when the value type is Integer. 0 when the value type is not Integer.",
              "format": "int32"
            },
            "CredentialUsername": {
              "type": "string",
              "description": "The user name when the value type is Credential. Empty when the value type is not Credential."
            },
            "CredentialPassword": {
              "type": "string",
              "description": "The password when the value type is Credential. Empty when the value type is not Credential."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the credentials."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the credentials.",
              "format": "int64"
            },
            "KeyValueList": {
              "type": "array",
              "description": "A collection of key value pairs when the type is KeyValueList. Empty when the value type is not KeyValueList.",
              "items": {
                "$ref": "#/components/schemas/CustomKeyValuePair"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "A robot asset stores the information of a per robot asset for a specific robot, without specifying the robot."
        },
        "RobotCreatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Robots": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedRobotDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever robots were created",
          "x-webhook-event": "robot.created"
        },
        "RobotDeleteBulkRequest": {
          "required": [
            "robotIds"
          ],
          "type": "object",
          "properties": {
            "robotIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "RobotDeletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Robots": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedRobotDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever robots were deleted",
          "x-webhook-event": "robot.deleted"
        },
        "RobotDto": {
          "required": [
            "HostingType",
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "LicenseKey": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly."
            },
            "MachineName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the machine a Robot is hosted on",
              "format": "int64"
            },
            "Name": {
              "maxLength": 19,
              "minLength": 0,
              "type": "string",
              "description": "A custom name for the robot."
            },
            "Username": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the password."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string",
              "description": "Used to add additional information about a robot in order to better identify it."
            },
            "Type": {
              "type": "string",
              "description": "The Robot type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "RobotDtoType",
                "modelAsString": false
              }
            },
            "HostingType": {
              "type": "string",
              "description": "The Robot hosting type (Standard / Floating).",
              "enum": [
                "Standard",
                "Floating"
              ],
              "x-ms-enum": {
                "name": "RobotDtoHostingType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The Robot provision type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "RobotDtoProvisionType",
                "modelAsString": false
              }
            },
            "Password": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The Windows password associated with the machine username."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the password.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "The associated user's Id.",
              "format": "int64"
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator"
            },
            "CredentialType": {
              "type": "string",
              "description": "The robot credentials type (Default/ SmartCard)",
              "enum": [
                "Default",
                "SmartCard",
                "NCipher",
                "SafeNet",
                "NoCredential"
              ],
              "x-ms-enum": {
                "name": "RobotDtoCredentialType",
                "modelAsString": false
              }
            },
            "Environments": {
              "type": "array",
              "description": "The collection of environments the robot is part of.",
              "items": {
                "$ref": "#/components/schemas/EnvironmentDto"
              }
            },
            "RobotEnvironments": {
              "type": "string",
              "description": "The comma separated textual representation of environment names the robot is part of."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing execution settings for this robot."
            },
            "IsExternalLicensed": {
              "type": "boolean",
              "description": "Flag to indicate if the robot uses an external license"
            },
            "LimitConcurrentExecution": {
              "type": "boolean",
              "description": "Specifies if the robot can be used concurrently on multiple machines"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "A Robot is an execution host that runs processes built in UiPath Studio."
        },
        "RobotExecutorDto": {
          "type": "object",
          "properties": {
            "MachineName": {
              "type": "string",
              "description": "The name of the machine on which the robot runs the job."
            },
            "Name": {
              "type": "string",
              "description": "The name of the robot that runs the job."
            },
            "Description": {
              "type": "string",
              "description": "The description of the robot that runs the job."
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about a robot on which a process will be executed."
        },
        "RobotLicenseDto": {
          "type": "object",
          "properties": {
            "RobotId": {
              "type": "integer",
              "description": "The associated Robot's Id",
              "format": "int64"
            },
            "Timestamp": {
              "type": "string",
              "description": "The date when the license was acquired",
              "format": "date-time"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Entity that represents an acquired Robot license"
        },
        "RobotUpdatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Robots": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedRobotDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever robots were updated",
          "x-webhook-event": "robot.updated"
        },
        "RobotUserDto": {
          "required": [
            "RobotId"
          ],
          "type": "object",
          "properties": {
            "UserName": {
              "type": "string",
              "description": "The name of the user."
            },
            "RobotId": {
              "type": "integer",
              "description": "The Id of the Robot.",
              "format": "int64"
            },
            "HasTriggers": {
              "type": "boolean",
              "description": "Whether the machine robot has triggers defined or not."
            }
          }
        },
        "RobotWithLicenseDto": {
          "required": [
            "HostingType",
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "License": {
              "$ref": "#/components/schemas/RobotLicenseDto"
            },
            "User": {
              "$ref": "#/components/schemas/UserDto"
            },
            "LicenseKey": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly."
            },
            "MachineName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the machine a Robot is hosted on",
              "format": "int64"
            },
            "Name": {
              "maxLength": 19,
              "minLength": 0,
              "type": "string",
              "description": "A custom name for the robot."
            },
            "Username": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the password."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string",
              "description": "Used to add additional information about a robot in order to better identify it."
            },
            "Type": {
              "type": "string",
              "description": "The Robot type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "RobotDtoType",
                "modelAsString": false
              }
            },
            "HostingType": {
              "type": "string",
              "description": "The Robot hosting type (Standard / Floating).",
              "enum": [
                "Standard",
                "Floating"
              ],
              "x-ms-enum": {
                "name": "RobotDtoHostingType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The Robot provision type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "RobotDtoProvisionType",
                "modelAsString": false
              }
            },
            "Password": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The Windows password associated with the machine username."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the password.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "The associated user's Id.",
              "format": "int64"
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator"
            },
            "CredentialType": {
              "type": "string",
              "description": "The robot credentials type (Default/ SmartCard)",
              "enum": [
                "Default",
                "SmartCard",
                "NCipher",
                "SafeNet",
                "NoCredential"
              ],
              "x-ms-enum": {
                "name": "RobotDtoCredentialType",
                "modelAsString": false
              }
            },
            "Environments": {
              "type": "array",
              "description": "The collection of environments the robot is part of.",
              "items": {
                "$ref": "#/components/schemas/EnvironmentDto"
              }
            },
            "RobotEnvironments": {
              "type": "string",
              "description": "The comma separated textual representation of environment names the robot is part of."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing execution settings for this robot."
            },
            "IsExternalLicensed": {
              "type": "boolean",
              "description": "Flag to indicate if the robot uses an external license"
            },
            "LimitConcurrentExecution": {
              "type": "boolean",
              "description": "Specifies if the robot can be used concurrently on multiple machines"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Entity derived from RobotDto. Is shares all the properties of the base entity and includes the license field."
        },
        "RobotsConvertToFloatingRequest": {
          "required": [
            "robotId"
          ],
          "type": "object",
          "properties": {
            "robotId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "RobotsFromFolderModel": {
          "required": [
            "HostingType",
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "UserType": {
              "type": "string",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "RobotsFromFolderModelUserType",
                "modelAsString": false
              }
            },
            "UserEmail": {
              "type": "string"
            },
            "UserFullName": {
              "type": "string"
            },
            "LicenseKey": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly."
            },
            "MachineName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the machine a Robot is hosted on",
              "format": "int64"
            },
            "Name": {
              "maxLength": 19,
              "minLength": 0,
              "type": "string",
              "description": "A custom name for the robot."
            },
            "Username": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the password."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string",
              "description": "Used to add additional information about a robot in order to better identify it."
            },
            "Type": {
              "type": "string",
              "description": "The Robot type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "RobotDtoType",
                "modelAsString": false
              }
            },
            "HostingType": {
              "type": "string",
              "description": "The Robot hosting type (Standard / Floating).",
              "enum": [
                "Standard",
                "Floating"
              ],
              "x-ms-enum": {
                "name": "RobotDtoHostingType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The Robot provision type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "RobotDtoProvisionType",
                "modelAsString": false
              }
            },
            "Password": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The Windows password associated with the machine username."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the password.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "The associated user's Id.",
              "format": "int64"
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator"
            },
            "CredentialType": {
              "type": "string",
              "description": "The robot credentials type (Default/ SmartCard)",
              "enum": [
                "Default",
                "SmartCard",
                "NCipher",
                "SafeNet",
                "NoCredential"
              ],
              "x-ms-enum": {
                "name": "RobotDtoCredentialType",
                "modelAsString": false
              }
            },
            "Environments": {
              "type": "array",
              "description": "The collection of environments the robot is part of.",
              "items": {
                "$ref": "#/components/schemas/EnvironmentDto"
              }
            },
            "RobotEnvironments": {
              "type": "string",
              "description": "The comma separated textual representation of environment names the robot is part of."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing execution settings for this robot."
            },
            "IsExternalLicensed": {
              "type": "boolean",
              "description": "Flag to indicate if the robot uses an external license"
            },
            "LimitConcurrentExecution": {
              "type": "boolean",
              "description": "Specifies if the robot can be used concurrently on multiple machines"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "RobotsToggleEnabledStatusRequest": {
          "required": [
            "enabled",
            "robotIds"
          ],
          "type": "object",
          "properties": {
            "robotIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "RoleDto": {
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 64,
              "type": "string",
              "description": "A custom name for the role."
            },
            "DisplayName": {
              "maxLength": 64,
              "type": "string",
              "description": "An alternative name used for UI display."
            },
            "Type": {
              "type": "string",
              "description": "Can be: Mixed, Tenant or Folder based on the permissions it includes",
              "enum": [
                "Mixed",
                "Tenant",
                "Folder"
              ],
              "x-ms-enum": {
                "name": "RoleDtoType",
                "modelAsString": false
              }
            },
            "Groups": {
              "type": "string",
              "description": "Allows grouping multiple roles together."
            },
            "IsStatic": {
              "type": "boolean",
              "description": "States whether this role is defined by the application and cannot be deleted or it is user defined and can be deleted."
            },
            "IsEditable": {
              "type": "boolean",
              "description": "States whether the permissions for this role can be modified or not."
            },
            "Permissions": {
              "type": "array",
              "description": "The collection of application permissions associated with the role.",
              "items": {
                "$ref": "#/components/schemas/PermissionDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int32"
            }
          },
          "description": "A role acts as a grouping of permissions. Roles are associated with users to provide application authorization."
        },
        "RoleUsersDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string"
            },
            "Users": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SimpleUserEntityDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "SessionDto": {
          "type": "object",
          "properties": {
            "Robot": {
              "$ref": "#/components/schemas/RobotWithLicenseDto"
            },
            "HostMachineName": {
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the Machine.",
              "format": "int64"
            },
            "MachineName": {
              "type": "string",
              "description": "The Machine's name."
            },
            "State": {
              "type": "string",
              "description": "The value of the last reported status.",
              "enum": [
                "Available",
                "Busy",
                "Disconnected",
                "Unknown"
              ],
              "x-ms-enum": {
                "name": "SessionDtoState",
                "modelAsString": false
              }
            },
            "Job": {
              "$ref": "#/components/schemas/JobDto"
            },
            "ReportingTime": {
              "type": "string",
              "description": "The date and time when the last heartbeat came.",
              "format": "date-time"
            },
            "Info": {
              "type": "string",
              "description": "May store additional information about the robot state."
            },
            "IsUnresponsive": {
              "type": "boolean",
              "description": "If the robot did not report status for longer than 120 seconds."
            },
            "LicenseErrorCode": {
              "type": "string",
              "description": "DEPRECATED. Last licensing error status.",
              "enum": [
                "NoLicense",
                "LicenseExpired",
                "LicenseUnregistered",
                "NoAvailableLicenses",
                "NotEnoughAvailableSlots",
                "NotEnoughRuntimeLicenses",
                "LicenseIsAlreadyInUse",
                "InvalidRequest",
                "SlotsExceedLicenseLimit",
                "RuntimeDisabled",
                "ExternalNotSupported",
                "UsageExceedsLicenseLimit",
                "LicenseNotCompatible"
              ],
              "x-ms-enum": {
                "name": "SessionDtoLicenseErrorCode",
                "modelAsString": false
              },
              "x-deprecated": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "The folder Id.",
              "format": "int64"
            },
            "FolderName": {
              "type": "string",
              "description": "The folder display name."
            },
            "RobotSessionType": {
              "type": "string",
              "description": "The robot session type.",
              "enum": [
                "LongLived",
                "Ephemeral"
              ],
              "x-ms-enum": {
                "name": "SessionDtoRobotSessionType",
                "modelAsString": false
              }
            },
            "Version": {
              "type": "string"
            },
            "Source": {
              "type": "string",
              "enum": [
                "Assistant",
                "StudioWeb",
                "StudioDesktop"
              ],
              "x-ms-enum": {
                "name": "SessionDtoSource",
                "modelAsString": false
              }
            },
            "DebugModeExpirationDate": {
              "type": "string",
              "format": "date-time"
            },
            "UpdateInfo": {
              "$ref": "#/components/schemas/UpdateInfoDto"
            },
            "InstallationId": {
              "type": "string",
              "format": "uuid"
            },
            "Platform": {
              "type": "string",
              "enum": [
                "Unknown",
                "Windows",
                "Linux",
                "OSX"
              ],
              "x-ms-enum": {
                "name": "SessionDtoPlatform",
                "modelAsString": false
              }
            },
            "EndpointDetection": {
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about the last status reported to Orchestrator by a registered robot."
        },
        "SessionEventData": {
          "type": "object",
          "properties": {
            "SessionId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "RobotId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "MachineId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "MachineKey": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            },
            "HostMachineName": {
              "type": "string",
              "readOnly": true
            },
            "ServiceUsername": {
              "type": "string",
              "readOnly": true
            },
            "State": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Available",
                "Busy",
                "Disconnected",
                "Unknown"
              ],
              "x-ms-enum": {
                "name": "SessionEventDataState",
                "modelAsString": false
              }
            },
            "ReportingTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "IsUnresponsive": {
              "type": "boolean",
              "readOnly": true
            },
            "LicenseErrorCode": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "NoLicense",
                "LicenseExpired",
                "LicenseUnregistered",
                "NoAvailableLicenses",
                "NotEnoughAvailableSlots",
                "NotEnoughRuntimeLicenses",
                "LicenseIsAlreadyInUse",
                "InvalidRequest",
                "SlotsExceedLicenseLimit",
                "RuntimeDisabled",
                "ExternalNotSupported",
                "UsageExceedsLicenseLimit",
                "LicenseNotCompatible"
              ],
              "x-ms-enum": {
                "name": "SessionEventDataLicenseErrorCode",
                "modelAsString": false
              }
            }
          }
        },
        "SessionMaintenanceModeParameters": {
          "type": "object",
          "properties": {
            "sessionId": {
              "type": "integer",
              "format": "int64"
            },
            "maintenanceMode": {
              "type": "string",
              "enum": [
                "Default",
                "Enabled"
              ],
              "x-ms-enum": {
                "name": "SessionMaintenanceModeParametersMaintenanceMode",
                "modelAsString": false
              }
            },
            "stopJobsStrategy": {
              "type": "string",
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "SessionMaintenanceModeParametersStopJobsStrategy",
                "modelAsString": false
              }
            }
          }
        },
        "SessionUpdatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Sessions": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/SessionEventData"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "This event is raised whenever robot's session has changed",
          "x-webhook-event": "robot.status"
        },
        "SessionsToggleMachineSessionDebugModeRequest": {
          "required": [
            "enabled"
          ],
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "minutes": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "SetUsersRequest": {
          "required": [
            "addedUserIds",
            "removedUserIds"
          ],
          "type": "object",
          "properties": {
            "addedUserIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "removedUserIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "SettingsDeleteBulkRequest": {
          "type": "object",
          "properties": {
            "settingNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "SettingsDto": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 128,
              "minLength": 1,
              "type": "string",
              "description": "The name of a specific setting (e.g. Abp.Net.Mail.DefaultFromAddress)."
            },
            "Value": {
              "type": "string",
              "description": "The value assigned to a specific setting (e.g. admin@mydomain.com)."
            },
            "Scope": {
              "type": "string",
              "description": "The scope of a specific setting.",
              "enum": [
                "Application",
                "Tenant",
                "User",
                "All"
              ],
              "x-ms-enum": {
                "name": "SettingsDtoScope",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "string"
            }
          },
          "description": "Used to store various predefined application configurations like time zone or account e-mail information."
        },
        "SettingsUpdateBulkRequest": {
          "type": "object",
          "properties": {
            "settings": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SettingsDto"
              }
            }
          }
        },
        "SignalRActivitySettingsDto": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string",
              "description": "Absolute url for the SignalR activity hub endpoint"
            },
            "skipNegotiation": {
              "type": "boolean",
              "description": "If true, activity SignalR client should use websocket transport only and pass SkipNegotation"
            }
          },
          "description": "SignalR related settings"
        },
        "SimpleFolderDto": {
          "type": "object",
          "properties": {
            "DisplayName": {
              "type": "string"
            },
            "FullyQualifiedName": {
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SimpleJobEventDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unattended",
                "Attended",
                "ServerlessGeneric"
              ],
              "x-ms-enum": {
                "name": "SimpleJobEventDtoType",
                "modelAsString": false
              }
            },
            "State": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Pending",
                "Running",
                "Stopping",
                "Terminating",
                "Faulted",
                "Successful",
                "Stopped",
                "Suspended",
                "Resumed"
              ],
              "x-ms-enum": {
                "name": "SimpleJobEventDtoState",
                "modelAsString": false
              }
            },
            "StartTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "ResumeTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "EndTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "Info": {
              "type": "string",
              "readOnly": true
            },
            "SpecificPriorityValue": {
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "RuntimeType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "SimpleJobEventDtoRuntimeType",
                "modelAsString": false
              }
            },
            "SourceType": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Manual",
                "Schedule",
                "Agent",
                "Queue",
                "StudioWeb",
                "IntegrationTrigger",
                "StudioDesktop",
                "AutomationOpsPipelines",
                "Apps",
                "SAP"
              ],
              "x-ms-enum": {
                "name": "SimpleJobEventDtoSourceType",
                "modelAsString": false
              }
            },
            "OutputArguments": {
              "type": "object",
              "properties": {},
              "readOnly": true
            },
            "Robot": {
              "$ref": "#/components/schemas/SimpleRobotEventDto"
            },
            "Machine": {
              "$ref": "#/components/schemas/SimpleMachineDto"
            },
            "Release": {
              "$ref": "#/components/schemas/SimpleReleaseEventDto"
            }
          }
        },
        "SimpleMachineDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64"
            },
            "Key": {
              "type": "string",
              "format": "uuid"
            },
            "Name": {
              "type": "string"
            },
            "ServiceUserName": {
              "type": "string"
            },
            "Type": {
              "type": "string",
              "enum": [
                "Standard",
                "Template"
              ],
              "x-ms-enum": {
                "name": "SimpleMachineDtoType",
                "modelAsString": false
              }
            },
            "Scope": {
              "type": "string",
              "enum": [
                "Default",
                "Shared",
                "PersonalWorkspace",
                "Cloud",
                "Serverless"
              ],
              "x-ms-enum": {
                "name": "SimpleMachineDtoScope",
                "modelAsString": false
              }
            }
          }
        },
        "SimpleReleaseDto": {
          "required": [
            "Name",
            "ProcessKey",
            "ProcessVersion"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "A unique identifier associated to each release."
            },
            "ProcessKey": {
              "minLength": 1,
              "type": "string",
              "description": "The unique identifier of the process associated with the release."
            },
            "ProcessVersion": {
              "minLength": 1,
              "type": "string",
              "description": "The version of the process associated with the release."
            },
            "IsLatestVersion": {
              "type": "boolean",
              "description": "States whether the version of process associated with the release is latest or not."
            },
            "IsProcessDeleted": {
              "type": "boolean",
              "description": "States whether the process associated with the release is deleted or not."
            },
            "Description": {
              "type": "string",
              "description": "Used to add additional information about a release in order to better identify it."
            },
            "Name": {
              "minLength": 1,
              "type": "string",
              "description": "A custom name of the release. The default name format is ProcessName_EnvironmentName."
            },
            "EnvironmentId": {
              "type": "integer",
              "description": "The Id of the environment associated with the release.",
              "format": "int64"
            },
            "EnvironmentName": {
              "type": "string",
              "description": "The name of the environment associated with the release."
            },
            "Environment": {
              "$ref": "#/components/schemas/EnvironmentDto"
            },
            "EntryPointId": {
              "type": "integer",
              "format": "int64"
            },
            "EntryPointPath": {
              "type": "string"
            },
            "EntryPoint": {
              "$ref": "#/components/schemas/EntryPointDto"
            },
            "InputArguments": {
              "maxLength": 10000,
              "type": "string",
              "description": "Input parameters in JSON format to be passed as default values to job execution."
            },
            "ProcessType": {
              "type": "string",
              "enum": [
                "Undefined",
                "Process",
                "TestAutomationProcess"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoProcessType",
                "modelAsString": false
              }
            },
            "SupportsMultipleEntryPoints": {
              "type": "boolean"
            },
            "RequiresUserInteraction": {
              "type": "boolean"
            },
            "IsAttended": {
              "type": "boolean"
            },
            "IsCompiled": {
              "type": "boolean"
            },
            "AutomationHubIdeaUrl": {
              "type": "string"
            },
            "CurrentVersion": {
              "$ref": "#/components/schemas/ReleaseVersionDto"
            },
            "ReleaseVersions": {
              "type": "array",
              "description": "The collection of release versions that current release had over time.",
              "items": {
                "$ref": "#/components/schemas/ReleaseVersionDto"
              }
            },
            "Arguments": {
              "$ref": "#/components/schemas/ArgumentMetadata"
            },
            "ProcessSettings": {
              "$ref": "#/components/schemas/ProcessSettingsDto"
            },
            "VideoRecordingSettings": {
              "$ref": "#/components/schemas/VideoRecordingSettingsDto"
            },
            "AutoUpdate": {
              "type": "boolean"
            },
            "HiddenForAttendedUser": {
              "type": "boolean"
            },
            "FeedId": {
              "type": "string",
              "format": "uuid"
            },
            "JobPriority": {
              "type": "string",
              "description": "The execution priority. If null, it defaults to Normal.",
              "enum": [
                "Low",
                "Normal",
                "High"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoJobPriority",
                "modelAsString": false
              }
            },
            "SpecificPriorityValue": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Value for more granular control over execution priority.",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "Id of the folder this release is part of.",
              "format": "int64"
            },
            "OrganizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "Fully qualified name of the folder this release is part of."
            },
            "TargetFramework": {
              "type": "string",
              "enum": [
                "Legacy",
                "Windows",
                "Portable"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoTargetFramework",
                "modelAsString": false
              }
            },
            "RobotSize": {
              "type": "string",
              "enum": [
                "Small",
                "Standard",
                "Medium",
                "Large"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoRobotSize",
                "modelAsString": false
              }
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "RemoteControlAccess": {
              "type": "string",
              "enum": [
                "None",
                "ReadOnly",
                "Full"
              ],
              "x-ms-enum": {
                "name": "ReleaseDtoRemoteControlAccess",
                "modelAsString": false
              }
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Entity derived from BaseReleaseDto. It shares all the properties of the base entity except the navigation properties."
        },
        "SimpleReleaseEventDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "description": "The Id of the process",
              "format": "int64"
            },
            "Key": {
              "type": "string",
              "description": "The unique key of the process"
            },
            "ProcessKey": {
              "type": "string",
              "description": "The name of the process"
            },
            "Name": {
              "type": "string",
              "description": "The display name of the process"
            }
          }
        },
        "SimpleRobotDto": {
          "required": [
            "HostingType",
            "Name",
            "Type"
          ],
          "type": "object",
          "properties": {
            "LicenseKey": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string",
              "description": "The key is automatically generated from the server for the Robot machine.\r\n<para />For the robot to work, the same key must exist on both the robot and Orchestrator.\r\n<para />All robots on a machine must have the same license key in order to register correctly."
            },
            "MachineName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "The name of the machine a Robot is hosted on."
            },
            "MachineId": {
              "type": "integer",
              "description": "The Id of the machine a Robot is hosted on",
              "format": "int64"
            },
            "Name": {
              "maxLength": 19,
              "minLength": 0,
              "type": "string",
              "description": "A custom name for the robot."
            },
            "Username": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The machine username. If the user is under a domain, you are required to also specify it in a DOMAIN\\username format.\r\n<para />Note: You must use short domain names, such as desktop\\administrator and NOT desktop.local/administrator."
            },
            "ExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the password."
            },
            "Description": {
              "maxLength": 500,
              "minLength": 0,
              "type": "string",
              "description": "Used to add additional information about a robot in order to better identify it."
            },
            "Type": {
              "type": "string",
              "description": "The Robot type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "RobotDtoType",
                "modelAsString": false
              }
            },
            "HostingType": {
              "type": "string",
              "description": "The Robot hosting type (Standard / Floating).",
              "enum": [
                "Standard",
                "Floating"
              ],
              "x-ms-enum": {
                "name": "RobotDtoHostingType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The Robot provision type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "RobotDtoProvisionType",
                "modelAsString": false
              }
            },
            "Password": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The Windows password associated with the machine username."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the password.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "The associated user's Id.",
              "format": "int64"
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specificies the state of the Robot (enabled/disabled) - a disabled robot cannot connect to Orchestrator"
            },
            "CredentialType": {
              "type": "string",
              "description": "The robot credentials type (Default/ SmartCard)",
              "enum": [
                "Default",
                "SmartCard",
                "NCipher",
                "SafeNet",
                "NoCredential"
              ],
              "x-ms-enum": {
                "name": "RobotDtoCredentialType",
                "modelAsString": false
              }
            },
            "Environments": {
              "type": "array",
              "description": "The collection of environments the robot is part of.",
              "items": {
                "$ref": "#/components/schemas/EnvironmentDto"
              }
            },
            "RobotEnvironments": {
              "type": "string",
              "description": "The comma separated textual representation of environment names the robot is part of."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing execution settings for this robot."
            },
            "IsExternalLicensed": {
              "type": "boolean",
              "description": "Flag to indicate if the robot uses an external license"
            },
            "LimitConcurrentExecution": {
              "type": "boolean",
              "description": "Specifies if the robot can be used concurrently on multiple machines"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Entity derived from RobotDto. Is shares all the properties of the base entity except the navigation properties."
        },
        "SimpleRobotEventDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64"
            },
            "Key": {
              "type": "string",
              "format": "uuid"
            },
            "Name": {
              "type": "string"
            },
            "Type": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "SimpleRobotEventDtoType",
                "modelAsString": false
              }
            },
            "MachineName": {
              "type": "string"
            },
            "LocalSystemAccount": {
              "type": "string"
            }
          }
        },
        "SimpleRoleDto": {
          "type": "object",
          "properties": {
            "Origin": {
              "type": "string",
              "enum": [
                "Assigned",
                "Inherited"
              ],
              "x-ms-enum": {
                "name": "SimpleRoleDtoOrigin",
                "modelAsString": false
              }
            },
            "RoleType": {
              "type": "string",
              "enum": [
                "Mixed",
                "Tenant",
                "Folder"
              ],
              "x-ms-enum": {
                "name": "SimpleRoleDtoRoleType",
                "modelAsString": false
              }
            },
            "InheritedFromFolder": {
              "$ref": "#/components/schemas/SimpleFolderDto"
            },
            "Name": {
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "SimpleUserDto": {
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 64,
              "minLength": 0,
              "type": "string",
              "description": "The name of the person for which the user is created."
            },
            "Surname": {
              "maxLength": 64,
              "minLength": 0,
              "type": "string",
              "description": "The surname of the person for which the user is created."
            },
            "UserName": {
              "type": "string",
              "description": "The name used to login to Orchestrator."
            },
            "Domain": {
              "type": "string",
              "description": "The domain from which the user is imported"
            },
            "DirectoryIdentifier": {
              "type": "string",
              "description": "The directory identifier from which the user is imported"
            },
            "FullName": {
              "type": "string",
              "description": "The full name of the person constructed with the format Name Surname."
            },
            "EmailAddress": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string",
              "description": "The e-mail address associated with the user.",
              "format": "email"
            },
            "IsEmailConfirmed": {
              "type": "boolean",
              "description": "States if the email address is valid or not."
            },
            "LastLoginTime": {
              "type": "string",
              "description": "The date and time when the user last logged in, or null if the user never logged in.",
              "format": "date-time"
            },
            "IsActive": {
              "type": "boolean",
              "description": "States if the user is active or not. An inactive user cannot login to Orchestrator."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the user was created.",
              "format": "date-time"
            },
            "AuthenticationSource": {
              "type": "string",
              "description": "The source which authenticated this user."
            },
            "Password": {
              "type": "string",
              "description": "The password used during application login."
            },
            "IsExternalLicensed": {
              "type": "boolean"
            },
            "UserRoles": {
              "type": "array",
              "description": "The collection of roles associated with the user.",
              "items": {
                "$ref": "#/components/schemas/UserRoleDto"
              }
            },
            "RolesList": {
              "type": "array",
              "description": "The collection of role names associated with the user.",
              "items": {
                "type": "string"
              }
            },
            "LoginProviders": {
              "type": "array",
              "description": "The collection of entities that can authenticate the user.",
              "items": {
                "type": "string"
              }
            },
            "OrganizationUnits": {
              "type": "array",
              "description": "The collection of organization units associated with the user.",
              "items": {
                "$ref": "#/components/schemas/OrganizationUnitDto"
              }
            },
            "TenantId": {
              "type": "integer",
              "description": "The id of the tenant owning the user.",
              "format": "int32"
            },
            "TenancyName": {
              "type": "string",
              "description": "The name of the tenant owning the user."
            },
            "TenantDisplayName": {
              "type": "string",
              "description": "The display name of the tenant owning the user."
            },
            "TenantKey": {
              "type": "string",
              "description": "The key of the tenant owning the user."
            },
            "Type": {
              "type": "string",
              "description": "The user type.",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "UserDtoType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The user type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "UserDtoProvisionType",
                "modelAsString": false
              }
            },
            "LicenseType": {
              "type": "string",
              "description": "The user's license type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "UserDtoLicenseType",
                "modelAsString": false
              }
            },
            "RobotProvision": {
              "$ref": "#/components/schemas/AttendedRobotDto"
            },
            "UnattendedRobot": {
              "$ref": "#/components/schemas/UnattendedRobotDto"
            },
            "NotificationSubscription": {
              "$ref": "#/components/schemas/UserNotificationSubscription"
            },
            "Key": {
              "type": "string",
              "description": "Unique key for a user",
              "format": "uuid"
            },
            "MayHaveUserSession": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have a User session (default: true)"
            },
            "MayHaveRobotSession": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have an Attended Robot attached (default: true)"
            },
            "MayHaveUnattendedSession": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have an Unattended Robot attached (default: false)"
            },
            "BypassBasicAuthRestriction": {
              "type": "boolean",
              "description": "Specifies whether this user bypasses the \"Auth.RestrictBasicAuthentication\" application setting (default: null)"
            },
            "MayHavePersonalWorkspace": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have a Personal Workspace"
            },
            "UpdatePolicy": {
              "$ref": "#/components/schemas/UpdatePolicyDto"
            },
            "AccountId": {
              "type": "string"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Entity derived from UserDto. Is shares all the properties of the base entity except the navigation properties."
        },
        "SimpleUserEntityDto": {
          "type": "object",
          "properties": {
            "UserName": {
              "type": "string"
            },
            "IsInherited": {
              "type": "boolean"
            },
            "AssignedToFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "MayHaveAttended": {
              "type": "boolean"
            },
            "MayHaveUnattended": {
              "type": "boolean"
            },
            "Type": {
              "type": "string",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "SimpleUserEntityDtoType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SmtpSettingModel": {
          "required": [
            "Host",
            "Port"
          ],
          "type": "object",
          "properties": {
            "Host": {
              "minLength": 1,
              "type": "string"
            },
            "Port": {
              "type": "integer",
              "format": "int32"
            },
            "UserName": {
              "type": "string"
            },
            "Password": {
              "type": "string"
            },
            "Domain": {
              "type": "string"
            },
            "EnableSsl": {
              "type": "boolean"
            },
            "UseDefaultCredentials": {
              "type": "boolean"
            },
            "DefaultFromAddress": {
              "type": "string"
            },
            "DefaultFromDisplayName": {
              "type": "string"
            }
          }
        },
        "SpecificEntityMonitoringFilters": {
          "type": "object",
          "properties": {
            "entityId": {
              "minimum": 1,
              "type": "integer",
              "format": "int64"
            },
            "includeSubfolders": {
              "type": "boolean"
            },
            "tenantId": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "readOnly": true
            },
            "organizationUnitIds": {
              "type": "array",
              "readOnly": true,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "timeFrameMinutes": {
              "maximum": 43200,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            },
            "entityIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "StartJobsRequest": {
          "required": [
            "startInfo"
          ],
          "type": "object",
          "properties": {
            "startInfo": {
              "$ref": "#/components/schemas/StartProcessDto"
            }
          }
        },
        "StartProcessDto": {
          "type": "object",
          "properties": {
            "ReleaseKey": {
              "type": "string",
              "description": "The unique key of the release associated with the process."
            },
            "Strategy": {
              "type": "string",
              "description": "States which robots from the environment are being run by the process.",
              "enum": [
                "All",
                "Specific",
                "RobotCount",
                "JobsCount",
                "ModernJobsCount"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoStrategy",
                "modelAsString": false
              }
            },
            "RobotIds": {
              "type": "array",
              "description": "The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "MachineSessionIds": {
              "type": "array",
              "description": "The machines used for running the job. If empty, the job will start on the first available machine",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "NoOfRobots": {
              "type": "integer",
              "description": "DEPRECATED. Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is RobotCount.",
              "format": "int32",
              "x-deprecated": true
            },
            "JobsCount": {
              "type": "integer",
              "description": "Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.",
              "format": "int32"
            },
            "Source": {
              "type": "string",
              "description": "The Source of the job starting the current process.",
              "enum": [
                "Manual",
                "Schedule",
                "Queue",
                "StudioWeb",
                "IntegrationTrigger",
                "StudioDesktop",
                "AutomationOpsPipelines",
                "Apps",
                "SAP"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoSource",
                "modelAsString": false
              }
            },
            "JobPriority": {
              "type": "string",
              "description": "Execution priority. If null, defaults to the JobPriority of its release.",
              "enum": [
                "Low",
                "Normal",
                "High"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoJobPriority",
                "modelAsString": false
              }
            },
            "SpecificPriorityValue": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "description": "Value for more granular control over execution priority.",
              "format": "int32"
            },
            "RuntimeType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoRuntimeType",
                "modelAsString": false
              }
            },
            "InputArguments": {
              "maxLength": 10000,
              "type": "string",
              "description": "Input parameters in JSON format to be passed to job execution."
            },
            "Reference": {
              "maxLength": 128,
              "type": "string",
              "description": "Optional user-specified reference for jobs"
            },
            "MachineRobots": {
              "type": "array",
              "description": "The machine-robot mappings used for running the job.",
              "items": {
                "$ref": "#/components/schemas/MachineRobotDto"
              }
            },
            "TargetFramework": {
              "type": "string",
              "enum": [
                "Legacy",
                "Windows",
                "Portable"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoTargetFramework",
                "modelAsString": false
              }
            },
            "ResumeOnSameContext": {
              "type": "boolean",
              "description": "Gets or sets flag for honoring initial machine and robot choice upon resumption of created jobs, if jobs are suspended. <br />\r\nIf set, the jobs will resume on the same robot-machine pair on which they initially ran."
            },
            "BatchExecutionKey": {
              "type": "string",
              "description": "Optional BatchExecutionKey",
              "format": "uuid"
            },
            "RequiresUserInteraction": {
              "type": "boolean",
              "description": "Specifies if the process can run in headless mode."
            },
            "StopProcessExpression": {
              "type": "string",
              "description": "Number of seconds after which a running process will be stopped."
            },
            "StopStrategy": {
              "type": "string",
              "description": "The way a running process is stopped.",
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoStopStrategy",
                "modelAsString": false
              }
            },
            "KillProcessExpression": {
              "type": "string",
              "description": "Grace period (in seconds) for soft stop. If a process doesn't stop after this amount, it will be killed"
            },
            "RemoteControlAccess": {
              "type": "string",
              "enum": [
                "None",
                "ReadOnly",
                "Full"
              ],
              "x-ms-enum": {
                "name": "StartProcessDtoRemoteControlAccess",
                "modelAsString": false
              }
            },
            "AlertPendingExpression": {
              "type": "string"
            },
            "AlertRunningExpression": {
              "type": "string"
            },
            "RunAsMe": {
              "type": "boolean"
            }
          },
          "description": "The Start Process transfers information from client to the server during JobsController.StartJobs custom action."
        },
        "StopJobRequest": {
          "required": [
            "strategy"
          ],
          "type": "object",
          "properties": {
            "strategy": {
              "type": "string",
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "StopJobRequestStrategy",
                "modelAsString": false
              }
            }
          }
        },
        "StopJobsRequest": {
          "required": [
            "jobIds",
            "strategy"
          ],
          "type": "object",
          "properties": {
            "strategy": {
              "type": "string",
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "StopJobsRequestStrategy",
                "modelAsString": false
              }
            },
            "jobIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "TagDto": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string"
            },
            "DisplayName": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string"
            },
            "Value": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string"
            },
            "DisplayValue": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "TaskActivityDto": {
          "type": "object",
          "properties": {
            "CreatorUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "TargetUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "Task": {
              "$ref": "#/components/schemas/TaskDto"
            },
            "TaskNote": {
              "$ref": "#/components/schemas/TaskNoteDto"
            },
            "Key": {
              "type": "string",
              "description": "Key",
              "format": "uuid"
            },
            "TenantId": {
              "type": "integer",
              "description": "Gets or Sets the Tenant Id.",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "Gets or sets the folder/organization-unit id.",
              "format": "int64"
            },
            "TaskId": {
              "type": "integer",
              "description": "Gets or sets the Id of Task to which this Note belongs to.",
              "format": "int64"
            },
            "ActivityType": {
              "type": "string",
              "description": "Gets or sets the activity type performed on Task.",
              "enum": [
                "Created",
                "Assigned",
                "Reassigned",
                "Unassigned",
                "Saved",
                "Forwarded",
                "Completed",
                "Commented",
                "Deleted",
                "BulkSaved",
                "BulkCompleted",
                "FirstOpened"
              ],
              "x-ms-enum": {
                "name": "TaskActivityMetadataDtoActivityType",
                "modelAsString": false
              }
            },
            "CreatorUserId": {
              "type": "integer",
              "description": "Gets or sets the id of the user who created the Task Note.",
              "format": "int64"
            },
            "TargetUserId": {
              "type": "integer",
              "description": "user to whom the Task is assigned on this activity",
              "format": "int64"
            },
            "TaskNoteId": {
              "type": "integer",
              "description": "Gets or sets the Id of the TaskNote created for this activity.",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "description": "Gets or sets time at which this task was created.",
              "format": "date-time"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TaskAssignmentChangedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Tasks": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WebhookTaskAssignmentChangedDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for UiPath.Orchestrator.LedgerEvents.TaskAssignmentChanged. Gets raised when task is assigned, reassigned or unassigned",
          "x-webhook-event": "task.assignmentChanged"
        },
        "TaskAssignmentRequest": {
          "type": "object",
          "properties": {
            "TaskId": {
              "minimum": 1,
              "type": "integer",
              "description": "Gets or sets the taskId for this task assignment.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "Gets or sets the userId for this task assignment.",
              "format": "int64"
            },
            "UserNameOrEmail": {
              "maxLength": 256,
              "type": "string",
              "description": "Gets or sets the UserName or Email for this task assignment. If UserId is provided, this property is ignored."
            }
          },
          "description": "Class to hold assignment request details of a task."
        },
        "TaskCatalogDto": {
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "description": "Key of the Task Catalog.",
              "format": "uuid"
            },
            "Name": {
              "type": "string",
              "description": "Name of the Task Catalog."
            },
            "Description": {
              "type": "string",
              "description": "Description of this task catalog."
            },
            "CreationTime": {
              "type": "string",
              "description": "Creation time of task catalog",
              "format": "date-time"
            },
            "LastModificationTime": {
              "type": "string",
              "description": "Last Modification time of task catalog",
              "format": "date-time"
            },
            "FoldersCount": {
              "type": "integer",
              "description": "Number of folders where the task catalog is shared.",
              "format": "int32"
            },
            "Encrypted": {
              "type": "boolean",
              "description": "If the catalog is encrypted, tasks asociated to this will have their Data encrypted"
            },
            "Tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Task Catalog entity for external access"
        },
        "TaskCatalogExtendedDetailsDto": {
          "type": "object",
          "properties": {
            "AssociatedTasksCount": {
              "type": "integer",
              "format": "int32"
            },
            "IsEncrypted": {
              "type": "boolean"
            },
            "TotalFolderCount": {
              "type": "integer",
              "format": "int64"
            },
            "Key": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "TaskCatalogFoldersShareDto": {
          "type": "object",
          "properties": {
            "TaskCatalogIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToAddFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "ToRemoveFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "TaskCatalogRequest": {
          "required": [
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 50,
              "minLength": 1,
              "type": "string",
              "description": "Name of the Task Catalog."
            },
            "Description": {
              "maxLength": 512,
              "type": "string",
              "description": "Description of this task catalog."
            },
            "Encrypted": {
              "type": "boolean"
            },
            "Tags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          },
          "description": "Task Catalog entity for Creating or Updating Task Catalog"
        },
        "TaskCompletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Tasks": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WebhookTaskCompletedDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for UiPath.Orchestrator.LedgerEvents.TaskCompleted. Gets raised when task is completed",
          "x-webhook-event": "task.completed"
        },
        "TaskCompletionRequest": {
          "required": [
            "taskId"
          ],
          "type": "object",
          "properties": {
            "taskId": {
              "type": "integer",
              "description": "TaskId to retrieve form",
              "format": "int64"
            },
            "data": {
              "type": "object",
              "description": "Task data json"
            },
            "action": {
              "type": "string",
              "description": "Action taken on this task"
            }
          }
        },
        "TaskCreateRequest": {
          "required": [
            "title"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "Gets or sets type of this task, allowed type is 'ExternalTask'.",
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "TaskCreateRequestType",
                "modelAsString": false
              }
            },
            "title": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseTaskCreateRequestPriority",
                "modelAsString": false
              }
            },
            "data": {
              "type": "object",
              "description": "Task data"
            },
            "taskCatalogName": {
              "maxLength": 50,
              "type": "string",
              "description": "Gets or sets the task catalog/category of the task"
            },
            "externalTag": {
              "maxLength": 128,
              "type": "string",
              "description": "Reference or name of external system"
            },
            "tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "TaskCreatedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Tasks": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WebhookTaskCreatedDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for UiPath.Orchestrator.LedgerEvents.TaskCreated. Gets raised when task is completed",
          "x-webhook-event": "task.created"
        },
        "TaskDataDto": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Task status",
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "TaskDataDtoStatus",
                "modelAsString": false
              }
            },
            "data": {
              "type": "object",
              "description": "Task form data json"
            },
            "action": {
              "type": "string",
              "description": "Task form action"
            },
            "waitJobState": {
              "type": "string",
              "description": "State of the job(if any) waiting on the current task",
              "enum": [
                "Pending",
                "Running",
                "Stopping",
                "Terminating",
                "Faulted",
                "Successful",
                "Stopped",
                "Suspended",
                "Resumed"
              ],
              "x-ms-enum": {
                "name": "TaskDataDtoWaitJobState",
                "modelAsString": false
              }
            },
            "organizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "Fully qualified folder name"
            },
            "tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "assignedToUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "title": {
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "type": {
              "type": "string",
              "description": "Gets or sets type of this task.",
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoType",
                "modelAsString": false
              }
            },
            "priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoPriority",
                "modelAsString": false
              }
            },
            "assignedToUserId": {
              "type": "integer",
              "description": "Gets the id of the actual assigned user, if any.",
              "format": "int64"
            },
            "organizationUnitId": {
              "type": "integer",
              "description": "Gets or sets the folder/organization-unit id.",
              "format": "int64"
            },
            "externalTag": {
              "type": "string",
              "description": "Identifier of external system where this task is handled"
            },
            "creatorJobKey": {
              "type": "string",
              "description": "Key of the job which created this task",
              "format": "uuid"
            },
            "waitJobKey": {
              "type": "string",
              "description": "Key job which is waiting on this task",
              "format": "uuid"
            },
            "lastAssignedTime": {
              "type": "string",
              "description": "Datetime when task was last assigned.",
              "format": "date-time"
            },
            "completionTime": {
              "type": "string",
              "description": "Datetime when task was completed.",
              "format": "date-time"
            },
            "isDeleted": {
              "type": "boolean"
            },
            "deleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "deletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            },
            "creatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto with attributes required for Wait activity"
        },
        "TaskDataSaveRequest": {
          "required": [
            "data",
            "taskId"
          ],
          "type": "object",
          "properties": {
            "taskId": {
              "type": "integer",
              "description": "TaskId to retrieve form",
              "format": "int64"
            },
            "data": {
              "type": "object",
              "description": "Task data json"
            }
          }
        },
        "TaskDefinitionDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "Name of the Task Definition."
            },
            "Key": {
              "type": "string",
              "description": "Unique key for Task Definition",
              "format": "uuid"
            },
            "Description": {
              "type": "string",
              "description": "Description of this task definition."
            },
            "Properties": {
              "$ref": "#/components/schemas/TaskDefinitionPropertiesDto"
            },
            "IsDeleted": {
              "type": "boolean"
            },
            "DeleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "DeletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Task Definition entity for external access"
        },
        "TaskDefinitionPropertiesDto": {
          "type": "object",
          "properties": {
            "version": {
              "type": "integer",
              "description": "Version number of the property set",
              "format": "int32"
            },
            "schema": {
              "type": "string",
              "description": "Field Schema for the definition"
            },
            "allowedActions": {
              "type": "array",
              "description": "Set of allowed actions for this version of Task Definition",
              "items": {
                "type": "string"
              }
            },
            "allowedActionsForDefinition": {
              "type": "string"
            },
            "taskDefinitionKey": {
              "type": "string",
              "format": "uuid"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            },
            "creatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Task Definition Properties created for a definition"
        },
        "TaskDefinitionPropertiesRequest": {
          "type": "object",
          "properties": {
            "schema": {
              "type": "string"
            },
            "allowedActions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "TaskDefinitionRequest": {
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 50,
              "type": "string",
              "description": "Name of the Task Definition."
            },
            "Description": {
              "maxLength": 512,
              "type": "string",
              "description": "Description of this task definition."
            },
            "Properties": {
              "$ref": "#/components/schemas/TaskDefinitionPropertiesRequest"
            }
          },
          "description": "Task Definition entity for Creating or Updating Task Definition"
        },
        "TaskDeletedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Tasks": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedTaskDeletedDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for UiPath.Orchestrator.LedgerEvents.TaskDeleted. Gets raised when task is deleted",
          "x-webhook-event": "task.deleted"
        },
        "TaskDto": {
          "type": "object",
          "properties": {
            "Status": {
              "type": "string",
              "description": "Gets or sets the status of this task.",
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "TaskDtoStatus",
                "modelAsString": false
              }
            },
            "AssignedToUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "CreatorUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "LastModifierUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "TaskCatalogName": {
              "type": "string",
              "description": "Gets or sets the task catalog/category of the task"
            },
            "IsCompleted": {
              "type": "boolean"
            },
            "BulkFormLayoutId": {
              "type": "integer",
              "description": "Gets or sets the bulkFormLayoutId of the task",
              "format": "int64"
            },
            "FormLayoutId": {
              "type": "integer",
              "description": "Gets or sets the formLayoutId of the task",
              "format": "int64"
            },
            "Encrypted": {
              "type": "boolean",
              "description": "Indicates if the task Data field is stored in an encrypted form."
            },
            "Tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "Action": {
              "type": "string",
              "description": "Gets or sets the action performed on the task"
            },
            "Activities": {
              "type": "array",
              "description": "Gets the associated task activities for the task",
              "items": {
                "$ref": "#/components/schemas/TaskActivityDto"
              }
            },
            "Title": {
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "Type": {
              "type": "string",
              "description": "Gets or sets type of this task.",
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoPriority",
                "modelAsString": false
              }
            },
            "AssignedToUserId": {
              "type": "integer",
              "description": "Gets the id of the actual assigned user, if any.",
              "format": "int64"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "Gets or sets the folder/organization-unit id.",
              "format": "int64"
            },
            "ExternalTag": {
              "type": "string",
              "description": "Identifier of external system where this task is handled"
            },
            "CreatorJobKey": {
              "type": "string",
              "description": "Key of the job which created this task",
              "format": "uuid"
            },
            "WaitJobKey": {
              "type": "string",
              "description": "Key job which is waiting on this task",
              "format": "uuid"
            },
            "LastAssignedTime": {
              "type": "string",
              "description": "Datetime when task was last assigned.",
              "format": "date-time"
            },
            "CompletionTime": {
              "type": "string",
              "description": "Datetime when task was completed.",
              "format": "date-time"
            },
            "IsDeleted": {
              "type": "boolean"
            },
            "DeleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "DeletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Simple Task entity for external access"
        },
        "TaskFormDto": {
          "type": "object",
          "properties": {
            "formLayout": {
              "type": "object",
              "description": "Task Form Layout json"
            },
            "formLayoutId": {
              "type": "integer",
              "description": "Task Form Layout Id",
              "format": "int64"
            },
            "bulkFormLayoutId": {
              "type": "integer",
              "description": "Task Form Layout Id",
              "format": "int64"
            },
            "actionLabel": {
              "type": "string",
              "description": "Task form action label"
            },
            "status": {
              "type": "string",
              "description": "Task status",
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "TaskDataDtoStatus",
                "modelAsString": false
              }
            },
            "data": {
              "type": "object",
              "description": "Task form data json"
            },
            "action": {
              "type": "string",
              "description": "Task form action"
            },
            "waitJobState": {
              "type": "string",
              "description": "State of the job(if any) waiting on the current task",
              "enum": [
                "Pending",
                "Running",
                "Stopping",
                "Terminating",
                "Faulted",
                "Successful",
                "Stopped",
                "Suspended",
                "Resumed"
              ],
              "x-ms-enum": {
                "name": "TaskDataDtoWaitJobState",
                "modelAsString": false
              }
            },
            "organizationUnitFullyQualifiedName": {
              "type": "string",
              "description": "Fully qualified folder name"
            },
            "tags": {
              "type": "array",
              "description": "List of tags associated to the task.",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            },
            "assignedToUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "title": {
              "type": "string",
              "description": "Gets or sets title of this task."
            },
            "type": {
              "type": "string",
              "description": "Gets or sets type of this task.",
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoType",
                "modelAsString": false
              }
            },
            "priority": {
              "type": "string",
              "description": "Gets or sets priority of this task.",
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "TaskMetadataDtoPriority",
                "modelAsString": false
              }
            },
            "assignedToUserId": {
              "type": "integer",
              "description": "Gets the id of the actual assigned user, if any.",
              "format": "int64"
            },
            "organizationUnitId": {
              "type": "integer",
              "description": "Gets or sets the folder/organization-unit id.",
              "format": "int64"
            },
            "externalTag": {
              "type": "string",
              "description": "Identifier of external system where this task is handled"
            },
            "creatorJobKey": {
              "type": "string",
              "description": "Key of the job which created this task",
              "format": "uuid"
            },
            "waitJobKey": {
              "type": "string",
              "description": "Key job which is waiting on this task",
              "format": "uuid"
            },
            "lastAssignedTime": {
              "type": "string",
              "description": "Datetime when task was last assigned.",
              "format": "date-time"
            },
            "completionTime": {
              "type": "string",
              "description": "Datetime when task was completed.",
              "format": "date-time"
            },
            "isDeleted": {
              "type": "boolean"
            },
            "deleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "deletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "lastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "creationTime": {
              "type": "string",
              "format": "date-time"
            },
            "creatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for task form"
        },
        "TaskForwardedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Tasks": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedTaskForwardedDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for UiPath.Orchestrator.LedgerEvents.TaskForwarded. Gets raised when task is Forwarded",
          "x-webhook-event": "task.forwarded"
        },
        "TaskNoteCreateRequest": {
          "required": [
            "Text"
          ],
          "type": "object",
          "properties": {
            "Text": {
              "maxLength": 512,
              "minLength": 0,
              "type": "string",
              "description": "Gets or sets note text."
            },
            "TaskId": {
              "type": "integer",
              "description": "Gets or sets Id of the Task",
              "format": "int64"
            }
          }
        },
        "TaskNoteDto": {
          "type": "object",
          "properties": {
            "CreatorUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "LastModifierUser": {
              "$ref": "#/components/schemas/UserLoginInfoDto"
            },
            "Key": {
              "type": "string",
              "description": "Key",
              "format": "uuid"
            },
            "TenantId": {
              "type": "integer",
              "description": "Gets or Sets the Tenant Id.",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "description": "Gets or sets the folder/organization-unit id.",
              "format": "int64"
            },
            "TaskId": {
              "type": "integer",
              "description": "Gets or sets the Id of Task to which this Note belongs to.",
              "format": "int64"
            },
            "Text": {
              "type": "string",
              "description": "Gets or sets the text note for the task."
            },
            "CreatorUserId": {
              "type": "integer",
              "description": "Gets or sets the id of the user who created the Task Note.",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "description": "Gets or sets time at which this task was created.",
              "format": "date-time"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TaskOperationErrorResponse": {
          "type": "object",
          "properties": {
            "TaskId": {
              "type": "integer",
              "description": "Gets or sets the taskId for this task operation.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "Gets or sets the userId for this task operation, null in case of task unassignment",
              "format": "int64"
            },
            "ErrorCode": {
              "type": "integer",
              "description": "Gets or sets the code of error occurred during this task's operation.",
              "format": "int32"
            },
            "ErrorMessage": {
              "type": "string",
              "description": "Gets or sets the translated message of error occurred during this task's operation."
            },
            "UserNameOrEmail": {
              "type": "string",
              "description": "Gets or sets the userNameOrEmail for this task operation"
            }
          },
          "description": "Class to hold error details of an operation (assign/unassign/reassign/delete) on a task."
        },
        "TaskSaveAndReassignmentRequest": {
          "type": "object",
          "properties": {
            "SaveData": {
              "type": "boolean",
              "description": "Gets or Sets whether the data has to be saved"
            },
            "Data": {
              "type": "object",
              "description": "Gets or sets the Task data"
            },
            "NoteText": {
              "maxLength": 512,
              "type": "string",
              "description": "Gets or sets the Task Note"
            },
            "TaskId": {
              "minimum": 1,
              "type": "integer",
              "description": "Gets or sets the taskId for this task assignment.",
              "format": "int64"
            },
            "UserId": {
              "type": "integer",
              "description": "Gets or sets the userId for this task assignment.",
              "format": "int64"
            },
            "UserNameOrEmail": {
              "maxLength": 256,
              "type": "string",
              "description": "Gets or sets the UserName or Email for this task assignment. If UserId is provided, this property is ignored."
            }
          },
          "description": "Class to hold save and reassignment request details of a task."
        },
        "TaskSavedEventDto": {
          "required": [
            "EventId",
            "Timestamp",
            "Type"
          ],
          "type": "object",
          "properties": {
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "EventId": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            },
            "EntityKey": {
              "type": "string",
              "format": "uuid"
            },
            "Timestamp": {
              "type": "string",
              "format": "date-time"
            },
            "Tasks": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedTaskSavedDto"
              }
            },
            "EventTime": {
              "type": "string",
              "format": "date-time"
            },
            "EventSourceId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "TenantId": {
              "type": "integer",
              "format": "int32"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitKey": {
              "type": "string",
              "format": "uuid"
            },
            "UserId": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Dto for UiPath.Orchestrator.LedgerEvents.TaskSaved. Gets raised when task is Saved",
          "x-webhook-event": "task.saved"
        },
        "TaskTagsSaveRequest": {
          "required": [
            "taskId"
          ],
          "type": "object",
          "properties": {
            "taskId": {
              "type": "integer",
              "description": "TaskId to retrieve form",
              "format": "int64"
            },
            "tags": {
              "type": "array",
              "description": "Tags collection",
              "items": {
                "$ref": "#/components/schemas/TagDto"
              }
            }
          }
        },
        "TasksAssignRequest": {
          "required": [
            "taskAssignments"
          ],
          "type": "object",
          "properties": {
            "taskAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TaskAssignmentRequest"
              }
            }
          }
        },
        "TasksDeleteRequest": {
          "required": [
            "taskIds"
          ],
          "type": "object",
          "properties": {
            "taskIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "TenantDto": {
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 64,
              "minLength": 0,
              "pattern": "^[\\p{L}][\\p{L}0-9-_]+$",
              "type": "string",
              "description": "Name of the tenant."
            },
            "Key": {
              "type": "string",
              "description": "Unique Key of the tenant."
            },
            "DisplayName": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "description": "Display name of the the tenant"
            },
            "AdminEmailAddress": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string",
              "description": "Default tenant's admin user account email address.",
              "format": "email"
            },
            "AdminName": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "Default tenant's admin user account name."
            },
            "AdminSurname": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "Default tenant's admin user account surname."
            },
            "AdminUserKey": {
              "type": "string",
              "description": "Default tenant's admin user account key."
            },
            "AdminPassword": {
              "maxLength": 32,
              "minLength": 0,
              "type": "string",
              "description": "Default tenant's admin user account password. Only valid for create/update operations."
            },
            "LastLoginTime": {
              "type": "string",
              "description": "The last time a user logged in this tenant.",
              "format": "date-time"
            },
            "IsActive": {
              "type": "boolean",
              "description": "Specifies if the tenant is active or not."
            },
            "AcceptedDomainsList": {
              "type": "array",
              "description": "Accepted DNS list.",
              "items": {
                "type": "string"
              }
            },
            "HasConnectionString": {
              "type": "boolean",
              "description": "Specifies if the the tenant has a connection string defined"
            },
            "ConnectionString": {
              "maxLength": 1024,
              "minLength": 0,
              "type": "string",
              "description": "DB connection string"
            },
            "License": {
              "$ref": "#/components/schemas/TenantLicenseDto"
            },
            "OrganizationName": {
              "type": "string",
              "description": "Organization Name of the tenant."
            },
            "Id": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "TenantLicenseDto": {
          "type": "object",
          "properties": {
            "HostLicenseId": {
              "type": "integer",
              "description": "The host license Id.",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "description": "The date it was uploaded.",
              "format": "date-time"
            },
            "Code": {
              "type": "string",
              "description": "The license code."
            },
            "Allowed": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              },
              "description": "Contains the number of allowed licenses for each type"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TenantSetActiveRequest": {
          "type": "object",
          "properties": {
            "active": {
              "type": "boolean"
            },
            "tenantIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "TestCaseAssertionDto": {
          "type": "object",
          "properties": {
            "Message": {
              "type": "string"
            },
            "Payload": {
              "type": "string"
            },
            "Succeeded": {
              "type": "boolean"
            },
            "TestCaseExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "HasScreenshot": {
              "type": "boolean"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestCaseDefinitionDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string"
            },
            "PackageIdentifier": {
              "type": "string"
            },
            "UniqueId": {
              "type": "string",
              "format": "uuid"
            },
            "AppVersion": {
              "type": "string"
            },
            "CreatedVersion": {
              "type": "string"
            },
            "LatestVersion": {
              "type": "string"
            },
            "LatestPrereleaseVersion": {
              "type": "string"
            },
            "FeedId": {
              "type": "string",
              "format": "uuid"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestCaseDto": {
          "required": [
            "DefinitionId",
            "ReleaseId",
            "VersionNumber"
          ],
          "type": "object",
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "DefinitionId": {
              "type": "integer",
              "format": "int64"
            },
            "Definition": {
              "$ref": "#/components/schemas/TestCaseDefinitionDto"
            },
            "ReleaseId": {
              "type": "integer",
              "format": "int64"
            },
            "VersionNumber": {
              "minLength": 1,
              "type": "string"
            },
            "TestSetId": {
              "type": "integer",
              "format": "int64"
            },
            "TestSet": {
              "$ref": "#/components/schemas/TestSetDto"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestCaseExecutionArgumentsDto": {
          "required": [
            "testCaseExecutionId"
          ],
          "type": "object",
          "properties": {
            "testCaseExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "inputArguments": {
              "type": "object"
            },
            "executionOrder": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "TestCaseExecutionAttachmentDto": {
          "type": "object",
          "properties": {
            "TestCaseExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "FileName": {
              "type": "string"
            },
            "MimeType": {
              "type": "string"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "Tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestCaseExecutionAttachmentFilterDto": {
          "type": "object",
          "properties": {
            "testCaseExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "jobKey": {
              "type": "string",
              "format": "uuid"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "TestCaseExecutionDto": {
          "type": "object",
          "properties": {
            "JobId": {
              "type": "integer",
              "format": "int64"
            },
            "JobKey": {
              "type": "string",
              "format": "uuid"
            },
            "TestSetExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "TestSetExecution": {
              "$ref": "#/components/schemas/TestSetExecutionDto"
            },
            "TestCaseId": {
              "type": "integer",
              "format": "int64"
            },
            "TestCase": {
              "$ref": "#/components/schemas/TestCaseDto"
            },
            "ReleaseVersionId": {
              "type": "integer",
              "format": "int64"
            },
            "VersionNumber": {
              "type": "string"
            },
            "EntryPointPath": {
              "type": "string"
            },
            "StartTime": {
              "type": "string",
              "format": "date-time"
            },
            "EndTime": {
              "type": "string",
              "format": "date-time"
            },
            "Status": {
              "type": "string",
              "enum": [
                "Pending",
                "Running",
                "Cancelling",
                "Passed",
                "Failed",
                "Cancelled"
              ],
              "x-ms-enum": {
                "name": "TestCaseExecutionDtoStatus",
                "modelAsString": false
              }
            },
            "TestCaseAssertions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseAssertionDto"
              }
            },
            "TestCaseExecutionAttachments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseExecutionAttachmentDto"
              }
            },
            "DataVariationIdentifier": {
              "type": "string"
            },
            "OutputArguments": {
              "type": "string"
            },
            "InputArguments": {
              "type": "string"
            },
            "Info": {
              "type": "string"
            },
            "HostMachineName": {
              "type": "string"
            },
            "RuntimeType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "TestCaseExecutionDtoRuntimeType",
                "modelAsString": false
              }
            },
            "RobotName": {
              "type": "string"
            },
            "HasAssertions": {
              "type": "boolean"
            },
            "RunId": {
              "type": "integer",
              "format": "int32"
            },
            "TestCaseType": {
              "type": "string",
              "enum": [
                "TestCase",
                "TestDataSetup"
              ],
              "x-ms-enum": {
                "name": "TestCaseExecutionDtoTestCaseType",
                "modelAsString": false
              }
            },
            "ExecutionOrder": {
              "type": "integer",
              "format": "int32"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestCaseExecutionOptionsDto": {
          "required": [
            "uniqueId"
          ],
          "type": "object",
          "properties": {
            "uniqueId": {
              "type": "string",
              "format": "uuid"
            },
            "packageIdentifier": {
              "type": "string"
            },
            "inputArgumentsVariations": {
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "executionOrder": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "TestDataQueueAddItemDto": {
          "required": [
            "queueName"
          ],
          "type": "object",
          "properties": {
            "queueName": {
              "minLength": 1,
              "type": "string"
            },
            "content": {
              "type": "object"
            }
          }
        },
        "TestDataQueueBulkAddItemsDto": {
          "required": [
            "items",
            "queueName"
          ],
          "type": "object",
          "properties": {
            "queueName": {
              "minLength": 1,
              "type": "string"
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "TestDataQueueDto": {
          "required": [
            "ContentJsonSchema",
            "Name"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            },
            "Description": {
              "type": "string"
            },
            "ContentJsonSchema": {
              "minLength": 1,
              "type": "string"
            },
            "ItemsCount": {
              "type": "integer",
              "format": "int32"
            },
            "ConsumedItemsCount": {
              "type": "integer",
              "format": "int32"
            },
            "IsDeleted": {
              "type": "boolean"
            },
            "DeleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "DeletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestDataQueueGetNextItemDto": {
          "required": [
            "queueName",
            "setConsumed"
          ],
          "type": "object",
          "properties": {
            "queueName": {
              "minLength": 1,
              "type": "string"
            },
            "setConsumed": {
              "type": "boolean"
            }
          }
        },
        "TestDataQueueItemDto": {
          "type": "object",
          "properties": {
            "testDataQueueId": {
              "type": "integer",
              "format": "int64"
            },
            "content": {
              "type": "object"
            },
            "isConsumed": {
              "type": "boolean"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestDataQueueItemODataDto": {
          "type": "object",
          "properties": {
            "TestDataQueueId": {
              "type": "integer",
              "format": "int64"
            },
            "ContentJson": {
              "type": "string"
            },
            "IsConsumed": {
              "type": "boolean"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestDataQueueSetAllItemsConsumedDto": {
          "required": [
            "isConsumed",
            "queueName"
          ],
          "type": "object",
          "properties": {
            "queueName": {
              "minLength": 1,
              "type": "string"
            },
            "isConsumed": {
              "type": "boolean"
            }
          }
        },
        "TestDataQueueSetItemsConsumedDto": {
          "required": [
            "isConsumed",
            "itemIds"
          ],
          "type": "object",
          "properties": {
            "itemIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "isConsumed": {
              "type": "boolean"
            }
          }
        },
        "TestEnvironmentDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestPackageInfoDto": {
          "type": "object",
          "properties": {
            "packageIdentifier": {
              "type": "string"
            },
            "latestVersion": {
              "type": "string"
            },
            "latestPrereleaseVersion": {
              "type": "string"
            }
          }
        },
        "TestReleaseVersionDto": {
          "type": "object",
          "properties": {
            "releaseId": {
              "type": "integer",
              "format": "int64"
            },
            "versionNumber": {
              "type": "string"
            },
            "organizationUnitId": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetDto": {
          "required": [
            "Name",
            "Packages",
            "TestCases"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "format": "uuid"
            },
            "Name": {
              "minLength": 1,
              "type": "string"
            },
            "Description": {
              "type": "string"
            },
            "SourceType": {
              "type": "string",
              "enum": [
                "User",
                "ExternalTool",
                "Transient"
              ],
              "x-ms-enum": {
                "name": "TestSetDtoSourceType",
                "modelAsString": false
              }
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "EnvironmentId": {
              "type": "integer",
              "format": "int64"
            },
            "Environment": {
              "$ref": "#/components/schemas/TestEnvironmentDto"
            },
            "TestCaseCount": {
              "type": "integer",
              "format": "int32"
            },
            "RobotId": {
              "type": "integer",
              "format": "int64"
            },
            "EnableCoverage": {
              "type": "boolean"
            },
            "Packages": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestSetPackageDto"
              }
            },
            "TestCases": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseDto"
              }
            },
            "InputArguments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestSetInputArgumentDto"
              }
            },
            "IsDeleted": {
              "type": "boolean"
            },
            "DeleterUserId": {
              "type": "integer",
              "format": "int64"
            },
            "DeletionTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetExecutionAttachmentDto": {
          "type": "object",
          "properties": {
            "TestSetExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "FileName": {
              "type": "string"
            },
            "MimeType": {
              "type": "string"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "Tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetExecutionAttachmentFilterDto": {
          "type": "object",
          "properties": {
            "testSetExecutionId": {
              "type": "integer",
              "format": "int64"
            },
            "batchExecutionKey": {
              "type": "string",
              "format": "uuid"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "TestSetExecutionDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string"
            },
            "TestSetId": {
              "type": "integer",
              "format": "int64"
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "TestSet": {
              "$ref": "#/components/schemas/TestSetDto"
            },
            "StartTime": {
              "type": "string",
              "format": "date-time"
            },
            "EndTime": {
              "type": "string",
              "format": "date-time"
            },
            "Status": {
              "type": "string",
              "enum": [
                "Pending",
                "Running",
                "Cancelling",
                "Passed",
                "Failed",
                "Cancelled"
              ],
              "x-ms-enum": {
                "name": "TestSetExecutionDtoStatus",
                "modelAsString": false
              }
            },
            "TriggerType": {
              "type": "string",
              "enum": [
                "Manual",
                "Scheduled",
                "ExternalTool"
              ],
              "x-ms-enum": {
                "name": "TestSetExecutionDtoTriggerType",
                "modelAsString": false
              }
            },
            "ScheduleId": {
              "type": "integer",
              "format": "int64"
            },
            "BatchExecutionKey": {
              "type": "string",
              "format": "uuid"
            },
            "CoverageStatus": {
              "type": "string",
              "enum": [
                "Disabled",
                "Pending",
                "Processing",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "TestSetExecutionDtoCoverageStatus",
                "modelAsString": false
              }
            },
            "RunId": {
              "type": "integer",
              "format": "int32"
            },
            "TestCaseExecutions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseExecutionDto"
              }
            },
            "Attachments": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestSetExecutionAttachmentDto"
              }
            },
            "EnforceExecutionOrder": {
              "type": "boolean"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetExecutionOptionsDto": {
          "type": "object",
          "properties": {
            "batchExecutionKey": {
              "type": "string",
              "format": "uuid"
            },
            "triggerType": {
              "type": "string",
              "enum": [
                "Manual",
                "Scheduled",
                "ExternalTool"
              ],
              "x-ms-enum": {
                "name": "TestSetExecutionOptionsDtoTriggerType",
                "modelAsString": false
              }
            },
            "testCases": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TestCaseExecutionOptionsDto"
              }
            },
            "executeOnlySpecifiedTestCases": {
              "type": "boolean"
            },
            "robotId": {
              "type": "integer",
              "format": "int64"
            },
            "runtimeType": {
              "type": "string",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "TestSetExecutionOptionsDtoRuntimeType",
                "modelAsString": false
              }
            },
            "machineId": {
              "type": "integer",
              "format": "int64"
            },
            "machineSessionId": {
              "type": "integer",
              "format": "int64"
            },
            "enforceExecutionOrder": {
              "type": "boolean"
            }
          }
        },
        "TestSetInputArgumentDto": {
          "required": [
            "Name",
            "Type",
            "Value"
          ],
          "type": "object",
          "properties": {
            "Name": {
              "minLength": 1,
              "type": "string"
            },
            "Type": {
              "minLength": 1,
              "type": "string"
            },
            "Value": {
              "minLength": 1,
              "type": "string"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetPackageDto": {
          "required": [
            "PackageIdentifier",
            "VersionMask"
          ],
          "type": "object",
          "properties": {
            "TestSetId": {
              "type": "integer",
              "format": "int64"
            },
            "TestSet": {
              "$ref": "#/components/schemas/TestSetDto"
            },
            "VersionMask": {
              "minLength": 1,
              "type": "string"
            },
            "PackageIdentifier": {
              "minLength": 1,
              "type": "string"
            },
            "IncludePrerelease": {
              "type": "boolean"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetScheduleDto": {
          "required": [
            "Name",
            "TestSetId",
            "TimeZoneId"
          ],
          "type": "object",
          "properties": {
            "Enabled": {
              "type": "boolean"
            },
            "Name": {
              "maxLength": 256,
              "minLength": 1,
              "type": "string"
            },
            "Description": {
              "type": "string"
            },
            "TestSetId": {
              "type": "integer",
              "format": "int64"
            },
            "TestSetName": {
              "type": "string"
            },
            "TimeZoneId": {
              "maxLength": 80,
              "minLength": 1,
              "type": "string"
            },
            "TimeZoneIana": {
              "type": "string"
            },
            "CalendarId": {
              "type": "integer",
              "format": "int64"
            },
            "CalendarName": {
              "type": "string"
            },
            "CronExpression": {
              "type": "string"
            },
            "CronDetails": {
              "type": "string"
            },
            "CronSummary": {
              "type": "string"
            },
            "NextOccurrence": {
              "type": "string",
              "format": "date-time"
            },
            "DisableDate": {
              "type": "string",
              "format": "date-time"
            },
            "ExternalJobKey": {
              "type": "string"
            },
            "ExternalJobKeyScheduler": {
              "type": "string",
              "format": "uuid"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "TestSetSchedulesEnabledRequest": {
          "required": [
            "enabled",
            "testSetScheduleIds"
          ],
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "testSetScheduleIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "TransactionDataDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "The name of the queue in which to search for the next item or in which to insert the item before marking it as InProgress and sending it to the robot."
            },
            "RobotIdentifier": {
              "type": "string",
              "description": "The unique key identifying the robot that sent the request.",
              "format": "uuid"
            },
            "SpecificContent": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "If not null a new item will be added to the queue with this content before being moved to InProgress state and returned to the robot for processing.\r\n<para />If null the next available item in the list will be moved to InProgress state and returned to the robot for processing."
            },
            "DeferDate": {
              "type": "string",
              "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
              "format": "date-time"
            },
            "DueDate": {
              "type": "string",
              "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
              "format": "date-time"
            },
            "Reference": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "description": "An optional, user-specified value for queue item identification."
            },
            "ReferenceFilterOption": {
              "type": "string",
              "description": "Declares the strategy used to filter the Reference value.",
              "enum": [
                "Equals",
                "StartsWith"
              ],
              "x-ms-enum": {
                "name": "TransactionDataDtoReferenceFilterOption",
                "modelAsString": false
              }
            }
          },
          "description": "Stores data sent when processing of an existing or a new item starts."
        },
        "TransactionResultDto": {
          "type": "object",
          "properties": {
            "IsSuccessful": {
              "type": "boolean",
              "description": "States if the processing was successful or not."
            },
            "ProcessingException": {
              "$ref": "#/components/schemas/ProcessingExceptionDto"
            },
            "DeferDate": {
              "type": "string",
              "description": "The earliest date and time at which the item is available for processing. If empty the item can be processed as soon as possible.",
              "format": "date-time"
            },
            "DueDate": {
              "type": "string",
              "description": "The latest date and time at which the item should be processed. If empty the item can be processed at any given time.",
              "format": "date-time"
            },
            "Output": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data resulted after successful processing."
            },
            "Analytics": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "A collection of key value pairs containing custom data for further analytics processing."
            },
            "Progress": {
              "type": "string",
              "description": "String field which is used to keep track of the business flow progress."
            }
          },
          "description": "Stores data sent when processing an item ended."
        },
        "UnattendedRobotDto": {
          "type": "object",
          "properties": {
            "UserName": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The UserName used to authenticate on the Host Machine."
            },
            "Password": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string",
              "description": "The Password used to authenticate on the Host Machine."
            },
            "CredentialStoreId": {
              "type": "integer",
              "description": "The Credential Store used to store the password.",
              "format": "int64"
            },
            "CredentialType": {
              "type": "string",
              "description": "The robot credentials type (Default/ SmartCard)",
              "enum": [
                "Default",
                "SmartCard",
                "NCipher",
                "SafeNet",
                "NoCredential"
              ],
              "x-ms-enum": {
                "name": "UnattendedRobotDtoCredentialType",
                "modelAsString": false
              }
            },
            "CredentialExternalName": {
              "maxLength": 450,
              "minLength": 0,
              "type": "string",
              "description": "Contains the value of the key in the external store used to store the password."
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "description": "An object containing execution settings for the Robot."
            },
            "LimitConcurrentExecution": {
              "type": "boolean",
              "description": "Specifies if the robot can be used concurrently on multiple machines"
            },
            "RobotId": {
              "type": "integer",
              "description": "The actual Id of the provisioned Robot.",
              "format": "int64"
            },
            "MachineMappingsCount": {
              "type": "integer",
              "description": "Number of assigned machine mappings.",
              "format": "int32"
            }
          }
        },
        "UpdateInfoDto": {
          "type": "object",
          "properties": {
            "updateStatus": {
              "type": "string",
              "enum": [
                "None",
                "InProgress",
                "Failed",
                "NonCompliant",
                "Compliant",
                "NotApplicable",
                "Scheduled",
                "FailedRescheduled"
              ],
              "x-ms-enum": {
                "name": "UpdateInfoDtoUpdateStatus",
                "modelAsString": false
              }
            },
            "reason": {
              "type": "string",
              "enum": [
                "NonCompliantWithDifferentVersion",
                "NonCompliantWithoutTargetVersion",
                "NotApplicableForOlderSessions",
                "NotApplicableForMachineType",
                "NotApplicableTemplateWithoutRobotSessions",
                "NotApplicableForPlatform",
                "NotApplicableForTargetFramework"
              ],
              "x-ms-enum": {
                "name": "UpdateInfoDtoReason",
                "modelAsString": false
              }
            },
            "targetUpdateVersion": {
              "type": "string"
            },
            "isCommunity": {
              "type": "boolean"
            },
            "statusInfo": {
              "type": "string"
            }
          }
        },
        "UpdateMachinesToFolderAssociationsRequest": {
          "required": [
            "associations"
          ],
          "type": "object",
          "properties": {
            "associations": {
              "$ref": "#/components/schemas/MachinesFolderAssociationsDto"
            }
          }
        },
        "UpdatePolicyDto": {
          "type": "object",
          "properties": {
            "Type": {
              "type": "string",
              "description": "The type of the policy (None/ SpecificVersion/ LatestVersion)",
              "enum": [
                "None",
                "SpecificVersion",
                "LatestVersion",
                "LatestPatch"
              ],
              "x-ms-enum": {
                "name": "UpdatePolicyDtoType",
                "modelAsString": false
              }
            },
            "SpecificVersion": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string",
              "description": "The specific version used for SpecificVersion policy type"
            }
          },
          "description": "The policy applied for update robots' versions"
        },
        "UpdateSettingsDto": {
          "type": "object",
          "properties": {
            "UpdateServerSource": {
              "type": "string",
              "enum": [
                "Orchestrator"
              ],
              "x-ms-enum": {
                "name": "UpdateSettingsDtoUpdateServerSource",
                "modelAsString": false
              }
            },
            "UpdateServerUrl": {
              "type": "string"
            },
            "PollingInterval": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "UpdateUserPasswordDto": {
          "required": [
            "Username"
          ],
          "type": "object",
          "properties": {
            "TenancyName": {
              "type": "string"
            },
            "Username": {
              "minLength": 1,
              "type": "string"
            },
            "CurrentPassword": {
              "type": "string",
              "description": "Existing user password"
            },
            "NewPassword": {
              "type": "string",
              "description": "The new user password"
            }
          }
        },
        "UpdateUserSettingRequest": {
          "required": [
            "setting"
          ],
          "type": "object",
          "properties": {
            "setting": {
              "$ref": "#/components/schemas/SettingsDto"
            }
          }
        },
        "UserAssignRolesRequest": {
          "required": [
            "roleIds"
          ],
          "type": "object",
          "properties": {
            "roleIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "UserAssignmentsDto": {
          "type": "object",
          "properties": {
            "UserIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "RolesPerFolder": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FolderRolesDto"
              }
            }
          }
        },
        "UserChangeCultureRequest": {
          "required": [
            "culture"
          ],
          "type": "object",
          "properties": {
            "culture": {
              "minLength": 1,
              "type": "string"
            }
          }
        },
        "UserDto": {
          "type": "object",
          "properties": {
            "Name": {
              "maxLength": 64,
              "minLength": 0,
              "type": "string",
              "description": "The name of the person for which the user is created."
            },
            "Surname": {
              "maxLength": 64,
              "minLength": 0,
              "type": "string",
              "description": "The surname of the person for which the user is created."
            },
            "UserName": {
              "type": "string",
              "description": "The name used to login to Orchestrator."
            },
            "Domain": {
              "type": "string",
              "description": "The domain from which the user is imported"
            },
            "DirectoryIdentifier": {
              "type": "string",
              "description": "The directory identifier from which the user is imported"
            },
            "FullName": {
              "type": "string",
              "description": "The full name of the person constructed with the format Name Surname."
            },
            "EmailAddress": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string",
              "description": "The e-mail address associated with the user.",
              "format": "email"
            },
            "IsEmailConfirmed": {
              "type": "boolean",
              "description": "States if the email address is valid or not."
            },
            "LastLoginTime": {
              "type": "string",
              "description": "The date and time when the user last logged in, or null if the user never logged in.",
              "format": "date-time"
            },
            "IsActive": {
              "type": "boolean",
              "description": "States if the user is active or not. An inactive user cannot login to Orchestrator."
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the user was created.",
              "format": "date-time"
            },
            "AuthenticationSource": {
              "type": "string",
              "description": "The source which authenticated this user."
            },
            "Password": {
              "type": "string",
              "description": "The password used during application login."
            },
            "IsExternalLicensed": {
              "type": "boolean"
            },
            "UserRoles": {
              "type": "array",
              "description": "The collection of roles associated with the user.",
              "items": {
                "$ref": "#/components/schemas/UserRoleDto"
              }
            },
            "RolesList": {
              "type": "array",
              "description": "The collection of role names associated with the user.",
              "items": {
                "type": "string"
              }
            },
            "LoginProviders": {
              "type": "array",
              "description": "The collection of entities that can authenticate the user.",
              "items": {
                "type": "string"
              }
            },
            "OrganizationUnits": {
              "type": "array",
              "description": "The collection of organization units associated with the user.",
              "items": {
                "$ref": "#/components/schemas/OrganizationUnitDto"
              }
            },
            "TenantId": {
              "type": "integer",
              "description": "The id of the tenant owning the user.",
              "format": "int32"
            },
            "TenancyName": {
              "type": "string",
              "description": "The name of the tenant owning the user."
            },
            "TenantDisplayName": {
              "type": "string",
              "description": "The display name of the tenant owning the user."
            },
            "TenantKey": {
              "type": "string",
              "description": "The key of the tenant owning the user."
            },
            "Type": {
              "type": "string",
              "description": "The user type.",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "UserDtoType",
                "modelAsString": false
              }
            },
            "ProvisionType": {
              "type": "string",
              "description": "The user type.",
              "enum": [
                "Manual",
                "Automatic"
              ],
              "x-ms-enum": {
                "name": "UserDtoProvisionType",
                "modelAsString": false
              }
            },
            "LicenseType": {
              "type": "string",
              "description": "The user's license type.",
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "UserDtoLicenseType",
                "modelAsString": false
              }
            },
            "RobotProvision": {
              "$ref": "#/components/schemas/AttendedRobotDto"
            },
            "UnattendedRobot": {
              "$ref": "#/components/schemas/UnattendedRobotDto"
            },
            "NotificationSubscription": {
              "$ref": "#/components/schemas/UserNotificationSubscription"
            },
            "Key": {
              "type": "string",
              "description": "Unique key for a user",
              "format": "uuid"
            },
            "MayHaveUserSession": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have a User session (default: true)"
            },
            "MayHaveRobotSession": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have an Attended Robot attached (default: true)"
            },
            "MayHaveUnattendedSession": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have an Unattended Robot attached (default: false)"
            },
            "BypassBasicAuthRestriction": {
              "type": "boolean",
              "description": "Specifies whether this user bypasses the \"Auth.RestrictBasicAuthentication\" application setting (default: null)"
            },
            "MayHavePersonalWorkspace": {
              "type": "boolean",
              "description": "Specifies whether this user is allowed to have a Personal Workspace"
            },
            "UpdatePolicy": {
              "$ref": "#/components/schemas/UpdatePolicyDto"
            },
            "AccountId": {
              "type": "string"
            },
            "LastModificationTime": {
              "type": "string",
              "format": "date-time"
            },
            "LastModifierUserId": {
              "type": "integer",
              "format": "int64"
            },
            "CreatorUserId": {
              "type": "integer",
              "format": "int64"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about assigned role(s) and email settings, and enables a person or a Robot to login to Orchestrator."
        },
        "UserEntityDto": {
          "type": "object",
          "properties": {
            "FullName": {
              "type": "string"
            },
            "AuthenticationSource": {
              "type": "string"
            },
            "UserName": {
              "type": "string"
            },
            "IsInherited": {
              "type": "boolean"
            },
            "AssignedToFolderIds": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "MayHaveAttended": {
              "type": "boolean"
            },
            "MayHaveUnattended": {
              "type": "boolean"
            },
            "Type": {
              "type": "string",
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "SimpleUserEntityDtoType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "UserLoginInfoDto": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "surname": {
              "type": "string"
            },
            "userName": {
              "type": "string"
            },
            "emailAddress": {
              "type": "string"
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "UserNotificationSubscription": {
          "type": "object",
          "properties": {
            "Queues": {
              "type": "boolean"
            },
            "Robots": {
              "type": "boolean"
            },
            "Jobs": {
              "type": "boolean"
            },
            "Schedules": {
              "type": "boolean"
            },
            "Tasks": {
              "type": "boolean"
            },
            "QueueItems": {
              "type": "boolean"
            },
            "Insights": {
              "type": "boolean"
            },
            "CloudRobots": {
              "type": "boolean"
            },
            "Serverless": {
              "type": "boolean"
            },
            "Export": {
              "type": "boolean"
            }
          }
        },
        "UserOrganizationUnitDto": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "integer",
              "description": "The Id of the user",
              "format": "int64"
            },
            "userName": {
              "type": "string",
              "description": "The name of the user"
            },
            "organizationUnitId": {
              "type": "integer",
              "description": "The Id of the organization unit",
              "format": "int64"
            },
            "organizationUnitName": {
              "type": "string",
              "description": "The name of the organization unit."
            },
            "id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about an organization unit in Orchestrator.\r\n<para /> An orchestrator unit can be understood as a company department and it is used to group different entities."
        },
        "UserPermissionsCollection": {
          "type": "object",
          "properties": {
            "UserId": {
              "type": "integer",
              "description": "The Id of the user associated with the permissions.",
              "format": "int64"
            },
            "Permissions": {
              "type": "array",
              "description": "The collection of names of the permissions the user is associated with.",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Stores information about all the permissions a user is associated with in Orchestrator."
        },
        "UserRoleAssignmentsDto": {
          "type": "object",
          "properties": {
            "TenantRoles": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoleUsersDto"
              }
            },
            "PageItems": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FolderAssignmentsDto"
              }
            },
            "Count": {
              "type": "integer",
              "format": "int32"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "UserRoleDto": {
          "type": "object",
          "properties": {
            "UserId": {
              "type": "integer",
              "description": "The Id of the associated user.",
              "format": "int64"
            },
            "RoleId": {
              "type": "integer",
              "description": "The Id of the associated role.",
              "format": "int32"
            },
            "UserName": {
              "type": "string",
              "description": "The name of the associated user"
            },
            "RoleName": {
              "type": "string",
              "description": "The name of the associated role"
            },
            "RoleType": {
              "type": "string",
              "enum": [
                "Mixed",
                "Tenant",
                "Folder"
              ],
              "x-ms-enum": {
                "name": "UserRoleDtoRoleType",
                "modelAsString": false
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Stores information about the association between a user and a role."
        },
        "UserRolesDto": {
          "type": "object",
          "properties": {
            "UserEntity": {
              "$ref": "#/components/schemas/UserEntityDto"
            },
            "Roles": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SimpleRoleDto"
              }
            },
            "HasAlertsEnabled": {
              "type": "boolean"
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          },
          "description": "Association between a user and a set of roles."
        },
        "UsersSetActiveRequest": {
          "required": [
            "active"
          ],
          "type": "object",
          "properties": {
            "active": {
              "type": "boolean"
            }
          }
        },
        "UsersToggleOrganizationUnitRequest": {
          "required": [
            "organizationUnitId",
            "toggle"
          ],
          "type": "object",
          "properties": {
            "organizationUnitId": {
              "type": "integer",
              "format": "int64"
            },
            "toggle": {
              "type": "boolean"
            }
          }
        },
        "UsersToggleRoleRequest": {
          "required": [
            "role",
            "toggle"
          ],
          "type": "object",
          "properties": {
            "role": {
              "minLength": 1,
              "type": "string"
            },
            "toggle": {
              "type": "boolean"
            }
          }
        },
        "ValidateProcessScheduleRequest": {
          "required": [
            "processSchedule"
          ],
          "type": "object",
          "properties": {
            "processSchedule": {
              "$ref": "#/components/schemas/ProcessScheduleDto"
            }
          }
        },
        "ValidationErrorInfo": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "members": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ValidationResultDto": {
          "type": "object",
          "properties": {
            "IsValid": {
              "type": "boolean"
            },
            "Errors": {
              "type": "array",
              "readOnly": true,
              "items": {
                "type": "string"
              }
            },
            "ErrorCodes": {
              "type": "array",
              "readOnly": true,
              "items": {
                "type": "string",
                "enum": [
                  "RobotNotAssignedToFolder",
                  "RobotNotFound",
                  "RobotNoCredentials",
                  "RobotBusy",
                  "RobotConcurrencyLimit",
                  "TemplateNoRuntime",
                  "TemplateNoHostsAvailable",
                  "TemplateNoLicense",
                  "TemplateFullCapacity",
                  "TemplateNotAssignedToFolder",
                  "TemplateMaintenanceMode",
                  "DynamicJobAccountCredentialsInvalid",
                  "DynamicJobForegroundAutomationTypeInvalid",
                  "DynamicJobBackgroundAutomationTypeInvalid",
                  "DynamicJobWindowsTargetFrameworkInvalid",
                  "DynamicJobCrossPlatformTargetFrameworkInvalid",
                  "DynamicJobConnectedMachinesInvalid",
                  "DynamicJobConnectedMachinesUserCredentialsInvalid",
                  "DynamicJobConnectedMachinesCrossPlatformRobotVersionInvalid",
                  "DynamicJobConnectedMachinesWindowsRobotVersionInvalid"
                ],
                "x-ms-enum": {
                  "name": "JobPendingReasons",
                  "modelAsString": false
                }
              }
            }
          }
        },
        "VerifySmtpSettingRequest": {
          "required": [
            "sendTo"
          ],
          "type": "object",
          "properties": {
            "sendTo": {
              "minLength": 1,
              "type": "string"
            },
            "smtpSettingModel": {
              "$ref": "#/components/schemas/SmtpSettingModel"
            }
          }
        },
        "VideoRecordingSettingsDto": {
          "type": "object",
          "properties": {
            "VideoRecordingType": {
              "type": "string",
              "default": "None",
              "enum": [
                "None",
                "Failed",
                "All"
              ],
              "x-ms-enum": {
                "name": "VideoRecordingSettingsDtoVideoRecordingType",
                "modelAsString": false
              }
            },
            "QueueItemVideoRecordingType": {
              "type": "string",
              "default": "None",
              "enum": [
                "None",
                "Failed",
                "All"
              ],
              "x-ms-enum": {
                "name": "VideoRecordingSettingsDtoQueueItemVideoRecordingType",
                "modelAsString": false
              }
            },
            "MaxDurationSeconds": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "WebhookDto": {
          "required": [
            "AllowInsecureSsl",
            "Enabled",
            "Name",
            "SubscribeToAllEvents",
            "Url"
          ],
          "type": "object",
          "properties": {
            "Key": {
              "type": "string",
              "format": "uuid"
            },
            "Name": {
              "maxLength": 128,
              "minLength": 0,
              "type": "string"
            },
            "Description": {
              "maxLength": 256,
              "minLength": 0,
              "type": "string"
            },
            "Url": {
              "maxLength": 2000,
              "minLength": 0,
              "type": "string",
              "format": "uri"
            },
            "Enabled": {
              "type": "boolean"
            },
            "Secret": {
              "maxLength": 100,
              "minLength": 0,
              "type": "string"
            },
            "SubscribeToAllEvents": {
              "type": "boolean"
            },
            "AllowInsecureSsl": {
              "type": "boolean"
            },
            "Events": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WebhookEventDto"
              }
            },
            "Id": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "WebhookEventDto": {
          "required": [
            "EventType"
          ],
          "type": "object",
          "properties": {
            "EventType": {
              "maxLength": 50,
              "minLength": 0,
              "type": "string"
            }
          }
        },
        "WebhookEventTypeDto": {
          "type": "object",
          "properties": {
            "Name": {
              "type": "string",
              "description": "Event type key"
            },
            "Group": {
              "type": "string",
              "description": "Group"
            }
          }
        },
        "WebhookSimpleUserDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            },
            "UserName": {
              "type": "string",
              "description": "The name used to login to Orchestrator.",
              "readOnly": true
            },
            "Domain": {
              "type": "string",
              "description": "The domain from which the user is imported",
              "readOnly": true
            },
            "FullName": {
              "type": "string",
              "description": "The full name of the person constructed with the format Name Surname.",
              "readOnly": true
            },
            "EmailAddress": {
              "type": "string",
              "description": "The e-mail address associated with the user.",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "description": "The user type.",
              "readOnly": true,
              "enum": [
                "User",
                "Robot",
                "DirectoryUser",
                "DirectoryGroup",
                "DirectoryRobot",
                "DirectoryExternalApplication"
              ],
              "x-ms-enum": {
                "name": "WebhookSimpleUserDtoType",
                "modelAsString": false
              }
            },
            "IsActive": {
              "type": "boolean",
              "description": "States if the user is active or not. An inactive user cannot login to Orchestrator.",
              "readOnly": true
            },
            "LastLoginTime": {
              "type": "string",
              "description": "The date and time when the user last logged in, or null if the user never logged in.",
              "format": "date-time",
              "readOnly": true
            },
            "CreationTime": {
              "type": "string",
              "description": "The date and time when the user was created.",
              "format": "date-time",
              "readOnly": true
            },
            "AuthenticationSource": {
              "type": "string",
              "description": "The source which authenticated this user.",
              "readOnly": true
            }
          }
        },
        "WebhookTaskAssignmentChangedDto": {
          "type": "object",
          "properties": {
            "Title": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoPriority",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoStatus",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "TaskCatalogName": {
              "type": "string",
              "readOnly": true
            },
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserIdOldValue": {
              "type": "integer",
              "description": "Id of the old user to whom the task was assigned",
              "format": "int64",
              "readOnly": true
            }
          },
          "description": "This class defines DTO for Tasks Collection for webhook event Task.AssignmentChanged"
        },
        "WebhookTaskCompletedDto": {
          "type": "object",
          "properties": {
            "Title": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoPriority",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoStatus",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "TaskCatalogName": {
              "type": "string",
              "readOnly": true
            },
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Action": {
              "type": "string",
              "description": "Action taken to complete the task",
              "readOnly": true
            }
          },
          "description": "This class defines DTO for Tasks Collection for webhook event Task.Completed"
        },
        "WebhookTaskCreatedDto": {
          "type": "object",
          "properties": {
            "Title": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoPriority",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoStatus",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "TaskCatalogName": {
              "type": "string",
              "readOnly": true
            },
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            }
          },
          "description": "This class defines DTO for Tasks Collection for webhook event Task.Created"
        },
        "WrappedEnvironmentDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Name": {
              "type": "string",
              "readOnly": true
            },
            "Description": {
              "type": "string",
              "readOnly": true
            }
          }
        },
        "WrappedJobDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "description": "The unique job identifier.",
              "format": "uuid",
              "readOnly": true
            },
            "CreationTime": {
              "type": "string",
              "description": "The Creation time of the job",
              "format": "date-time",
              "readOnly": true
            },
            "StartTime": {
              "type": "string",
              "description": "The date and time when the job execution started or null if the job hasn't started yet.",
              "format": "date-time",
              "readOnly": true
            },
            "EndTime": {
              "type": "string",
              "description": "The date and time when the job execution ended or null if the job hasn't ended yet.",
              "format": "date-time",
              "readOnly": true
            },
            "State": {
              "type": "string",
              "description": "The state in which the job is.",
              "readOnly": true,
              "enum": [
                "Pending",
                "Running",
                "Stopping",
                "Terminating",
                "Faulted",
                "Successful",
                "Stopped",
                "Suspended",
                "Resumed"
              ],
              "x-ms-enum": {
                "name": "WrappedJobDtoState",
                "modelAsString": false
              }
            },
            "Source": {
              "type": "string",
              "description": "The Source name of the job.",
              "readOnly": true
            },
            "SourceType": {
              "type": "string",
              "description": "The Source type of the job.",
              "readOnly": true,
              "enum": [
                "Manual",
                "Schedule",
                "Agent",
                "Queue",
                "StudioWeb",
                "IntegrationTrigger",
                "StudioDesktop",
                "AutomationOpsPipelines",
                "Apps",
                "SAP"
              ],
              "x-ms-enum": {
                "name": "WrappedJobDtoSourceType",
                "modelAsString": false
              }
            },
            "BatchExecutionKey": {
              "type": "string",
              "description": "The unique identifier grouping multiple jobs. It is usually generated when the job is created by a schedule.",
              "format": "uuid",
              "readOnly": true
            },
            "Info": {
              "type": "string",
              "description": "Additional information about the current job.",
              "readOnly": true
            },
            "StartingScheduleId": {
              "type": "integer",
              "description": "The Id of the schedule that started the job, or null if the job was started by the user.",
              "format": "int64",
              "readOnly": true
            },
            "ReleaseName": {
              "type": "string",
              "description": "The name of the release associated with the current name.",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "description": "The type of the job, Attended if started via the robot, Unattended otherwise",
              "readOnly": true,
              "enum": [
                "Unattended",
                "Attended",
                "ServerlessGeneric"
              ],
              "x-ms-enum": {
                "name": "WrappedJobDtoType",
                "modelAsString": false
              }
            },
            "HostMachineName": {
              "type": "string",
              "description": "The name of the machine where the Robot run the job.",
              "readOnly": true
            },
            "Robot": {
              "$ref": "#/components/schemas/WrappedRobotDto"
            },
            "Release": {
              "$ref": "#/components/schemas/WrappedReleaseDto"
            },
            "InputArguments": {
              "type": "object",
              "properties": {},
              "description": "Input parameters in JSON format to be passed to job execution",
              "readOnly": true
            },
            "OutputArguments": {
              "type": "object",
              "properties": {},
              "description": "Output parameters in JSON format resulted from job execution",
              "readOnly": true
            },
            "RuntimeType": {
              "type": "string",
              "description": "The type of license used to run the job",
              "readOnly": true,
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "WrappedJobDtoRuntimeType",
                "modelAsString": false
              }
            },
            "ProcessType": {
              "type": "string",
              "description": "The type of process",
              "readOnly": true,
              "enum": [
                "Undefined",
                "Process",
                "TestAutomationProcess"
              ],
              "x-ms-enum": {
                "name": "WrappedJobDtoProcessType",
                "modelAsString": false
              }
            },
            "SpecificPriorityValue": {
              "type": "integer",
              "description": "The priority for a job",
              "format": "int32",
              "readOnly": true
            }
          }
        },
        "WrappedProcessScheduleDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Name": {
              "type": "string",
              "description": "The name of the schedule.",
              "readOnly": true
            },
            "Enabled": {
              "type": "boolean",
              "description": "Specifies if the schedule is active or not.",
              "readOnly": true
            },
            "EnvironmentId": {
              "type": "string",
              "description": "The Id of the environment associated with the schedule.",
              "readOnly": true
            },
            "EnvironmentName": {
              "type": "string",
              "description": "The name of the environment associated with the schedule.",
              "readOnly": true
            },
            "StartProcessCron": {
              "type": "string",
              "description": "The start cron expression of the schedule.",
              "readOnly": true
            },
            "StartStrategy": {
              "type": "string",
              "description": "States which robots from the environment are being run by the schedule.",
              "readOnly": true,
              "enum": [
                "All",
                "Specific",
                "RobotCount",
                "JobsCount",
                "ModernJobsCount"
              ],
              "x-ms-enum": {
                "name": "WrappedProcessScheduleDtoStartStrategy",
                "modelAsString": false
              }
            },
            "StopStrategy": {
              "type": "string",
              "description": "The way a running process is stopped.",
              "readOnly": true,
              "enum": [
                "SoftStop",
                "Kill"
              ],
              "x-ms-enum": {
                "name": "WrappedProcessScheduleDtoStopStrategy",
                "modelAsString": false
              }
            },
            "ExternalJobKey": {
              "type": "string",
              "description": "The unique identifier of the external job associated with the jobs generated by this schedule. A key is generated for each group of jobs triggered by this schedule.",
              "readOnly": true
            },
            "ExternalJobKeyScheduler": {
              "type": "string",
              "description": "The unique identifier of the external background task schedule associated with the background tasks generated by this schedule. A key is generated for each batch of background tasks triggered by this schedule.",
              "format": "uuid",
              "readOnly": true
            },
            "TimeZoneId": {
              "type": "string",
              "description": "The timezone under which the schedule will run.",
              "readOnly": true
            },
            "TimeZoneIana": {
              "type": "string",
              "description": "The timezone under which the schedule will run in Iana Standard.",
              "readOnly": true
            },
            "UseCalendar": {
              "type": "boolean",
              "description": "DEPRECATED. Specify whether the schedule uses a calendar",
              "readOnly": true,
              "x-deprecated": true
            },
            "CalendarId": {
              "type": "integer",
              "description": "Specify which calendar to use",
              "format": "int64",
              "readOnly": true
            },
            "Release": {
              "$ref": "#/components/schemas/SimpleReleaseEventDto"
            },
            "ExecutorRobots": {
              "type": "array",
              "description": "The collection of specific robots selected to be targeted by the current schedule. This collection must be empty if the start strategy is not 0 (specific robots).",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/SimpleRobotEventDto"
              }
            },
            "InputArguments": {
              "type": "object",
              "properties": {},
              "description": "Input parameters that will be passed to each job created by this schedule.",
              "readOnly": true
            }
          }
        },
        "WrappedProcessingExceptionDto": {
          "type": "object",
          "properties": {
            "Reason": {
              "type": "string",
              "description": "The reason the processing failed.",
              "readOnly": true
            },
            "Details": {
              "type": "string",
              "description": "Stores additional details about the exception.",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "description": "The processing exception type, if any.",
              "readOnly": true,
              "enum": [
                "ApplicationException",
                "BusinessException"
              ],
              "x-ms-enum": {
                "name": "WrappedProcessingExceptionDtoType",
                "modelAsString": false
              }
            },
            "Timestamp": {
              "type": "string",
              "description": "The creation time",
              "format": "date-time",
              "readOnly": true
            },
            "AssociatedImageFilePath": {
              "type": "string",
              "description": "A path on the robot running computer to an image file that stores relevant information about the exception - e.g. a system print screen.",
              "readOnly": true
            }
          }
        },
        "WrappedReleaseDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "readOnly": true
            },
            "ProcessKey": {
              "type": "string",
              "readOnly": true
            },
            "ProcessVersion": {
              "type": "string",
              "readOnly": true
            },
            "Name": {
              "type": "string",
              "readOnly": true
            },
            "Description": {
              "type": "string",
              "readOnly": true
            },
            "IsLatestVersion": {
              "type": "boolean",
              "readOnly": true
            },
            "EnvironmentId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Environment": {
              "$ref": "#/components/schemas/WrappedEnvironmentDto"
            },
            "InputArguments": {
              "type": "object",
              "properties": {},
              "readOnly": true
            }
          }
        },
        "WrappedRobotDto": {
          "type": "object",
          "properties": {
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Key": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            },
            "Name": {
              "type": "string",
              "readOnly": true
            },
            "MachineId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "MachineKey": {
              "type": "string",
              "format": "uuid",
              "readOnly": true
            },
            "MachineName": {
              "type": "string",
              "readOnly": true
            },
            "Description": {
              "type": "string",
              "readOnly": true
            },
            "UserName": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "NonProduction",
                "Attended",
                "Unattended",
                "Development",
                "Studio",
                "RpaDeveloper",
                "StudioX",
                "CitizenDeveloper",
                "Headless",
                "StudioPro",
                "RpaDeveloperPro",
                "TestAutomation",
                "AutomationCloud",
                "Serverless",
                "AutomationKit",
                "ServerlessTestAutomation",
                "AutomationCloudTestAutomation",
                "AttendedStudioWeb"
              ],
              "x-ms-enum": {
                "name": "WrappedRobotDtoType",
                "modelAsString": false
              }
            },
            "HostingType": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Standard",
                "Floating"
              ],
              "x-ms-enum": {
                "name": "WrappedRobotDtoHostingType",
                "modelAsString": false
              }
            },
            "Environments": {
              "type": "array",
              "readOnly": true,
              "items": {
                "$ref": "#/components/schemas/WrappedEnvironmentDto"
              }
            },
            "ExecutionSettings": {
              "type": "object",
              "additionalProperties": {
                "type": "object"
              },
              "readOnly": true
            }
          }
        },
        "WrappedStartProcessDto": {
          "type": "object",
          "properties": {
            "ReleaseKey": {
              "type": "string",
              "description": "The unique key of the release associated with the process.",
              "format": "uuid",
              "readOnly": true
            },
            "Strategy": {
              "type": "string",
              "description": "States which robots from the environment are being run by the process.",
              "readOnly": true,
              "enum": [
                "All",
                "Specific",
                "RobotCount",
                "JobsCount",
                "ModernJobsCount"
              ],
              "x-ms-enum": {
                "name": "WrappedStartProcessDtoStrategy",
                "modelAsString": false
              }
            },
            "RobotIds": {
              "type": "array",
              "description": "The collection of ids of specific robots selected to be run by the current process. This collection must be empty only if the start strategy is not Specific.",
              "readOnly": true,
              "items": {
                "type": "integer",
                "format": "int64"
              }
            },
            "JobsCount": {
              "type": "integer",
              "description": "Number of pending jobs to be created in the environment, for the current process. This number must be greater than 0 only if the start strategy is JobsCount.",
              "format": "int32",
              "readOnly": true
            },
            "Source": {
              "type": "string",
              "description": "The Source of the job starting the current process.",
              "readOnly": true,
              "enum": [
                "Manual",
                "Schedule",
                "Queue",
                "StudioWeb",
                "IntegrationTrigger",
                "StudioDesktop",
                "AutomationOpsPipelines",
                "Apps",
                "SAP"
              ],
              "x-ms-enum": {
                "name": "WrappedStartProcessDtoSource",
                "modelAsString": false
              }
            }
          }
        },
        "WrappedTaskDeletedDto": {
          "type": "object",
          "properties": {
            "Title": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoPriority",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoStatus",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "TaskCatalogName": {
              "type": "string",
              "readOnly": true
            },
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "Action": {
              "type": "string",
              "description": "Action taken while completing the task",
              "readOnly": true
            },
            "DeleterUserId": {
              "type": "integer",
              "description": "User who deleted this task",
              "format": "int64",
              "readOnly": true
            },
            "DeletionTime": {
              "type": "string",
              "description": "Deletion time of this task",
              "format": "date-time",
              "readOnly": true
            }
          },
          "description": "This class defines DTO for Tasks Collection for webhook event Task.Deleted"
        },
        "WrappedTaskForwardedDto": {
          "type": "object",
          "properties": {
            "Title": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoPriority",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoStatus",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "TaskCatalogName": {
              "type": "string",
              "readOnly": true
            },
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "ForwardedByUserId": {
              "type": "integer",
              "description": "Id of the user who forwarded this task",
              "format": "int64",
              "readOnly": true
            }
          },
          "description": "This class defines DTO for Tasks Collection for webhook event Task.Forwarded"
        },
        "WrappedTaskSavedDto": {
          "type": "object",
          "properties": {
            "Title": {
              "type": "string",
              "readOnly": true
            },
            "Type": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "FormTask",
                "ExternalTask",
                "DocumentValidationTask",
                "DocumentClassificationTask",
                "DataLabelingTask",
                "AppTask"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoType",
                "modelAsString": false
              }
            },
            "Priority": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Low",
                "Medium",
                "High",
                "Critical"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoPriority",
                "modelAsString": false
              }
            },
            "Status": {
              "type": "string",
              "readOnly": true,
              "enum": [
                "Unassigned",
                "Pending",
                "Completed"
              ],
              "x-ms-enum": {
                "name": "BaseWebhookTaskDtoStatus",
                "modelAsString": false
              }
            },
            "CreationTime": {
              "type": "string",
              "format": "date-time",
              "readOnly": true
            },
            "TaskCatalogName": {
              "type": "string",
              "readOnly": true
            },
            "Id": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "OrganizationUnitId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            },
            "AssignedToUserId": {
              "type": "integer",
              "format": "int64",
              "readOnly": true
            }
          },
          "description": "This class defines DTO for Tasks Collection for webhook event Task.Saved"
        }
      },
      "securitySchemes": {
        "OAuth2": {
          "type": "oauth2",
          "flows": {
            "authorizationCode": {
              "authorizationUrl": "https://uipath-orch.hr-applprep.de/identity/connect/authorize",
              "tokenUrl": "https://uipath-orch.hr-applprep.de/identity/connect/token",
              "scopes": {
                "openid": "OpenId Standard Scope",
                "profile": "Profile Standard Scope",
                "email": "Email Standard Scope",
                "tenant": "Tenant Management Scope",
                "IdentityServerApi": "IdentityServer API Scope",
                "OrchestratorApiUserAccess": "Orchestrator API Scope",
                "ConnectionService": "Connection Service Scope"
              }
            }
          }
        }
      }
    },
    "x-original-swagger-version": "2.0"
  }